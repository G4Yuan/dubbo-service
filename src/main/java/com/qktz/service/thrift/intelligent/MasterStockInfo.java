/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qktz.service.thrift.intelligent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MasterStockInfo implements org.apache.thrift.TBase<MasterStockInfo, MasterStockInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MasterStockInfo");

  private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_code", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STOCK_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_property", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STOCK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECOMMEND_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("recommend_reason", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("buy_price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ADVICE_BUY_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("advice_buy_min", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ADVICE_BUY_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("advice_buy_max", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField STOP_PROFIT_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_profit_min", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField STOP_PROFIT_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_profit_max", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField STOP_LOSS_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_loss_min", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField STOP_LOSS_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_loss_max", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField CURRENT_YIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("current_yield", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CURRENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("current_price", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CURRENT_ZDF_FIELD_DESC = new org.apache.thrift.protocol.TField("current_zdf", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField OPER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("oper_time", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField OPER_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("oper_timestamp", org.apache.thrift.protocol.TType.I64, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MasterStockInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MasterStockInfoTupleSchemeFactory());
  }

  public String stock_code; // required
  public String stock_property; // required
  public String stock_name; // required
  public String recommend_reason; // required
  public double buy_price; // required
  public double advice_buy_min; // required
  public double advice_buy_max; // required
  public double stop_profit_min; // required
  public double stop_profit_max; // required
  public double stop_loss_min; // required
  public double stop_loss_max; // required
  public double current_yield; // required
  public double current_price; // required
  public double current_zdf; // required
  public String strategy; // required
  public int level; // required
  public String oper_time; // required
  public long oper_timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STOCK_CODE((short)1, "stock_code"),
    STOCK_PROPERTY((short)2, "stock_property"),
    STOCK_NAME((short)3, "stock_name"),
    RECOMMEND_REASON((short)4, "recommend_reason"),
    BUY_PRICE((short)5, "buy_price"),
    ADVICE_BUY_MIN((short)7, "advice_buy_min"),
    ADVICE_BUY_MAX((short)8, "advice_buy_max"),
    STOP_PROFIT_MIN((short)9, "stop_profit_min"),
    STOP_PROFIT_MAX((short)10, "stop_profit_max"),
    STOP_LOSS_MIN((short)11, "stop_loss_min"),
    STOP_LOSS_MAX((short)12, "stop_loss_max"),
    CURRENT_YIELD((short)13, "current_yield"),
    CURRENT_PRICE((short)14, "current_price"),
    CURRENT_ZDF((short)15, "current_zdf"),
    STRATEGY((short)16, "strategy"),
    LEVEL((short)17, "level"),
    OPER_TIME((short)18, "oper_time"),
    OPER_TIMESTAMP((short)19, "oper_timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STOCK_CODE
          return STOCK_CODE;
        case 2: // STOCK_PROPERTY
          return STOCK_PROPERTY;
        case 3: // STOCK_NAME
          return STOCK_NAME;
        case 4: // RECOMMEND_REASON
          return RECOMMEND_REASON;
        case 5: // BUY_PRICE
          return BUY_PRICE;
        case 7: // ADVICE_BUY_MIN
          return ADVICE_BUY_MIN;
        case 8: // ADVICE_BUY_MAX
          return ADVICE_BUY_MAX;
        case 9: // STOP_PROFIT_MIN
          return STOP_PROFIT_MIN;
        case 10: // STOP_PROFIT_MAX
          return STOP_PROFIT_MAX;
        case 11: // STOP_LOSS_MIN
          return STOP_LOSS_MIN;
        case 12: // STOP_LOSS_MAX
          return STOP_LOSS_MAX;
        case 13: // CURRENT_YIELD
          return CURRENT_YIELD;
        case 14: // CURRENT_PRICE
          return CURRENT_PRICE;
        case 15: // CURRENT_ZDF
          return CURRENT_ZDF;
        case 16: // STRATEGY
          return STRATEGY;
        case 17: // LEVEL
          return LEVEL;
        case 18: // OPER_TIME
          return OPER_TIME;
        case 19: // OPER_TIMESTAMP
          return OPER_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUY_PRICE_ISSET_ID = 0;
  private static final int __ADVICE_BUY_MIN_ISSET_ID = 1;
  private static final int __ADVICE_BUY_MAX_ISSET_ID = 2;
  private static final int __STOP_PROFIT_MIN_ISSET_ID = 3;
  private static final int __STOP_PROFIT_MAX_ISSET_ID = 4;
  private static final int __STOP_LOSS_MIN_ISSET_ID = 5;
  private static final int __STOP_LOSS_MAX_ISSET_ID = 6;
  private static final int __CURRENT_YIELD_ISSET_ID = 7;
  private static final int __CURRENT_PRICE_ISSET_ID = 8;
  private static final int __CURRENT_ZDF_ISSET_ID = 9;
  private static final int __LEVEL_ISSET_ID = 10;
  private static final int __OPER_TIMESTAMP_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stock_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCK_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("stock_property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCK_NAME, new org.apache.thrift.meta_data.FieldMetaData("stock_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECOMMEND_REASON, new org.apache.thrift.meta_data.FieldMetaData("recommend_reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("buy_price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ADVICE_BUY_MIN, new org.apache.thrift.meta_data.FieldMetaData("advice_buy_min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ADVICE_BUY_MAX, new org.apache.thrift.meta_data.FieldMetaData("advice_buy_max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOP_PROFIT_MIN, new org.apache.thrift.meta_data.FieldMetaData("stop_profit_min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOP_PROFIT_MAX, new org.apache.thrift.meta_data.FieldMetaData("stop_profit_max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOP_LOSS_MIN, new org.apache.thrift.meta_data.FieldMetaData("stop_loss_min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOP_LOSS_MAX, new org.apache.thrift.meta_data.FieldMetaData("stop_loss_max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENT_YIELD, new org.apache.thrift.meta_data.FieldMetaData("current_yield", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("current_price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENT_ZDF, new org.apache.thrift.meta_data.FieldMetaData("current_zdf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.OPER_TIME, new org.apache.thrift.meta_data.FieldMetaData("oper_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPER_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("oper_timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MasterStockInfo.class, metaDataMap);
  }

  public MasterStockInfo() {
  }

  public MasterStockInfo(
    String stock_code,
    String stock_property,
    String stock_name,
    String recommend_reason,
    double buy_price,
    double advice_buy_min,
    double advice_buy_max,
    double stop_profit_min,
    double stop_profit_max,
    double stop_loss_min,
    double stop_loss_max,
    double current_yield,
    double current_price,
    double current_zdf,
    String strategy,
    int level,
    String oper_time,
    long oper_timestamp)
  {
    this();
    this.stock_code = stock_code;
    this.stock_property = stock_property;
    this.stock_name = stock_name;
    this.recommend_reason = recommend_reason;
    this.buy_price = buy_price;
    setBuy_priceIsSet(true);
    this.advice_buy_min = advice_buy_min;
    setAdvice_buy_minIsSet(true);
    this.advice_buy_max = advice_buy_max;
    setAdvice_buy_maxIsSet(true);
    this.stop_profit_min = stop_profit_min;
    setStop_profit_minIsSet(true);
    this.stop_profit_max = stop_profit_max;
    setStop_profit_maxIsSet(true);
    this.stop_loss_min = stop_loss_min;
    setStop_loss_minIsSet(true);
    this.stop_loss_max = stop_loss_max;
    setStop_loss_maxIsSet(true);
    this.current_yield = current_yield;
    setCurrent_yieldIsSet(true);
    this.current_price = current_price;
    setCurrent_priceIsSet(true);
    this.current_zdf = current_zdf;
    setCurrent_zdfIsSet(true);
    this.strategy = strategy;
    this.level = level;
    setLevelIsSet(true);
    this.oper_time = oper_time;
    this.oper_timestamp = oper_timestamp;
    setOper_timestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MasterStockInfo(MasterStockInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStock_code()) {
      this.stock_code = other.stock_code;
    }
    if (other.isSetStock_property()) {
      this.stock_property = other.stock_property;
    }
    if (other.isSetStock_name()) {
      this.stock_name = other.stock_name;
    }
    if (other.isSetRecommend_reason()) {
      this.recommend_reason = other.recommend_reason;
    }
    this.buy_price = other.buy_price;
    this.advice_buy_min = other.advice_buy_min;
    this.advice_buy_max = other.advice_buy_max;
    this.stop_profit_min = other.stop_profit_min;
    this.stop_profit_max = other.stop_profit_max;
    this.stop_loss_min = other.stop_loss_min;
    this.stop_loss_max = other.stop_loss_max;
    this.current_yield = other.current_yield;
    this.current_price = other.current_price;
    this.current_zdf = other.current_zdf;
    if (other.isSetStrategy()) {
      this.strategy = other.strategy;
    }
    this.level = other.level;
    if (other.isSetOper_time()) {
      this.oper_time = other.oper_time;
    }
    this.oper_timestamp = other.oper_timestamp;
  }

  public MasterStockInfo deepCopy() {
    return new MasterStockInfo(this);
  }

  @Override
  public void clear() {
    this.stock_code = null;
    this.stock_property = null;
    this.stock_name = null;
    this.recommend_reason = null;
    setBuy_priceIsSet(false);
    this.buy_price = 0.0;
    setAdvice_buy_minIsSet(false);
    this.advice_buy_min = 0.0;
    setAdvice_buy_maxIsSet(false);
    this.advice_buy_max = 0.0;
    setStop_profit_minIsSet(false);
    this.stop_profit_min = 0.0;
    setStop_profit_maxIsSet(false);
    this.stop_profit_max = 0.0;
    setStop_loss_minIsSet(false);
    this.stop_loss_min = 0.0;
    setStop_loss_maxIsSet(false);
    this.stop_loss_max = 0.0;
    setCurrent_yieldIsSet(false);
    this.current_yield = 0.0;
    setCurrent_priceIsSet(false);
    this.current_price = 0.0;
    setCurrent_zdfIsSet(false);
    this.current_zdf = 0.0;
    this.strategy = null;
    setLevelIsSet(false);
    this.level = 0;
    this.oper_time = null;
    setOper_timestampIsSet(false);
    this.oper_timestamp = 0;
  }

  public String getStock_code() {
    return this.stock_code;
  }

  public MasterStockInfo setStock_code(String stock_code) {
    this.stock_code = stock_code;
    return this;
  }

  public void unsetStock_code() {
    this.stock_code = null;
  }

  /** Returns true if field stock_code is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_code() {
    return this.stock_code != null;
  }

  public void setStock_codeIsSet(boolean value) {
    if (!value) {
      this.stock_code = null;
    }
  }

  public String getStock_property() {
    return this.stock_property;
  }

  public MasterStockInfo setStock_property(String stock_property) {
    this.stock_property = stock_property;
    return this;
  }

  public void unsetStock_property() {
    this.stock_property = null;
  }

  /** Returns true if field stock_property is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_property() {
    return this.stock_property != null;
  }

  public void setStock_propertyIsSet(boolean value) {
    if (!value) {
      this.stock_property = null;
    }
  }

  public String getStock_name() {
    return this.stock_name;
  }

  public MasterStockInfo setStock_name(String stock_name) {
    this.stock_name = stock_name;
    return this;
  }

  public void unsetStock_name() {
    this.stock_name = null;
  }

  /** Returns true if field stock_name is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_name() {
    return this.stock_name != null;
  }

  public void setStock_nameIsSet(boolean value) {
    if (!value) {
      this.stock_name = null;
    }
  }

  public String getRecommend_reason() {
    return this.recommend_reason;
  }

  public MasterStockInfo setRecommend_reason(String recommend_reason) {
    this.recommend_reason = recommend_reason;
    return this;
  }

  public void unsetRecommend_reason() {
    this.recommend_reason = null;
  }

  /** Returns true if field recommend_reason is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommend_reason() {
    return this.recommend_reason != null;
  }

  public void setRecommend_reasonIsSet(boolean value) {
    if (!value) {
      this.recommend_reason = null;
    }
  }

  public double getBuy_price() {
    return this.buy_price;
  }

  public MasterStockInfo setBuy_price(double buy_price) {
    this.buy_price = buy_price;
    setBuy_priceIsSet(true);
    return this;
  }

  public void unsetBuy_price() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUY_PRICE_ISSET_ID);
  }

  /** Returns true if field buy_price is set (has been assigned a value) and false otherwise */
  public boolean isSetBuy_price() {
    return EncodingUtils.testBit(__isset_bitfield, __BUY_PRICE_ISSET_ID);
  }

  public void setBuy_priceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUY_PRICE_ISSET_ID, value);
  }

  public double getAdvice_buy_min() {
    return this.advice_buy_min;
  }

  public MasterStockInfo setAdvice_buy_min(double advice_buy_min) {
    this.advice_buy_min = advice_buy_min;
    setAdvice_buy_minIsSet(true);
    return this;
  }

  public void unsetAdvice_buy_min() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADVICE_BUY_MIN_ISSET_ID);
  }

  /** Returns true if field advice_buy_min is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvice_buy_min() {
    return EncodingUtils.testBit(__isset_bitfield, __ADVICE_BUY_MIN_ISSET_ID);
  }

  public void setAdvice_buy_minIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADVICE_BUY_MIN_ISSET_ID, value);
  }

  public double getAdvice_buy_max() {
    return this.advice_buy_max;
  }

  public MasterStockInfo setAdvice_buy_max(double advice_buy_max) {
    this.advice_buy_max = advice_buy_max;
    setAdvice_buy_maxIsSet(true);
    return this;
  }

  public void unsetAdvice_buy_max() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADVICE_BUY_MAX_ISSET_ID);
  }

  /** Returns true if field advice_buy_max is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvice_buy_max() {
    return EncodingUtils.testBit(__isset_bitfield, __ADVICE_BUY_MAX_ISSET_ID);
  }

  public void setAdvice_buy_maxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADVICE_BUY_MAX_ISSET_ID, value);
  }

  public double getStop_profit_min() {
    return this.stop_profit_min;
  }

  public MasterStockInfo setStop_profit_min(double stop_profit_min) {
    this.stop_profit_min = stop_profit_min;
    setStop_profit_minIsSet(true);
    return this;
  }

  public void unsetStop_profit_min() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOP_PROFIT_MIN_ISSET_ID);
  }

  /** Returns true if field stop_profit_min is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_profit_min() {
    return EncodingUtils.testBit(__isset_bitfield, __STOP_PROFIT_MIN_ISSET_ID);
  }

  public void setStop_profit_minIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOP_PROFIT_MIN_ISSET_ID, value);
  }

  public double getStop_profit_max() {
    return this.stop_profit_max;
  }

  public MasterStockInfo setStop_profit_max(double stop_profit_max) {
    this.stop_profit_max = stop_profit_max;
    setStop_profit_maxIsSet(true);
    return this;
  }

  public void unsetStop_profit_max() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOP_PROFIT_MAX_ISSET_ID);
  }

  /** Returns true if field stop_profit_max is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_profit_max() {
    return EncodingUtils.testBit(__isset_bitfield, __STOP_PROFIT_MAX_ISSET_ID);
  }

  public void setStop_profit_maxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOP_PROFIT_MAX_ISSET_ID, value);
  }

  public double getStop_loss_min() {
    return this.stop_loss_min;
  }

  public MasterStockInfo setStop_loss_min(double stop_loss_min) {
    this.stop_loss_min = stop_loss_min;
    setStop_loss_minIsSet(true);
    return this;
  }

  public void unsetStop_loss_min() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOP_LOSS_MIN_ISSET_ID);
  }

  /** Returns true if field stop_loss_min is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_loss_min() {
    return EncodingUtils.testBit(__isset_bitfield, __STOP_LOSS_MIN_ISSET_ID);
  }

  public void setStop_loss_minIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOP_LOSS_MIN_ISSET_ID, value);
  }

  public double getStop_loss_max() {
    return this.stop_loss_max;
  }

  public MasterStockInfo setStop_loss_max(double stop_loss_max) {
    this.stop_loss_max = stop_loss_max;
    setStop_loss_maxIsSet(true);
    return this;
  }

  public void unsetStop_loss_max() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOP_LOSS_MAX_ISSET_ID);
  }

  /** Returns true if field stop_loss_max is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_loss_max() {
    return EncodingUtils.testBit(__isset_bitfield, __STOP_LOSS_MAX_ISSET_ID);
  }

  public void setStop_loss_maxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOP_LOSS_MAX_ISSET_ID, value);
  }

  public double getCurrent_yield() {
    return this.current_yield;
  }

  public MasterStockInfo setCurrent_yield(double current_yield) {
    this.current_yield = current_yield;
    setCurrent_yieldIsSet(true);
    return this;
  }

  public void unsetCurrent_yield() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENT_YIELD_ISSET_ID);
  }

  /** Returns true if field current_yield is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_yield() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENT_YIELD_ISSET_ID);
  }

  public void setCurrent_yieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENT_YIELD_ISSET_ID, value);
  }

  public double getCurrent_price() {
    return this.current_price;
  }

  public MasterStockInfo setCurrent_price(double current_price) {
    this.current_price = current_price;
    setCurrent_priceIsSet(true);
    return this;
  }

  public void unsetCurrent_price() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENT_PRICE_ISSET_ID);
  }

  /** Returns true if field current_price is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_price() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENT_PRICE_ISSET_ID);
  }

  public void setCurrent_priceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENT_PRICE_ISSET_ID, value);
  }

  public double getCurrent_zdf() {
    return this.current_zdf;
  }

  public MasterStockInfo setCurrent_zdf(double current_zdf) {
    this.current_zdf = current_zdf;
    setCurrent_zdfIsSet(true);
    return this;
  }

  public void unsetCurrent_zdf() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENT_ZDF_ISSET_ID);
  }

  /** Returns true if field current_zdf is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_zdf() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENT_ZDF_ISSET_ID);
  }

  public void setCurrent_zdfIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENT_ZDF_ISSET_ID, value);
  }

  public String getStrategy() {
    return this.strategy;
  }

  public MasterStockInfo setStrategy(String strategy) {
    this.strategy = strategy;
    return this;
  }

  public void unsetStrategy() {
    this.strategy = null;
  }

  /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy() {
    return this.strategy != null;
  }

  public void setStrategyIsSet(boolean value) {
    if (!value) {
      this.strategy = null;
    }
  }

  public int getLevel() {
    return this.level;
  }

  public MasterStockInfo setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public String getOper_time() {
    return this.oper_time;
  }

  public MasterStockInfo setOper_time(String oper_time) {
    this.oper_time = oper_time;
    return this;
  }

  public void unsetOper_time() {
    this.oper_time = null;
  }

  /** Returns true if field oper_time is set (has been assigned a value) and false otherwise */
  public boolean isSetOper_time() {
    return this.oper_time != null;
  }

  public void setOper_timeIsSet(boolean value) {
    if (!value) {
      this.oper_time = null;
    }
  }

  public long getOper_timestamp() {
    return this.oper_timestamp;
  }

  public MasterStockInfo setOper_timestamp(long oper_timestamp) {
    this.oper_timestamp = oper_timestamp;
    setOper_timestampIsSet(true);
    return this;
  }

  public void unsetOper_timestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPER_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field oper_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetOper_timestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __OPER_TIMESTAMP_ISSET_ID);
  }

  public void setOper_timestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPER_TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STOCK_CODE:
      if (value == null) {
        unsetStock_code();
      } else {
        setStock_code((String)value);
      }
      break;

    case STOCK_PROPERTY:
      if (value == null) {
        unsetStock_property();
      } else {
        setStock_property((String)value);
      }
      break;

    case STOCK_NAME:
      if (value == null) {
        unsetStock_name();
      } else {
        setStock_name((String)value);
      }
      break;

    case RECOMMEND_REASON:
      if (value == null) {
        unsetRecommend_reason();
      } else {
        setRecommend_reason((String)value);
      }
      break;

    case BUY_PRICE:
      if (value == null) {
        unsetBuy_price();
      } else {
        setBuy_price((Double)value);
      }
      break;

    case ADVICE_BUY_MIN:
      if (value == null) {
        unsetAdvice_buy_min();
      } else {
        setAdvice_buy_min((Double)value);
      }
      break;

    case ADVICE_BUY_MAX:
      if (value == null) {
        unsetAdvice_buy_max();
      } else {
        setAdvice_buy_max((Double)value);
      }
      break;

    case STOP_PROFIT_MIN:
      if (value == null) {
        unsetStop_profit_min();
      } else {
        setStop_profit_min((Double)value);
      }
      break;

    case STOP_PROFIT_MAX:
      if (value == null) {
        unsetStop_profit_max();
      } else {
        setStop_profit_max((Double)value);
      }
      break;

    case STOP_LOSS_MIN:
      if (value == null) {
        unsetStop_loss_min();
      } else {
        setStop_loss_min((Double)value);
      }
      break;

    case STOP_LOSS_MAX:
      if (value == null) {
        unsetStop_loss_max();
      } else {
        setStop_loss_max((Double)value);
      }
      break;

    case CURRENT_YIELD:
      if (value == null) {
        unsetCurrent_yield();
      } else {
        setCurrent_yield((Double)value);
      }
      break;

    case CURRENT_PRICE:
      if (value == null) {
        unsetCurrent_price();
      } else {
        setCurrent_price((Double)value);
      }
      break;

    case CURRENT_ZDF:
      if (value == null) {
        unsetCurrent_zdf();
      } else {
        setCurrent_zdf((Double)value);
      }
      break;

    case STRATEGY:
      if (value == null) {
        unsetStrategy();
      } else {
        setStrategy((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case OPER_TIME:
      if (value == null) {
        unsetOper_time();
      } else {
        setOper_time((String)value);
      }
      break;

    case OPER_TIMESTAMP:
      if (value == null) {
        unsetOper_timestamp();
      } else {
        setOper_timestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STOCK_CODE:
      return getStock_code();

    case STOCK_PROPERTY:
      return getStock_property();

    case STOCK_NAME:
      return getStock_name();

    case RECOMMEND_REASON:
      return getRecommend_reason();

    case BUY_PRICE:
      return Double.valueOf(getBuy_price());

    case ADVICE_BUY_MIN:
      return Double.valueOf(getAdvice_buy_min());

    case ADVICE_BUY_MAX:
      return Double.valueOf(getAdvice_buy_max());

    case STOP_PROFIT_MIN:
      return Double.valueOf(getStop_profit_min());

    case STOP_PROFIT_MAX:
      return Double.valueOf(getStop_profit_max());

    case STOP_LOSS_MIN:
      return Double.valueOf(getStop_loss_min());

    case STOP_LOSS_MAX:
      return Double.valueOf(getStop_loss_max());

    case CURRENT_YIELD:
      return Double.valueOf(getCurrent_yield());

    case CURRENT_PRICE:
      return Double.valueOf(getCurrent_price());

    case CURRENT_ZDF:
      return Double.valueOf(getCurrent_zdf());

    case STRATEGY:
      return getStrategy();

    case LEVEL:
      return Integer.valueOf(getLevel());

    case OPER_TIME:
      return getOper_time();

    case OPER_TIMESTAMP:
      return Long.valueOf(getOper_timestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STOCK_CODE:
      return isSetStock_code();
    case STOCK_PROPERTY:
      return isSetStock_property();
    case STOCK_NAME:
      return isSetStock_name();
    case RECOMMEND_REASON:
      return isSetRecommend_reason();
    case BUY_PRICE:
      return isSetBuy_price();
    case ADVICE_BUY_MIN:
      return isSetAdvice_buy_min();
    case ADVICE_BUY_MAX:
      return isSetAdvice_buy_max();
    case STOP_PROFIT_MIN:
      return isSetStop_profit_min();
    case STOP_PROFIT_MAX:
      return isSetStop_profit_max();
    case STOP_LOSS_MIN:
      return isSetStop_loss_min();
    case STOP_LOSS_MAX:
      return isSetStop_loss_max();
    case CURRENT_YIELD:
      return isSetCurrent_yield();
    case CURRENT_PRICE:
      return isSetCurrent_price();
    case CURRENT_ZDF:
      return isSetCurrent_zdf();
    case STRATEGY:
      return isSetStrategy();
    case LEVEL:
      return isSetLevel();
    case OPER_TIME:
      return isSetOper_time();
    case OPER_TIMESTAMP:
      return isSetOper_timestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MasterStockInfo)
      return this.equals((MasterStockInfo)that);
    return false;
  }

  public boolean equals(MasterStockInfo that) {
    if (that == null)
      return false;

    boolean this_present_stock_code = true && this.isSetStock_code();
    boolean that_present_stock_code = true && that.isSetStock_code();
    if (this_present_stock_code || that_present_stock_code) {
      if (!(this_present_stock_code && that_present_stock_code))
        return false;
      if (!this.stock_code.equals(that.stock_code))
        return false;
    }

    boolean this_present_stock_property = true && this.isSetStock_property();
    boolean that_present_stock_property = true && that.isSetStock_property();
    if (this_present_stock_property || that_present_stock_property) {
      if (!(this_present_stock_property && that_present_stock_property))
        return false;
      if (!this.stock_property.equals(that.stock_property))
        return false;
    }

    boolean this_present_stock_name = true && this.isSetStock_name();
    boolean that_present_stock_name = true && that.isSetStock_name();
    if (this_present_stock_name || that_present_stock_name) {
      if (!(this_present_stock_name && that_present_stock_name))
        return false;
      if (!this.stock_name.equals(that.stock_name))
        return false;
    }

    boolean this_present_recommend_reason = true && this.isSetRecommend_reason();
    boolean that_present_recommend_reason = true && that.isSetRecommend_reason();
    if (this_present_recommend_reason || that_present_recommend_reason) {
      if (!(this_present_recommend_reason && that_present_recommend_reason))
        return false;
      if (!this.recommend_reason.equals(that.recommend_reason))
        return false;
    }

    boolean this_present_buy_price = true;
    boolean that_present_buy_price = true;
    if (this_present_buy_price || that_present_buy_price) {
      if (!(this_present_buy_price && that_present_buy_price))
        return false;
      if (this.buy_price != that.buy_price)
        return false;
    }

    boolean this_present_advice_buy_min = true;
    boolean that_present_advice_buy_min = true;
    if (this_present_advice_buy_min || that_present_advice_buy_min) {
      if (!(this_present_advice_buy_min && that_present_advice_buy_min))
        return false;
      if (this.advice_buy_min != that.advice_buy_min)
        return false;
    }

    boolean this_present_advice_buy_max = true;
    boolean that_present_advice_buy_max = true;
    if (this_present_advice_buy_max || that_present_advice_buy_max) {
      if (!(this_present_advice_buy_max && that_present_advice_buy_max))
        return false;
      if (this.advice_buy_max != that.advice_buy_max)
        return false;
    }

    boolean this_present_stop_profit_min = true;
    boolean that_present_stop_profit_min = true;
    if (this_present_stop_profit_min || that_present_stop_profit_min) {
      if (!(this_present_stop_profit_min && that_present_stop_profit_min))
        return false;
      if (this.stop_profit_min != that.stop_profit_min)
        return false;
    }

    boolean this_present_stop_profit_max = true;
    boolean that_present_stop_profit_max = true;
    if (this_present_stop_profit_max || that_present_stop_profit_max) {
      if (!(this_present_stop_profit_max && that_present_stop_profit_max))
        return false;
      if (this.stop_profit_max != that.stop_profit_max)
        return false;
    }

    boolean this_present_stop_loss_min = true;
    boolean that_present_stop_loss_min = true;
    if (this_present_stop_loss_min || that_present_stop_loss_min) {
      if (!(this_present_stop_loss_min && that_present_stop_loss_min))
        return false;
      if (this.stop_loss_min != that.stop_loss_min)
        return false;
    }

    boolean this_present_stop_loss_max = true;
    boolean that_present_stop_loss_max = true;
    if (this_present_stop_loss_max || that_present_stop_loss_max) {
      if (!(this_present_stop_loss_max && that_present_stop_loss_max))
        return false;
      if (this.stop_loss_max != that.stop_loss_max)
        return false;
    }

    boolean this_present_current_yield = true;
    boolean that_present_current_yield = true;
    if (this_present_current_yield || that_present_current_yield) {
      if (!(this_present_current_yield && that_present_current_yield))
        return false;
      if (this.current_yield != that.current_yield)
        return false;
    }

    boolean this_present_current_price = true;
    boolean that_present_current_price = true;
    if (this_present_current_price || that_present_current_price) {
      if (!(this_present_current_price && that_present_current_price))
        return false;
      if (this.current_price != that.current_price)
        return false;
    }

    boolean this_present_current_zdf = true;
    boolean that_present_current_zdf = true;
    if (this_present_current_zdf || that_present_current_zdf) {
      if (!(this_present_current_zdf && that_present_current_zdf))
        return false;
      if (this.current_zdf != that.current_zdf)
        return false;
    }

    boolean this_present_strategy = true && this.isSetStrategy();
    boolean that_present_strategy = true && that.isSetStrategy();
    if (this_present_strategy || that_present_strategy) {
      if (!(this_present_strategy && that_present_strategy))
        return false;
      if (!this.strategy.equals(that.strategy))
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_oper_time = true && this.isSetOper_time();
    boolean that_present_oper_time = true && that.isSetOper_time();
    if (this_present_oper_time || that_present_oper_time) {
      if (!(this_present_oper_time && that_present_oper_time))
        return false;
      if (!this.oper_time.equals(that.oper_time))
        return false;
    }

    boolean this_present_oper_timestamp = true;
    boolean that_present_oper_timestamp = true;
    if (this_present_oper_timestamp || that_present_oper_timestamp) {
      if (!(this_present_oper_timestamp && that_present_oper_timestamp))
        return false;
      if (this.oper_timestamp != that.oper_timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MasterStockInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MasterStockInfo typedOther = (MasterStockInfo)other;

    lastComparison = Boolean.valueOf(isSetStock_code()).compareTo(typedOther.isSetStock_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_code, typedOther.stock_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStock_property()).compareTo(typedOther.isSetStock_property());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_property()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_property, typedOther.stock_property);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStock_name()).compareTo(typedOther.isSetStock_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_name, typedOther.stock_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommend_reason()).compareTo(typedOther.isSetRecommend_reason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommend_reason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommend_reason, typedOther.recommend_reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuy_price()).compareTo(typedOther.isSetBuy_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuy_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buy_price, typedOther.buy_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvice_buy_min()).compareTo(typedOther.isSetAdvice_buy_min());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvice_buy_min()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advice_buy_min, typedOther.advice_buy_min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvice_buy_max()).compareTo(typedOther.isSetAdvice_buy_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvice_buy_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advice_buy_max, typedOther.advice_buy_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStop_profit_min()).compareTo(typedOther.isSetStop_profit_min());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_profit_min()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_profit_min, typedOther.stop_profit_min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStop_profit_max()).compareTo(typedOther.isSetStop_profit_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_profit_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_profit_max, typedOther.stop_profit_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStop_loss_min()).compareTo(typedOther.isSetStop_loss_min());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_loss_min()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_loss_min, typedOther.stop_loss_min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStop_loss_max()).compareTo(typedOther.isSetStop_loss_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_loss_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_loss_max, typedOther.stop_loss_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent_yield()).compareTo(typedOther.isSetCurrent_yield());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_yield()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_yield, typedOther.current_yield);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent_price()).compareTo(typedOther.isSetCurrent_price());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_price()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_price, typedOther.current_price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent_zdf()).compareTo(typedOther.isSetCurrent_zdf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_zdf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_zdf, typedOther.current_zdf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(typedOther.isSetStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, typedOther.strategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOper_time()).compareTo(typedOther.isSetOper_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOper_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oper_time, typedOther.oper_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOper_timestamp()).compareTo(typedOther.isSetOper_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOper_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oper_timestamp, typedOther.oper_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MasterStockInfo(");
    boolean first = true;

    sb.append("stock_code:");
    if (this.stock_code == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stock_property:");
    if (this.stock_property == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_property);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stock_name:");
    if (this.stock_name == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommend_reason:");
    if (this.recommend_reason == null) {
      sb.append("null");
    } else {
      sb.append(this.recommend_reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buy_price:");
    sb.append(this.buy_price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("advice_buy_min:");
    sb.append(this.advice_buy_min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("advice_buy_max:");
    sb.append(this.advice_buy_max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stop_profit_min:");
    sb.append(this.stop_profit_min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stop_profit_max:");
    sb.append(this.stop_profit_max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stop_loss_min:");
    sb.append(this.stop_loss_min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stop_loss_max:");
    sb.append(this.stop_loss_max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("current_yield:");
    sb.append(this.current_yield);
    first = false;
    if (!first) sb.append(", ");
    sb.append("current_price:");
    sb.append(this.current_price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("current_zdf:");
    sb.append(this.current_zdf);
    first = false;
    if (!first) sb.append(", ");
    sb.append("strategy:");
    if (this.strategy == null) {
      sb.append("null");
    } else {
      sb.append(this.strategy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oper_time:");
    if (this.oper_time == null) {
      sb.append("null");
    } else {
      sb.append(this.oper_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oper_timestamp:");
    sb.append(this.oper_timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MasterStockInfoStandardSchemeFactory implements SchemeFactory {
    public MasterStockInfoStandardScheme getScheme() {
      return new MasterStockInfoStandardScheme();
    }
  }

  private static class MasterStockInfoStandardScheme extends StandardScheme<MasterStockInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MasterStockInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STOCK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_code = iprot.readString();
              struct.setStock_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STOCK_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_property = iprot.readString();
              struct.setStock_propertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STOCK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_name = iprot.readString();
              struct.setStock_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECOMMEND_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recommend_reason = iprot.readString();
              struct.setRecommend_reasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.buy_price = iprot.readDouble();
              struct.setBuy_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ADVICE_BUY_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.advice_buy_min = iprot.readDouble();
              struct.setAdvice_buy_minIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADVICE_BUY_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.advice_buy_max = iprot.readDouble();
              struct.setAdvice_buy_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STOP_PROFIT_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stop_profit_min = iprot.readDouble();
              struct.setStop_profit_minIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STOP_PROFIT_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stop_profit_max = iprot.readDouble();
              struct.setStop_profit_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STOP_LOSS_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stop_loss_min = iprot.readDouble();
              struct.setStop_loss_minIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STOP_LOSS_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stop_loss_max = iprot.readDouble();
              struct.setStop_loss_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CURRENT_YIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.current_yield = iprot.readDouble();
              struct.setCurrent_yieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURRENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.current_price = iprot.readDouble();
              struct.setCurrent_priceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CURRENT_ZDF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.current_zdf = iprot.readDouble();
              struct.setCurrent_zdfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategy = iprot.readString();
              struct.setStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OPER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oper_time = iprot.readString();
              struct.setOper_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // OPER_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.oper_timestamp = iprot.readI64();
              struct.setOper_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MasterStockInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stock_code != null) {
        oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
        oprot.writeString(struct.stock_code);
        oprot.writeFieldEnd();
      }
      if (struct.stock_property != null) {
        oprot.writeFieldBegin(STOCK_PROPERTY_FIELD_DESC);
        oprot.writeString(struct.stock_property);
        oprot.writeFieldEnd();
      }
      if (struct.stock_name != null) {
        oprot.writeFieldBegin(STOCK_NAME_FIELD_DESC);
        oprot.writeString(struct.stock_name);
        oprot.writeFieldEnd();
      }
      if (struct.recommend_reason != null) {
        oprot.writeFieldBegin(RECOMMEND_REASON_FIELD_DESC);
        oprot.writeString(struct.recommend_reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUY_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.buy_price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADVICE_BUY_MIN_FIELD_DESC);
      oprot.writeDouble(struct.advice_buy_min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADVICE_BUY_MAX_FIELD_DESC);
      oprot.writeDouble(struct.advice_buy_max);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_PROFIT_MIN_FIELD_DESC);
      oprot.writeDouble(struct.stop_profit_min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_PROFIT_MAX_FIELD_DESC);
      oprot.writeDouble(struct.stop_profit_max);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_LOSS_MIN_FIELD_DESC);
      oprot.writeDouble(struct.stop_loss_min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_LOSS_MAX_FIELD_DESC);
      oprot.writeDouble(struct.stop_loss_max);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_YIELD_FIELD_DESC);
      oprot.writeDouble(struct.current_yield);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.current_price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_ZDF_FIELD_DESC);
      oprot.writeDouble(struct.current_zdf);
      oprot.writeFieldEnd();
      if (struct.strategy != null) {
        oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
        oprot.writeString(struct.strategy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      if (struct.oper_time != null) {
        oprot.writeFieldBegin(OPER_TIME_FIELD_DESC);
        oprot.writeString(struct.oper_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPER_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.oper_timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MasterStockInfoTupleSchemeFactory implements SchemeFactory {
    public MasterStockInfoTupleScheme getScheme() {
      return new MasterStockInfoTupleScheme();
    }
  }

  private static class MasterStockInfoTupleScheme extends TupleScheme<MasterStockInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MasterStockInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStock_code()) {
        optionals.set(0);
      }
      if (struct.isSetStock_property()) {
        optionals.set(1);
      }
      if (struct.isSetStock_name()) {
        optionals.set(2);
      }
      if (struct.isSetRecommend_reason()) {
        optionals.set(3);
      }
      if (struct.isSetBuy_price()) {
        optionals.set(4);
      }
      if (struct.isSetAdvice_buy_min()) {
        optionals.set(5);
      }
      if (struct.isSetAdvice_buy_max()) {
        optionals.set(6);
      }
      if (struct.isSetStop_profit_min()) {
        optionals.set(7);
      }
      if (struct.isSetStop_profit_max()) {
        optionals.set(8);
      }
      if (struct.isSetStop_loss_min()) {
        optionals.set(9);
      }
      if (struct.isSetStop_loss_max()) {
        optionals.set(10);
      }
      if (struct.isSetCurrent_yield()) {
        optionals.set(11);
      }
      if (struct.isSetCurrent_price()) {
        optionals.set(12);
      }
      if (struct.isSetCurrent_zdf()) {
        optionals.set(13);
      }
      if (struct.isSetStrategy()) {
        optionals.set(14);
      }
      if (struct.isSetLevel()) {
        optionals.set(15);
      }
      if (struct.isSetOper_time()) {
        optionals.set(16);
      }
      if (struct.isSetOper_timestamp()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetStock_code()) {
        oprot.writeString(struct.stock_code);
      }
      if (struct.isSetStock_property()) {
        oprot.writeString(struct.stock_property);
      }
      if (struct.isSetStock_name()) {
        oprot.writeString(struct.stock_name);
      }
      if (struct.isSetRecommend_reason()) {
        oprot.writeString(struct.recommend_reason);
      }
      if (struct.isSetBuy_price()) {
        oprot.writeDouble(struct.buy_price);
      }
      if (struct.isSetAdvice_buy_min()) {
        oprot.writeDouble(struct.advice_buy_min);
      }
      if (struct.isSetAdvice_buy_max()) {
        oprot.writeDouble(struct.advice_buy_max);
      }
      if (struct.isSetStop_profit_min()) {
        oprot.writeDouble(struct.stop_profit_min);
      }
      if (struct.isSetStop_profit_max()) {
        oprot.writeDouble(struct.stop_profit_max);
      }
      if (struct.isSetStop_loss_min()) {
        oprot.writeDouble(struct.stop_loss_min);
      }
      if (struct.isSetStop_loss_max()) {
        oprot.writeDouble(struct.stop_loss_max);
      }
      if (struct.isSetCurrent_yield()) {
        oprot.writeDouble(struct.current_yield);
      }
      if (struct.isSetCurrent_price()) {
        oprot.writeDouble(struct.current_price);
      }
      if (struct.isSetCurrent_zdf()) {
        oprot.writeDouble(struct.current_zdf);
      }
      if (struct.isSetStrategy()) {
        oprot.writeString(struct.strategy);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetOper_time()) {
        oprot.writeString(struct.oper_time);
      }
      if (struct.isSetOper_timestamp()) {
        oprot.writeI64(struct.oper_timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MasterStockInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.stock_code = iprot.readString();
        struct.setStock_codeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stock_property = iprot.readString();
        struct.setStock_propertyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stock_name = iprot.readString();
        struct.setStock_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recommend_reason = iprot.readString();
        struct.setRecommend_reasonIsSet(true);
      }
      if (incoming.get(4)) {
        struct.buy_price = iprot.readDouble();
        struct.setBuy_priceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.advice_buy_min = iprot.readDouble();
        struct.setAdvice_buy_minIsSet(true);
      }
      if (incoming.get(6)) {
        struct.advice_buy_max = iprot.readDouble();
        struct.setAdvice_buy_maxIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stop_profit_min = iprot.readDouble();
        struct.setStop_profit_minIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stop_profit_max = iprot.readDouble();
        struct.setStop_profit_maxIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stop_loss_min = iprot.readDouble();
        struct.setStop_loss_minIsSet(true);
      }
      if (incoming.get(10)) {
        struct.stop_loss_max = iprot.readDouble();
        struct.setStop_loss_maxIsSet(true);
      }
      if (incoming.get(11)) {
        struct.current_yield = iprot.readDouble();
        struct.setCurrent_yieldIsSet(true);
      }
      if (incoming.get(12)) {
        struct.current_price = iprot.readDouble();
        struct.setCurrent_priceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.current_zdf = iprot.readDouble();
        struct.setCurrent_zdfIsSet(true);
      }
      if (incoming.get(14)) {
        struct.strategy = iprot.readString();
        struct.setStrategyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(16)) {
        struct.oper_time = iprot.readString();
        struct.setOper_timeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.oper_timestamp = iprot.readI64();
        struct.setOper_timestampIsSet(true);
      }
    }
  }

}

