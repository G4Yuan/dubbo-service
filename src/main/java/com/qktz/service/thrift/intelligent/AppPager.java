/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qktz.service.thrift.intelligent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppPager implements org.apache.thrift.TBase<AppPager, AppPager._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppPager");

  private static final org.apache.thrift.protocol.TField PAGE_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNow", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECORD_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordSize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("records", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField HAS_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasNext", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_PREV_FIELD_DESC = new org.apache.thrift.protocol.TField("hasPrev", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppPagerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppPagerTupleSchemeFactory());
  }

  public int pageNow; // required
  public int pageSize; // required
  public int recordSize; // required
  public int pageNum; // required
  public List<String> records; // required
  public int hasNext; // required
  public int hasPrev; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE_NOW((short)1, "pageNow"),
    PAGE_SIZE((short)2, "pageSize"),
    RECORD_SIZE((short)3, "recordSize"),
    PAGE_NUM((short)4, "pageNum"),
    RECORDS((short)5, "records"),
    HAS_NEXT((short)6, "hasNext"),
    HAS_PREV((short)7, "hasPrev");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_NOW
          return PAGE_NOW;
        case 2: // PAGE_SIZE
          return PAGE_SIZE;
        case 3: // RECORD_SIZE
          return RECORD_SIZE;
        case 4: // PAGE_NUM
          return PAGE_NUM;
        case 5: // RECORDS
          return RECORDS;
        case 6: // HAS_NEXT
          return HAS_NEXT;
        case 7: // HAS_PREV
          return HAS_PREV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGENOW_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private static final int __RECORDSIZE_ISSET_ID = 2;
  private static final int __PAGENUM_ISSET_ID = 3;
  private static final int __HASNEXT_ISSET_ID = 4;
  private static final int __HASPREV_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_NOW, new org.apache.thrift.meta_data.FieldMetaData("pageNow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.RECORD_SIZE, new org.apache.thrift.meta_data.FieldMetaData("recordSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.RECORDS, new org.apache.thrift.meta_data.FieldMetaData("records", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HAS_NEXT, new org.apache.thrift.meta_data.FieldMetaData("hasNext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.HAS_PREV, new org.apache.thrift.meta_data.FieldMetaData("hasPrev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppPager.class, metaDataMap);
  }

  public AppPager() {
  }

  public AppPager(
    int pageNow,
    int pageSize,
    int recordSize,
    int pageNum,
    List<String> records,
    int hasNext,
    int hasPrev)
  {
    this();
    this.pageNow = pageNow;
    setPageNowIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.recordSize = recordSize;
    setRecordSizeIsSet(true);
    this.pageNum = pageNum;
    setPageNumIsSet(true);
    this.records = records;
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    this.hasPrev = hasPrev;
    setHasPrevIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppPager(AppPager other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pageNow = other.pageNow;
    this.pageSize = other.pageSize;
    this.recordSize = other.recordSize;
    this.pageNum = other.pageNum;
    if (other.isSetRecords()) {
      List<String> __this__records = new ArrayList<String>();
      for (String other_element : other.records) {
        __this__records.add(other_element);
      }
      this.records = __this__records;
    }
    this.hasNext = other.hasNext;
    this.hasPrev = other.hasPrev;
  }

  public AppPager deepCopy() {
    return new AppPager(this);
  }

  @Override
  public void clear() {
    setPageNowIsSet(false);
    this.pageNow = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setRecordSizeIsSet(false);
    this.recordSize = 0;
    setPageNumIsSet(false);
    this.pageNum = 0;
    this.records = null;
    setHasNextIsSet(false);
    this.hasNext = 0;
    setHasPrevIsSet(false);
    this.hasPrev = 0;
  }

  public int getPageNow() {
    return this.pageNow;
  }

  public AppPager setPageNow(int pageNow) {
    this.pageNow = pageNow;
    setPageNowIsSet(true);
    return this;
  }

  public void unsetPageNow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENOW_ISSET_ID);
  }

  /** Returns true if field pageNow is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNow() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENOW_ISSET_ID);
  }

  public void setPageNowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENOW_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public AppPager setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getRecordSize() {
    return this.recordSize;
  }

  public AppPager setRecordSize(int recordSize) {
    this.recordSize = recordSize;
    setRecordSizeIsSet(true);
    return this;
  }

  public void unsetRecordSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDSIZE_ISSET_ID);
  }

  /** Returns true if field recordSize is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordSize() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDSIZE_ISSET_ID);
  }

  public void setRecordSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDSIZE_ISSET_ID, value);
  }

  public int getPageNum() {
    return this.pageNum;
  }

  public AppPager setPageNum(int pageNum) {
    this.pageNum = pageNum;
    setPageNumIsSet(true);
    return this;
  }

  public void unsetPageNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
  }

  public void setPageNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
  }

  public int getRecordsSize() {
    return (this.records == null) ? 0 : this.records.size();
  }

  public java.util.Iterator<String> getRecordsIterator() {
    return (this.records == null) ? null : this.records.iterator();
  }

  public void addToRecords(String elem) {
    if (this.records == null) {
      this.records = new ArrayList<String>();
    }
    this.records.add(elem);
  }

  public List<String> getRecords() {
    return this.records;
  }

  public AppPager setRecords(List<String> records) {
    this.records = records;
    return this;
  }

  public void unsetRecords() {
    this.records = null;
  }

  /** Returns true if field records is set (has been assigned a value) and false otherwise */
  public boolean isSetRecords() {
    return this.records != null;
  }

  public void setRecordsIsSet(boolean value) {
    if (!value) {
      this.records = null;
    }
  }

  public int getHasNext() {
    return this.hasNext;
  }

  public AppPager setHasNext(int hasNext) {
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    return this;
  }

  public void unsetHasNext() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  /** Returns true if field hasNext is set (has been assigned a value) and false otherwise */
  public boolean isSetHasNext() {
    return EncodingUtils.testBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  public void setHasNextIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASNEXT_ISSET_ID, value);
  }

  public int getHasPrev() {
    return this.hasPrev;
  }

  public AppPager setHasPrev(int hasPrev) {
    this.hasPrev = hasPrev;
    setHasPrevIsSet(true);
    return this;
  }

  public void unsetHasPrev() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASPREV_ISSET_ID);
  }

  /** Returns true if field hasPrev is set (has been assigned a value) and false otherwise */
  public boolean isSetHasPrev() {
    return EncodingUtils.testBit(__isset_bitfield, __HASPREV_ISSET_ID);
  }

  public void setHasPrevIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASPREV_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_NOW:
      if (value == null) {
        unsetPageNow();
      } else {
        setPageNow((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case RECORD_SIZE:
      if (value == null) {
        unsetRecordSize();
      } else {
        setRecordSize((Integer)value);
      }
      break;

    case PAGE_NUM:
      if (value == null) {
        unsetPageNum();
      } else {
        setPageNum((Integer)value);
      }
      break;

    case RECORDS:
      if (value == null) {
        unsetRecords();
      } else {
        setRecords((List<String>)value);
      }
      break;

    case HAS_NEXT:
      if (value == null) {
        unsetHasNext();
      } else {
        setHasNext((Integer)value);
      }
      break;

    case HAS_PREV:
      if (value == null) {
        unsetHasPrev();
      } else {
        setHasPrev((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_NOW:
      return Integer.valueOf(getPageNow());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case RECORD_SIZE:
      return Integer.valueOf(getRecordSize());

    case PAGE_NUM:
      return Integer.valueOf(getPageNum());

    case RECORDS:
      return getRecords();

    case HAS_NEXT:
      return Integer.valueOf(getHasNext());

    case HAS_PREV:
      return Integer.valueOf(getHasPrev());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_NOW:
      return isSetPageNow();
    case PAGE_SIZE:
      return isSetPageSize();
    case RECORD_SIZE:
      return isSetRecordSize();
    case PAGE_NUM:
      return isSetPageNum();
    case RECORDS:
      return isSetRecords();
    case HAS_NEXT:
      return isSetHasNext();
    case HAS_PREV:
      return isSetHasPrev();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppPager)
      return this.equals((AppPager)that);
    return false;
  }

  public boolean equals(AppPager that) {
    if (that == null)
      return false;

    boolean this_present_pageNow = true;
    boolean that_present_pageNow = true;
    if (this_present_pageNow || that_present_pageNow) {
      if (!(this_present_pageNow && that_present_pageNow))
        return false;
      if (this.pageNow != that.pageNow)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_recordSize = true;
    boolean that_present_recordSize = true;
    if (this_present_recordSize || that_present_recordSize) {
      if (!(this_present_recordSize && that_present_recordSize))
        return false;
      if (this.recordSize != that.recordSize)
        return false;
    }

    boolean this_present_pageNum = true;
    boolean that_present_pageNum = true;
    if (this_present_pageNum || that_present_pageNum) {
      if (!(this_present_pageNum && that_present_pageNum))
        return false;
      if (this.pageNum != that.pageNum)
        return false;
    }

    boolean this_present_records = true && this.isSetRecords();
    boolean that_present_records = true && that.isSetRecords();
    if (this_present_records || that_present_records) {
      if (!(this_present_records && that_present_records))
        return false;
      if (!this.records.equals(that.records))
        return false;
    }

    boolean this_present_hasNext = true;
    boolean that_present_hasNext = true;
    if (this_present_hasNext || that_present_hasNext) {
      if (!(this_present_hasNext && that_present_hasNext))
        return false;
      if (this.hasNext != that.hasNext)
        return false;
    }

    boolean this_present_hasPrev = true;
    boolean that_present_hasPrev = true;
    if (this_present_hasPrev || that_present_hasPrev) {
      if (!(this_present_hasPrev && that_present_hasPrev))
        return false;
      if (this.hasPrev != that.hasPrev)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AppPager other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AppPager typedOther = (AppPager)other;

    lastComparison = Boolean.valueOf(isSetPageNow()).compareTo(typedOther.isSetPageNow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNow, typedOther.pageNow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordSize()).compareTo(typedOther.isSetRecordSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordSize, typedOther.recordSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(typedOther.isSetPageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, typedOther.pageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecords()).compareTo(typedOther.isSetRecords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.records, typedOther.records);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasNext()).compareTo(typedOther.isSetHasNext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasNext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasNext, typedOther.hasNext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasPrev()).compareTo(typedOther.isSetHasPrev());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasPrev()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasPrev, typedOther.hasPrev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppPager(");
    boolean first = true;

    sb.append("pageNow:");
    sb.append(this.pageNow);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordSize:");
    sb.append(this.recordSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageNum:");
    sb.append(this.pageNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("records:");
    if (this.records == null) {
      sb.append("null");
    } else {
      sb.append(this.records);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasNext:");
    sb.append(this.hasNext);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasPrev:");
    sb.append(this.hasPrev);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppPagerStandardSchemeFactory implements SchemeFactory {
    public AppPagerStandardScheme getScheme() {
      return new AppPagerStandardScheme();
    }
  }

  private static class AppPagerStandardScheme extends StandardScheme<AppPager> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppPager struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_NOW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNow = iprot.readI32();
              struct.setPageNowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECORD_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordSize = iprot.readI32();
              struct.setRecordSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNum = iprot.readI32();
              struct.setPageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.records = new ArrayList<String>(_list88.size);
                for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                {
                  String _elem90; // required
                  _elem90 = iprot.readString();
                  struct.records.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setRecordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HAS_NEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasNext = iprot.readI32();
              struct.setHasNextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAS_PREV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasPrev = iprot.readI32();
              struct.setHasPrevIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppPager struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_NOW_FIELD_DESC);
      oprot.writeI32(struct.pageNow);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_SIZE_FIELD_DESC);
      oprot.writeI32(struct.recordSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
      oprot.writeI32(struct.pageNum);
      oprot.writeFieldEnd();
      if (struct.records != null) {
        oprot.writeFieldBegin(RECORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.records.size()));
          for (String _iter91 : struct.records)
          {
            oprot.writeString(_iter91);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
      oprot.writeI32(struct.hasNext);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_PREV_FIELD_DESC);
      oprot.writeI32(struct.hasPrev);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppPagerTupleSchemeFactory implements SchemeFactory {
    public AppPagerTupleScheme getScheme() {
      return new AppPagerTupleScheme();
    }
  }

  private static class AppPagerTupleScheme extends TupleScheme<AppPager> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppPager struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPageNow()) {
        optionals.set(0);
      }
      if (struct.isSetPageSize()) {
        optionals.set(1);
      }
      if (struct.isSetRecordSize()) {
        optionals.set(2);
      }
      if (struct.isSetPageNum()) {
        optionals.set(3);
      }
      if (struct.isSetRecords()) {
        optionals.set(4);
      }
      if (struct.isSetHasNext()) {
        optionals.set(5);
      }
      if (struct.isSetHasPrev()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPageNow()) {
        oprot.writeI32(struct.pageNow);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetRecordSize()) {
        oprot.writeI32(struct.recordSize);
      }
      if (struct.isSetPageNum()) {
        oprot.writeI32(struct.pageNum);
      }
      if (struct.isSetRecords()) {
        {
          oprot.writeI32(struct.records.size());
          for (String _iter92 : struct.records)
          {
            oprot.writeString(_iter92);
          }
        }
      }
      if (struct.isSetHasNext()) {
        oprot.writeI32(struct.hasNext);
      }
      if (struct.isSetHasPrev()) {
        oprot.writeI32(struct.hasPrev);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppPager struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.pageNow = iprot.readI32();
        struct.setPageNowIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.recordSize = iprot.readI32();
        struct.setRecordSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageNum = iprot.readI32();
        struct.setPageNumIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.records = new ArrayList<String>(_list93.size);
          for (int _i94 = 0; _i94 < _list93.size; ++_i94)
          {
            String _elem95; // required
            _elem95 = iprot.readString();
            struct.records.add(_elem95);
          }
        }
        struct.setRecordsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hasNext = iprot.readI32();
        struct.setHasNextIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hasPrev = iprot.readI32();
        struct.setHasPrevIsSet(true);
      }
    }
  }

}

