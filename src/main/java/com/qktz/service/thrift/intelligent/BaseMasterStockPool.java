/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qktz.service.thrift.intelligent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BaseMasterStockPool implements org.apache.thrift.TBase<BaseMasterStockPool, BaseMasterStockPool._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseMasterStockPool");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LABELS_FIELD_DESC = new org.apache.thrift.protocol.TField("labels", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("stocks", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField OPERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("operations", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MODIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("modifier", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modify_time", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STRATEGY_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy_remark", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField HISTORY_STOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("history_stocks", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField STOCK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_name", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_code", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TOTAL_YIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("total_yield", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField OPER_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("oper_timestamp", org.apache.thrift.protocol.TType.I64, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BaseMasterStockPoolStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BaseMasterStockPoolTupleSchemeFactory());
  }

  public long id; // required
  public String name; // required
  public String summary; // required
  public List<String> labels; // required
  public int status; // required
  public List<MasterStockInfo> stocks; // required
  public List<OperationInfo> operations; // required
  public long creator; // required
  public String create_time; // required
  public long modifier; // required
  public String modify_time; // required
  public String strategy_remark; // required
  public List<MasterStockInfo> history_stocks; // required
  public String stock_name; // required
  public String stock_code; // required
  public double total_yield; // required
  public long count; // required
  public long oper_timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    SUMMARY((short)3, "summary"),
    LABELS((short)4, "labels"),
    STATUS((short)5, "status"),
    STOCKS((short)6, "stocks"),
    OPERATIONS((short)7, "operations"),
    CREATOR((short)8, "creator"),
    CREATE_TIME((short)9, "create_time"),
    MODIFIER((short)10, "modifier"),
    MODIFY_TIME((short)11, "modify_time"),
    STRATEGY_REMARK((short)12, "strategy_remark"),
    HISTORY_STOCKS((short)13, "history_stocks"),
    STOCK_NAME((short)14, "stock_name"),
    STOCK_CODE((short)15, "stock_code"),
    TOTAL_YIELD((short)16, "total_yield"),
    COUNT((short)17, "count"),
    OPER_TIMESTAMP((short)18, "oper_timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // SUMMARY
          return SUMMARY;
        case 4: // LABELS
          return LABELS;
        case 5: // STATUS
          return STATUS;
        case 6: // STOCKS
          return STOCKS;
        case 7: // OPERATIONS
          return OPERATIONS;
        case 8: // CREATOR
          return CREATOR;
        case 9: // CREATE_TIME
          return CREATE_TIME;
        case 10: // MODIFIER
          return MODIFIER;
        case 11: // MODIFY_TIME
          return MODIFY_TIME;
        case 12: // STRATEGY_REMARK
          return STRATEGY_REMARK;
        case 13: // HISTORY_STOCKS
          return HISTORY_STOCKS;
        case 14: // STOCK_NAME
          return STOCK_NAME;
        case 15: // STOCK_CODE
          return STOCK_CODE;
        case 16: // TOTAL_YIELD
          return TOTAL_YIELD;
        case 17: // COUNT
          return COUNT;
        case 18: // OPER_TIMESTAMP
          return OPER_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __CREATOR_ISSET_ID = 2;
  private static final int __MODIFIER_ISSET_ID = 3;
  private static final int __TOTAL_YIELD_ISSET_ID = 4;
  private static final int __COUNT_ISSET_ID = 5;
  private static final int __OPER_TIMESTAMP_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABELS, new org.apache.thrift.meta_data.FieldMetaData("labels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.STOCKS, new org.apache.thrift.meta_data.FieldMetaData("stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MasterStockInfo.class))));
    tmpMap.put(_Fields.OPERATIONS, new org.apache.thrift.meta_data.FieldMetaData("operations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OperationInfo.class))));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFIER, new org.apache.thrift.meta_data.FieldMetaData("modifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("modify_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRATEGY_REMARK, new org.apache.thrift.meta_data.FieldMetaData("strategy_remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HISTORY_STOCKS, new org.apache.thrift.meta_data.FieldMetaData("history_stocks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MasterStockInfo.class))));
    tmpMap.put(_Fields.STOCK_NAME, new org.apache.thrift.meta_data.FieldMetaData("stock_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stock_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_YIELD, new org.apache.thrift.meta_data.FieldMetaData("total_yield", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.OPER_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("oper_timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseMasterStockPool.class, metaDataMap);
  }

  public BaseMasterStockPool() {
  }

  public BaseMasterStockPool(
    long id,
    String name,
    String summary,
    List<String> labels,
    int status,
    List<MasterStockInfo> stocks,
    List<OperationInfo> operations,
    long creator,
    String create_time,
    long modifier,
    String modify_time,
    String strategy_remark,
    List<MasterStockInfo> history_stocks,
    String stock_name,
    String stock_code,
    double total_yield,
    long count,
    long oper_timestamp)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.summary = summary;
    this.labels = labels;
    this.status = status;
    setStatusIsSet(true);
    this.stocks = stocks;
    this.operations = operations;
    this.creator = creator;
    setCreatorIsSet(true);
    this.create_time = create_time;
    this.modifier = modifier;
    setModifierIsSet(true);
    this.modify_time = modify_time;
    this.strategy_remark = strategy_remark;
    this.history_stocks = history_stocks;
    this.stock_name = stock_name;
    this.stock_code = stock_code;
    this.total_yield = total_yield;
    setTotal_yieldIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.oper_timestamp = oper_timestamp;
    setOper_timestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseMasterStockPool(BaseMasterStockPool other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSummary()) {
      this.summary = other.summary;
    }
    if (other.isSetLabels()) {
      List<String> __this__labels = new ArrayList<String>();
      for (String other_element : other.labels) {
        __this__labels.add(other_element);
      }
      this.labels = __this__labels;
    }
    this.status = other.status;
    if (other.isSetStocks()) {
      List<MasterStockInfo> __this__stocks = new ArrayList<MasterStockInfo>();
      for (MasterStockInfo other_element : other.stocks) {
        __this__stocks.add(new MasterStockInfo(other_element));
      }
      this.stocks = __this__stocks;
    }
    if (other.isSetOperations()) {
      List<OperationInfo> __this__operations = new ArrayList<OperationInfo>();
      for (OperationInfo other_element : other.operations) {
        __this__operations.add(new OperationInfo(other_element));
      }
      this.operations = __this__operations;
    }
    this.creator = other.creator;
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    this.modifier = other.modifier;
    if (other.isSetModify_time()) {
      this.modify_time = other.modify_time;
    }
    if (other.isSetStrategy_remark()) {
      this.strategy_remark = other.strategy_remark;
    }
    if (other.isSetHistory_stocks()) {
      List<MasterStockInfo> __this__history_stocks = new ArrayList<MasterStockInfo>();
      for (MasterStockInfo other_element : other.history_stocks) {
        __this__history_stocks.add(new MasterStockInfo(other_element));
      }
      this.history_stocks = __this__history_stocks;
    }
    if (other.isSetStock_name()) {
      this.stock_name = other.stock_name;
    }
    if (other.isSetStock_code()) {
      this.stock_code = other.stock_code;
    }
    this.total_yield = other.total_yield;
    this.count = other.count;
    this.oper_timestamp = other.oper_timestamp;
  }

  public BaseMasterStockPool deepCopy() {
    return new BaseMasterStockPool(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.summary = null;
    this.labels = null;
    setStatusIsSet(false);
    this.status = 0;
    this.stocks = null;
    this.operations = null;
    setCreatorIsSet(false);
    this.creator = 0;
    this.create_time = null;
    setModifierIsSet(false);
    this.modifier = 0;
    this.modify_time = null;
    this.strategy_remark = null;
    this.history_stocks = null;
    this.stock_name = null;
    this.stock_code = null;
    setTotal_yieldIsSet(false);
    this.total_yield = 0.0;
    setCountIsSet(false);
    this.count = 0;
    setOper_timestampIsSet(false);
    this.oper_timestamp = 0;
  }

  public long getId() {
    return this.id;
  }

  public BaseMasterStockPool setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public BaseMasterStockPool setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSummary() {
    return this.summary;
  }

  public BaseMasterStockPool setSummary(String summary) {
    this.summary = summary;
    return this;
  }

  public void unsetSummary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary() {
    return this.summary != null;
  }

  public void setSummaryIsSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public int getLabelsSize() {
    return (this.labels == null) ? 0 : this.labels.size();
  }

  public java.util.Iterator<String> getLabelsIterator() {
    return (this.labels == null) ? null : this.labels.iterator();
  }

  public void addToLabels(String elem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(elem);
  }

  public List<String> getLabels() {
    return this.labels;
  }

  public BaseMasterStockPool setLabels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public void unsetLabels() {
    this.labels = null;
  }

  /** Returns true if field labels is set (has been assigned a value) and false otherwise */
  public boolean isSetLabels() {
    return this.labels != null;
  }

  public void setLabelsIsSet(boolean value) {
    if (!value) {
      this.labels = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BaseMasterStockPool setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getStocksSize() {
    return (this.stocks == null) ? 0 : this.stocks.size();
  }

  public java.util.Iterator<MasterStockInfo> getStocksIterator() {
    return (this.stocks == null) ? null : this.stocks.iterator();
  }

  public void addToStocks(MasterStockInfo elem) {
    if (this.stocks == null) {
      this.stocks = new ArrayList<MasterStockInfo>();
    }
    this.stocks.add(elem);
  }

  public List<MasterStockInfo> getStocks() {
    return this.stocks;
  }

  public BaseMasterStockPool setStocks(List<MasterStockInfo> stocks) {
    this.stocks = stocks;
    return this;
  }

  public void unsetStocks() {
    this.stocks = null;
  }

  /** Returns true if field stocks is set (has been assigned a value) and false otherwise */
  public boolean isSetStocks() {
    return this.stocks != null;
  }

  public void setStocksIsSet(boolean value) {
    if (!value) {
      this.stocks = null;
    }
  }

  public int getOperationsSize() {
    return (this.operations == null) ? 0 : this.operations.size();
  }

  public java.util.Iterator<OperationInfo> getOperationsIterator() {
    return (this.operations == null) ? null : this.operations.iterator();
  }

  public void addToOperations(OperationInfo elem) {
    if (this.operations == null) {
      this.operations = new ArrayList<OperationInfo>();
    }
    this.operations.add(elem);
  }

  public List<OperationInfo> getOperations() {
    return this.operations;
  }

  public BaseMasterStockPool setOperations(List<OperationInfo> operations) {
    this.operations = operations;
    return this;
  }

  public void unsetOperations() {
    this.operations = null;
  }

  /** Returns true if field operations is set (has been assigned a value) and false otherwise */
  public boolean isSetOperations() {
    return this.operations != null;
  }

  public void setOperationsIsSet(boolean value) {
    if (!value) {
      this.operations = null;
    }
  }

  public long getCreator() {
    return this.creator;
  }

  public BaseMasterStockPool setCreator(long creator) {
    this.creator = creator;
    setCreatorIsSet(true);
    return this;
  }

  public void unsetCreator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATOR_ISSET_ID, value);
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public BaseMasterStockPool setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public long getModifier() {
    return this.modifier;
  }

  public BaseMasterStockPool setModifier(long modifier) {
    this.modifier = modifier;
    setModifierIsSet(true);
    return this;
  }

  public void unsetModifier() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODIFIER_ISSET_ID);
  }

  /** Returns true if field modifier is set (has been assigned a value) and false otherwise */
  public boolean isSetModifier() {
    return EncodingUtils.testBit(__isset_bitfield, __MODIFIER_ISSET_ID);
  }

  public void setModifierIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODIFIER_ISSET_ID, value);
  }

  public String getModify_time() {
    return this.modify_time;
  }

  public BaseMasterStockPool setModify_time(String modify_time) {
    this.modify_time = modify_time;
    return this;
  }

  public void unsetModify_time() {
    this.modify_time = null;
  }

  /** Returns true if field modify_time is set (has been assigned a value) and false otherwise */
  public boolean isSetModify_time() {
    return this.modify_time != null;
  }

  public void setModify_timeIsSet(boolean value) {
    if (!value) {
      this.modify_time = null;
    }
  }

  public String getStrategy_remark() {
    return this.strategy_remark;
  }

  public BaseMasterStockPool setStrategy_remark(String strategy_remark) {
    this.strategy_remark = strategy_remark;
    return this;
  }

  public void unsetStrategy_remark() {
    this.strategy_remark = null;
  }

  /** Returns true if field strategy_remark is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy_remark() {
    return this.strategy_remark != null;
  }

  public void setStrategy_remarkIsSet(boolean value) {
    if (!value) {
      this.strategy_remark = null;
    }
  }

  public int getHistory_stocksSize() {
    return (this.history_stocks == null) ? 0 : this.history_stocks.size();
  }

  public java.util.Iterator<MasterStockInfo> getHistory_stocksIterator() {
    return (this.history_stocks == null) ? null : this.history_stocks.iterator();
  }

  public void addToHistory_stocks(MasterStockInfo elem) {
    if (this.history_stocks == null) {
      this.history_stocks = new ArrayList<MasterStockInfo>();
    }
    this.history_stocks.add(elem);
  }

  public List<MasterStockInfo> getHistory_stocks() {
    return this.history_stocks;
  }

  public BaseMasterStockPool setHistory_stocks(List<MasterStockInfo> history_stocks) {
    this.history_stocks = history_stocks;
    return this;
  }

  public void unsetHistory_stocks() {
    this.history_stocks = null;
  }

  /** Returns true if field history_stocks is set (has been assigned a value) and false otherwise */
  public boolean isSetHistory_stocks() {
    return this.history_stocks != null;
  }

  public void setHistory_stocksIsSet(boolean value) {
    if (!value) {
      this.history_stocks = null;
    }
  }

  public String getStock_name() {
    return this.stock_name;
  }

  public BaseMasterStockPool setStock_name(String stock_name) {
    this.stock_name = stock_name;
    return this;
  }

  public void unsetStock_name() {
    this.stock_name = null;
  }

  /** Returns true if field stock_name is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_name() {
    return this.stock_name != null;
  }

  public void setStock_nameIsSet(boolean value) {
    if (!value) {
      this.stock_name = null;
    }
  }

  public String getStock_code() {
    return this.stock_code;
  }

  public BaseMasterStockPool setStock_code(String stock_code) {
    this.stock_code = stock_code;
    return this;
  }

  public void unsetStock_code() {
    this.stock_code = null;
  }

  /** Returns true if field stock_code is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_code() {
    return this.stock_code != null;
  }

  public void setStock_codeIsSet(boolean value) {
    if (!value) {
      this.stock_code = null;
    }
  }

  public double getTotal_yield() {
    return this.total_yield;
  }

  public BaseMasterStockPool setTotal_yield(double total_yield) {
    this.total_yield = total_yield;
    setTotal_yieldIsSet(true);
    return this;
  }

  public void unsetTotal_yield() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_YIELD_ISSET_ID);
  }

  /** Returns true if field total_yield is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_yield() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_YIELD_ISSET_ID);
  }

  public void setTotal_yieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_YIELD_ISSET_ID, value);
  }

  public long getCount() {
    return this.count;
  }

  public BaseMasterStockPool setCount(long count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public long getOper_timestamp() {
    return this.oper_timestamp;
  }

  public BaseMasterStockPool setOper_timestamp(long oper_timestamp) {
    this.oper_timestamp = oper_timestamp;
    setOper_timestampIsSet(true);
    return this;
  }

  public void unsetOper_timestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPER_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field oper_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetOper_timestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __OPER_TIMESTAMP_ISSET_ID);
  }

  public void setOper_timestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPER_TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SUMMARY:
      if (value == null) {
        unsetSummary();
      } else {
        setSummary((String)value);
      }
      break;

    case LABELS:
      if (value == null) {
        unsetLabels();
      } else {
        setLabels((List<String>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case STOCKS:
      if (value == null) {
        unsetStocks();
      } else {
        setStocks((List<MasterStockInfo>)value);
      }
      break;

    case OPERATIONS:
      if (value == null) {
        unsetOperations();
      } else {
        setOperations((List<OperationInfo>)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case MODIFIER:
      if (value == null) {
        unsetModifier();
      } else {
        setModifier((Long)value);
      }
      break;

    case MODIFY_TIME:
      if (value == null) {
        unsetModify_time();
      } else {
        setModify_time((String)value);
      }
      break;

    case STRATEGY_REMARK:
      if (value == null) {
        unsetStrategy_remark();
      } else {
        setStrategy_remark((String)value);
      }
      break;

    case HISTORY_STOCKS:
      if (value == null) {
        unsetHistory_stocks();
      } else {
        setHistory_stocks((List<MasterStockInfo>)value);
      }
      break;

    case STOCK_NAME:
      if (value == null) {
        unsetStock_name();
      } else {
        setStock_name((String)value);
      }
      break;

    case STOCK_CODE:
      if (value == null) {
        unsetStock_code();
      } else {
        setStock_code((String)value);
      }
      break;

    case TOTAL_YIELD:
      if (value == null) {
        unsetTotal_yield();
      } else {
        setTotal_yield((Double)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Long)value);
      }
      break;

    case OPER_TIMESTAMP:
      if (value == null) {
        unsetOper_timestamp();
      } else {
        setOper_timestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case SUMMARY:
      return getSummary();

    case LABELS:
      return getLabels();

    case STATUS:
      return Integer.valueOf(getStatus());

    case STOCKS:
      return getStocks();

    case OPERATIONS:
      return getOperations();

    case CREATOR:
      return Long.valueOf(getCreator());

    case CREATE_TIME:
      return getCreate_time();

    case MODIFIER:
      return Long.valueOf(getModifier());

    case MODIFY_TIME:
      return getModify_time();

    case STRATEGY_REMARK:
      return getStrategy_remark();

    case HISTORY_STOCKS:
      return getHistory_stocks();

    case STOCK_NAME:
      return getStock_name();

    case STOCK_CODE:
      return getStock_code();

    case TOTAL_YIELD:
      return Double.valueOf(getTotal_yield());

    case COUNT:
      return Long.valueOf(getCount());

    case OPER_TIMESTAMP:
      return Long.valueOf(getOper_timestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case SUMMARY:
      return isSetSummary();
    case LABELS:
      return isSetLabels();
    case STATUS:
      return isSetStatus();
    case STOCKS:
      return isSetStocks();
    case OPERATIONS:
      return isSetOperations();
    case CREATOR:
      return isSetCreator();
    case CREATE_TIME:
      return isSetCreate_time();
    case MODIFIER:
      return isSetModifier();
    case MODIFY_TIME:
      return isSetModify_time();
    case STRATEGY_REMARK:
      return isSetStrategy_remark();
    case HISTORY_STOCKS:
      return isSetHistory_stocks();
    case STOCK_NAME:
      return isSetStock_name();
    case STOCK_CODE:
      return isSetStock_code();
    case TOTAL_YIELD:
      return isSetTotal_yield();
    case COUNT:
      return isSetCount();
    case OPER_TIMESTAMP:
      return isSetOper_timestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseMasterStockPool)
      return this.equals((BaseMasterStockPool)that);
    return false;
  }

  public boolean equals(BaseMasterStockPool that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_summary = true && this.isSetSummary();
    boolean that_present_summary = true && that.isSetSummary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    boolean this_present_labels = true && this.isSetLabels();
    boolean that_present_labels = true && that.isSetLabels();
    if (this_present_labels || that_present_labels) {
      if (!(this_present_labels && that_present_labels))
        return false;
      if (!this.labels.equals(that.labels))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_stocks = true && this.isSetStocks();
    boolean that_present_stocks = true && that.isSetStocks();
    if (this_present_stocks || that_present_stocks) {
      if (!(this_present_stocks && that_present_stocks))
        return false;
      if (!this.stocks.equals(that.stocks))
        return false;
    }

    boolean this_present_operations = true && this.isSetOperations();
    boolean that_present_operations = true && that.isSetOperations();
    if (this_present_operations || that_present_operations) {
      if (!(this_present_operations && that_present_operations))
        return false;
      if (!this.operations.equals(that.operations))
        return false;
    }

    boolean this_present_creator = true;
    boolean that_present_creator = true;
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_modifier = true;
    boolean that_present_modifier = true;
    if (this_present_modifier || that_present_modifier) {
      if (!(this_present_modifier && that_present_modifier))
        return false;
      if (this.modifier != that.modifier)
        return false;
    }

    boolean this_present_modify_time = true && this.isSetModify_time();
    boolean that_present_modify_time = true && that.isSetModify_time();
    if (this_present_modify_time || that_present_modify_time) {
      if (!(this_present_modify_time && that_present_modify_time))
        return false;
      if (!this.modify_time.equals(that.modify_time))
        return false;
    }

    boolean this_present_strategy_remark = true && this.isSetStrategy_remark();
    boolean that_present_strategy_remark = true && that.isSetStrategy_remark();
    if (this_present_strategy_remark || that_present_strategy_remark) {
      if (!(this_present_strategy_remark && that_present_strategy_remark))
        return false;
      if (!this.strategy_remark.equals(that.strategy_remark))
        return false;
    }

    boolean this_present_history_stocks = true && this.isSetHistory_stocks();
    boolean that_present_history_stocks = true && that.isSetHistory_stocks();
    if (this_present_history_stocks || that_present_history_stocks) {
      if (!(this_present_history_stocks && that_present_history_stocks))
        return false;
      if (!this.history_stocks.equals(that.history_stocks))
        return false;
    }

    boolean this_present_stock_name = true && this.isSetStock_name();
    boolean that_present_stock_name = true && that.isSetStock_name();
    if (this_present_stock_name || that_present_stock_name) {
      if (!(this_present_stock_name && that_present_stock_name))
        return false;
      if (!this.stock_name.equals(that.stock_name))
        return false;
    }

    boolean this_present_stock_code = true && this.isSetStock_code();
    boolean that_present_stock_code = true && that.isSetStock_code();
    if (this_present_stock_code || that_present_stock_code) {
      if (!(this_present_stock_code && that_present_stock_code))
        return false;
      if (!this.stock_code.equals(that.stock_code))
        return false;
    }

    boolean this_present_total_yield = true;
    boolean that_present_total_yield = true;
    if (this_present_total_yield || that_present_total_yield) {
      if (!(this_present_total_yield && that_present_total_yield))
        return false;
      if (this.total_yield != that.total_yield)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_oper_timestamp = true;
    boolean that_present_oper_timestamp = true;
    if (this_present_oper_timestamp || that_present_oper_timestamp) {
      if (!(this_present_oper_timestamp && that_present_oper_timestamp))
        return false;
      if (this.oper_timestamp != that.oper_timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BaseMasterStockPool other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BaseMasterStockPool typedOther = (BaseMasterStockPool)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummary()).compareTo(typedOther.isSetSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, typedOther.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabels()).compareTo(typedOther.isSetLabels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labels, typedOther.labels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStocks()).compareTo(typedOther.isSetStocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stocks, typedOther.stocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperations()).compareTo(typedOther.isSetOperations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operations, typedOther.operations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(typedOther.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, typedOther.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(typedOther.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, typedOther.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifier()).compareTo(typedOther.isSetModifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifier, typedOther.modifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModify_time()).compareTo(typedOther.isSetModify_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModify_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modify_time, typedOther.modify_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategy_remark()).compareTo(typedOther.isSetStrategy_remark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy_remark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy_remark, typedOther.strategy_remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHistory_stocks()).compareTo(typedOther.isSetHistory_stocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistory_stocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.history_stocks, typedOther.history_stocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStock_name()).compareTo(typedOther.isSetStock_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_name, typedOther.stock_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStock_code()).compareTo(typedOther.isSetStock_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_code, typedOther.stock_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_yield()).compareTo(typedOther.isSetTotal_yield());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_yield()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_yield, typedOther.total_yield);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOper_timestamp()).compareTo(typedOther.isSetOper_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOper_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oper_timestamp, typedOther.oper_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BaseMasterStockPool(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("summary:");
    if (this.summary == null) {
      sb.append("null");
    } else {
      sb.append(this.summary);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("labels:");
    if (this.labels == null) {
      sb.append("null");
    } else {
      sb.append(this.labels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stocks:");
    if (this.stocks == null) {
      sb.append("null");
    } else {
      sb.append(this.stocks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operations:");
    if (this.operations == null) {
      sb.append("null");
    } else {
      sb.append(this.operations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    sb.append(this.creator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("create_time:");
    if (this.create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.create_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifier:");
    sb.append(this.modifier);
    first = false;
    if (!first) sb.append(", ");
    sb.append("modify_time:");
    if (this.modify_time == null) {
      sb.append("null");
    } else {
      sb.append(this.modify_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strategy_remark:");
    if (this.strategy_remark == null) {
      sb.append("null");
    } else {
      sb.append(this.strategy_remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("history_stocks:");
    if (this.history_stocks == null) {
      sb.append("null");
    } else {
      sb.append(this.history_stocks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stock_name:");
    if (this.stock_name == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stock_code:");
    if (this.stock_code == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_yield:");
    sb.append(this.total_yield);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oper_timestamp:");
    sb.append(this.oper_timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseMasterStockPoolStandardSchemeFactory implements SchemeFactory {
    public BaseMasterStockPoolStandardScheme getScheme() {
      return new BaseMasterStockPoolStandardScheme();
    }
  }

  private static class BaseMasterStockPoolStandardScheme extends StandardScheme<BaseMasterStockPool> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseMasterStockPool struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary = iprot.readString();
              struct.setSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LABELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.labels = new ArrayList<String>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  String _elem34; // required
                  _elem34 = iprot.readString();
                  struct.labels.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setLabelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.stocks = new ArrayList<MasterStockInfo>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  MasterStockInfo _elem37; // required
                  _elem37 = new MasterStockInfo();
                  _elem37.read(iprot);
                  struct.stocks.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setStocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPERATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.operations = new ArrayList<OperationInfo>(_list38.size);
                for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                {
                  OperationInfo _elem40; // required
                  _elem40 = new OperationInfo();
                  _elem40.read(iprot);
                  struct.operations.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setOperationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creator = iprot.readI64();
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MODIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifier = iprot.readI64();
              struct.setModifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MODIFY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modify_time = iprot.readString();
              struct.setModify_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STRATEGY_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategy_remark = iprot.readString();
              struct.setStrategy_remarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HISTORY_STOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.history_stocks = new ArrayList<MasterStockInfo>(_list41.size);
                for (int _i42 = 0; _i42 < _list41.size; ++_i42)
                {
                  MasterStockInfo _elem43; // required
                  _elem43 = new MasterStockInfo();
                  _elem43.read(iprot);
                  struct.history_stocks.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setHistory_stocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STOCK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_name = iprot.readString();
              struct.setStock_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STOCK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_code = iprot.readString();
              struct.setStock_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TOTAL_YIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_yield = iprot.readDouble();
              struct.setTotal_yieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count = iprot.readI64();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OPER_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.oper_timestamp = iprot.readI64();
              struct.setOper_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseMasterStockPool struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.summary != null) {
        oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
        oprot.writeString(struct.summary);
        oprot.writeFieldEnd();
      }
      if (struct.labels != null) {
        oprot.writeFieldBegin(LABELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.labels.size()));
          for (String _iter44 : struct.labels)
          {
            oprot.writeString(_iter44);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.stocks != null) {
        oprot.writeFieldBegin(STOCKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stocks.size()));
          for (MasterStockInfo _iter45 : struct.stocks)
          {
            _iter45.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.operations != null) {
        oprot.writeFieldBegin(OPERATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.operations.size()));
          for (OperationInfo _iter46 : struct.operations)
          {
            _iter46.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATOR_FIELD_DESC);
      oprot.writeI64(struct.creator);
      oprot.writeFieldEnd();
      if (struct.create_time != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.create_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MODIFIER_FIELD_DESC);
      oprot.writeI64(struct.modifier);
      oprot.writeFieldEnd();
      if (struct.modify_time != null) {
        oprot.writeFieldBegin(MODIFY_TIME_FIELD_DESC);
        oprot.writeString(struct.modify_time);
        oprot.writeFieldEnd();
      }
      if (struct.strategy_remark != null) {
        oprot.writeFieldBegin(STRATEGY_REMARK_FIELD_DESC);
        oprot.writeString(struct.strategy_remark);
        oprot.writeFieldEnd();
      }
      if (struct.history_stocks != null) {
        oprot.writeFieldBegin(HISTORY_STOCKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.history_stocks.size()));
          for (MasterStockInfo _iter47 : struct.history_stocks)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stock_name != null) {
        oprot.writeFieldBegin(STOCK_NAME_FIELD_DESC);
        oprot.writeString(struct.stock_name);
        oprot.writeFieldEnd();
      }
      if (struct.stock_code != null) {
        oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
        oprot.writeString(struct.stock_code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_YIELD_FIELD_DESC);
      oprot.writeDouble(struct.total_yield);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI64(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPER_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.oper_timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseMasterStockPoolTupleSchemeFactory implements SchemeFactory {
    public BaseMasterStockPoolTupleScheme getScheme() {
      return new BaseMasterStockPoolTupleScheme();
    }
  }

  private static class BaseMasterStockPoolTupleScheme extends TupleScheme<BaseMasterStockPool> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BaseMasterStockPool struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSummary()) {
        optionals.set(2);
      }
      if (struct.isSetLabels()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetStocks()) {
        optionals.set(5);
      }
      if (struct.isSetOperations()) {
        optionals.set(6);
      }
      if (struct.isSetCreator()) {
        optionals.set(7);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(8);
      }
      if (struct.isSetModifier()) {
        optionals.set(9);
      }
      if (struct.isSetModify_time()) {
        optionals.set(10);
      }
      if (struct.isSetStrategy_remark()) {
        optionals.set(11);
      }
      if (struct.isSetHistory_stocks()) {
        optionals.set(12);
      }
      if (struct.isSetStock_name()) {
        optionals.set(13);
      }
      if (struct.isSetStock_code()) {
        optionals.set(14);
      }
      if (struct.isSetTotal_yield()) {
        optionals.set(15);
      }
      if (struct.isSetCount()) {
        optionals.set(16);
      }
      if (struct.isSetOper_timestamp()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSummary()) {
        oprot.writeString(struct.summary);
      }
      if (struct.isSetLabels()) {
        {
          oprot.writeI32(struct.labels.size());
          for (String _iter48 : struct.labels)
          {
            oprot.writeString(_iter48);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetStocks()) {
        {
          oprot.writeI32(struct.stocks.size());
          for (MasterStockInfo _iter49 : struct.stocks)
          {
            _iter49.write(oprot);
          }
        }
      }
      if (struct.isSetOperations()) {
        {
          oprot.writeI32(struct.operations.size());
          for (OperationInfo _iter50 : struct.operations)
          {
            _iter50.write(oprot);
          }
        }
      }
      if (struct.isSetCreator()) {
        oprot.writeI64(struct.creator);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetModifier()) {
        oprot.writeI64(struct.modifier);
      }
      if (struct.isSetModify_time()) {
        oprot.writeString(struct.modify_time);
      }
      if (struct.isSetStrategy_remark()) {
        oprot.writeString(struct.strategy_remark);
      }
      if (struct.isSetHistory_stocks()) {
        {
          oprot.writeI32(struct.history_stocks.size());
          for (MasterStockInfo _iter51 : struct.history_stocks)
          {
            _iter51.write(oprot);
          }
        }
      }
      if (struct.isSetStock_name()) {
        oprot.writeString(struct.stock_name);
      }
      if (struct.isSetStock_code()) {
        oprot.writeString(struct.stock_code);
      }
      if (struct.isSetTotal_yield()) {
        oprot.writeDouble(struct.total_yield);
      }
      if (struct.isSetCount()) {
        oprot.writeI64(struct.count);
      }
      if (struct.isSetOper_timestamp()) {
        oprot.writeI64(struct.oper_timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BaseMasterStockPool struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.summary = iprot.readString();
        struct.setSummaryIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.labels = new ArrayList<String>(_list52.size);
          for (int _i53 = 0; _i53 < _list52.size; ++_i53)
          {
            String _elem54; // required
            _elem54 = iprot.readString();
            struct.labels.add(_elem54);
          }
        }
        struct.setLabelsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.stocks = new ArrayList<MasterStockInfo>(_list55.size);
          for (int _i56 = 0; _i56 < _list55.size; ++_i56)
          {
            MasterStockInfo _elem57; // required
            _elem57 = new MasterStockInfo();
            _elem57.read(iprot);
            struct.stocks.add(_elem57);
          }
        }
        struct.setStocksIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.operations = new ArrayList<OperationInfo>(_list58.size);
          for (int _i59 = 0; _i59 < _list58.size; ++_i59)
          {
            OperationInfo _elem60; // required
            _elem60 = new OperationInfo();
            _elem60.read(iprot);
            struct.operations.add(_elem60);
          }
        }
        struct.setOperationsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.creator = iprot.readI64();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(8)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.modifier = iprot.readI64();
        struct.setModifierIsSet(true);
      }
      if (incoming.get(10)) {
        struct.modify_time = iprot.readString();
        struct.setModify_timeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.strategy_remark = iprot.readString();
        struct.setStrategy_remarkIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.history_stocks = new ArrayList<MasterStockInfo>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            MasterStockInfo _elem63; // required
            _elem63 = new MasterStockInfo();
            _elem63.read(iprot);
            struct.history_stocks.add(_elem63);
          }
        }
        struct.setHistory_stocksIsSet(true);
      }
      if (incoming.get(13)) {
        struct.stock_name = iprot.readString();
        struct.setStock_nameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.stock_code = iprot.readString();
        struct.setStock_codeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.total_yield = iprot.readDouble();
        struct.setTotal_yieldIsSet(true);
      }
      if (incoming.get(16)) {
        struct.count = iprot.readI64();
        struct.setCountIsSet(true);
      }
      if (incoming.get(17)) {
        struct.oper_timestamp = iprot.readI64();
        struct.setOper_timestampIsSet(true);
      }
    }
  }

}

