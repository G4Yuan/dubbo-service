/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qktz.service.thrift.intelligent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StockInfo implements org.apache.thrift.TBase<StockInfo, StockInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StockInfo");

  private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_code", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STOCK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECOMMEND_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("recommend_reason", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StockInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StockInfoTupleSchemeFactory());
  }

  public String stock_code; // required
  public String property; // required
  public String stock_name; // required
  public String recommend_reason; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STOCK_CODE((short)1, "stock_code"),
    PROPERTY((short)2, "property"),
    STOCK_NAME((short)3, "stock_name"),
    RECOMMEND_REASON((short)4, "recommend_reason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STOCK_CODE
          return STOCK_CODE;
        case 2: // PROPERTY
          return PROPERTY;
        case 3: // STOCK_NAME
          return STOCK_NAME;
        case 4: // RECOMMEND_REASON
          return RECOMMEND_REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stock_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCK_NAME, new org.apache.thrift.meta_data.FieldMetaData("stock_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECOMMEND_REASON, new org.apache.thrift.meta_data.FieldMetaData("recommend_reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StockInfo.class, metaDataMap);
  }

  public StockInfo() {
  }

  public StockInfo(
    String stock_code,
    String property,
    String stock_name,
    String recommend_reason)
  {
    this();
    this.stock_code = stock_code;
    this.property = property;
    this.stock_name = stock_name;
    this.recommend_reason = recommend_reason;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StockInfo(StockInfo other) {
    if (other.isSetStock_code()) {
      this.stock_code = other.stock_code;
    }
    if (other.isSetProperty()) {
      this.property = other.property;
    }
    if (other.isSetStock_name()) {
      this.stock_name = other.stock_name;
    }
    if (other.isSetRecommend_reason()) {
      this.recommend_reason = other.recommend_reason;
    }
  }

  public StockInfo deepCopy() {
    return new StockInfo(this);
  }

  @Override
  public void clear() {
    this.stock_code = null;
    this.property = null;
    this.stock_name = null;
    this.recommend_reason = null;
  }

  public String getStock_code() {
    return this.stock_code;
  }

  public StockInfo setStock_code(String stock_code) {
    this.stock_code = stock_code;
    return this;
  }

  public void unsetStock_code() {
    this.stock_code = null;
  }

  /** Returns true if field stock_code is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_code() {
    return this.stock_code != null;
  }

  public void setStock_codeIsSet(boolean value) {
    if (!value) {
      this.stock_code = null;
    }
  }

  public String getProperty() {
    return this.property;
  }

  public StockInfo setProperty(String property) {
    this.property = property;
    return this;
  }

  public void unsetProperty() {
    this.property = null;
  }

  /** Returns true if field property is set (has been assigned a value) and false otherwise */
  public boolean isSetProperty() {
    return this.property != null;
  }

  public void setPropertyIsSet(boolean value) {
    if (!value) {
      this.property = null;
    }
  }

  public String getStock_name() {
    return this.stock_name;
  }

  public StockInfo setStock_name(String stock_name) {
    this.stock_name = stock_name;
    return this;
  }

  public void unsetStock_name() {
    this.stock_name = null;
  }

  /** Returns true if field stock_name is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_name() {
    return this.stock_name != null;
  }

  public void setStock_nameIsSet(boolean value) {
    if (!value) {
      this.stock_name = null;
    }
  }

  public String getRecommend_reason() {
    return this.recommend_reason;
  }

  public StockInfo setRecommend_reason(String recommend_reason) {
    this.recommend_reason = recommend_reason;
    return this;
  }

  public void unsetRecommend_reason() {
    this.recommend_reason = null;
  }

  /** Returns true if field recommend_reason is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommend_reason() {
    return this.recommend_reason != null;
  }

  public void setRecommend_reasonIsSet(boolean value) {
    if (!value) {
      this.recommend_reason = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STOCK_CODE:
      if (value == null) {
        unsetStock_code();
      } else {
        setStock_code((String)value);
      }
      break;

    case PROPERTY:
      if (value == null) {
        unsetProperty();
      } else {
        setProperty((String)value);
      }
      break;

    case STOCK_NAME:
      if (value == null) {
        unsetStock_name();
      } else {
        setStock_name((String)value);
      }
      break;

    case RECOMMEND_REASON:
      if (value == null) {
        unsetRecommend_reason();
      } else {
        setRecommend_reason((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STOCK_CODE:
      return getStock_code();

    case PROPERTY:
      return getProperty();

    case STOCK_NAME:
      return getStock_name();

    case RECOMMEND_REASON:
      return getRecommend_reason();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STOCK_CODE:
      return isSetStock_code();
    case PROPERTY:
      return isSetProperty();
    case STOCK_NAME:
      return isSetStock_name();
    case RECOMMEND_REASON:
      return isSetRecommend_reason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StockInfo)
      return this.equals((StockInfo)that);
    return false;
  }

  public boolean equals(StockInfo that) {
    if (that == null)
      return false;

    boolean this_present_stock_code = true && this.isSetStock_code();
    boolean that_present_stock_code = true && that.isSetStock_code();
    if (this_present_stock_code || that_present_stock_code) {
      if (!(this_present_stock_code && that_present_stock_code))
        return false;
      if (!this.stock_code.equals(that.stock_code))
        return false;
    }

    boolean this_present_property = true && this.isSetProperty();
    boolean that_present_property = true && that.isSetProperty();
    if (this_present_property || that_present_property) {
      if (!(this_present_property && that_present_property))
        return false;
      if (!this.property.equals(that.property))
        return false;
    }

    boolean this_present_stock_name = true && this.isSetStock_name();
    boolean that_present_stock_name = true && that.isSetStock_name();
    if (this_present_stock_name || that_present_stock_name) {
      if (!(this_present_stock_name && that_present_stock_name))
        return false;
      if (!this.stock_name.equals(that.stock_name))
        return false;
    }

    boolean this_present_recommend_reason = true && this.isSetRecommend_reason();
    boolean that_present_recommend_reason = true && that.isSetRecommend_reason();
    if (this_present_recommend_reason || that_present_recommend_reason) {
      if (!(this_present_recommend_reason && that_present_recommend_reason))
        return false;
      if (!this.recommend_reason.equals(that.recommend_reason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StockInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StockInfo typedOther = (StockInfo)other;

    lastComparison = Boolean.valueOf(isSetStock_code()).compareTo(typedOther.isSetStock_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_code, typedOther.stock_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperty()).compareTo(typedOther.isSetProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, typedOther.property);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStock_name()).compareTo(typedOther.isSetStock_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_name, typedOther.stock_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommend_reason()).compareTo(typedOther.isSetRecommend_reason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommend_reason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommend_reason, typedOther.recommend_reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StockInfo(");
    boolean first = true;

    sb.append("stock_code:");
    if (this.stock_code == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("property:");
    if (this.property == null) {
      sb.append("null");
    } else {
      sb.append(this.property);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stock_name:");
    if (this.stock_name == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommend_reason:");
    if (this.recommend_reason == null) {
      sb.append("null");
    } else {
      sb.append(this.recommend_reason);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StockInfoStandardSchemeFactory implements SchemeFactory {
    public StockInfoStandardScheme getScheme() {
      return new StockInfoStandardScheme();
    }
  }

  private static class StockInfoStandardScheme extends StandardScheme<StockInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StockInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STOCK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_code = iprot.readString();
              struct.setStock_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.property = iprot.readString();
              struct.setPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STOCK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_name = iprot.readString();
              struct.setStock_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECOMMEND_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recommend_reason = iprot.readString();
              struct.setRecommend_reasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StockInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stock_code != null) {
        oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
        oprot.writeString(struct.stock_code);
        oprot.writeFieldEnd();
      }
      if (struct.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        oprot.writeString(struct.property);
        oprot.writeFieldEnd();
      }
      if (struct.stock_name != null) {
        oprot.writeFieldBegin(STOCK_NAME_FIELD_DESC);
        oprot.writeString(struct.stock_name);
        oprot.writeFieldEnd();
      }
      if (struct.recommend_reason != null) {
        oprot.writeFieldBegin(RECOMMEND_REASON_FIELD_DESC);
        oprot.writeString(struct.recommend_reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StockInfoTupleSchemeFactory implements SchemeFactory {
    public StockInfoTupleScheme getScheme() {
      return new StockInfoTupleScheme();
    }
  }

  private static class StockInfoTupleScheme extends TupleScheme<StockInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StockInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStock_code()) {
        optionals.set(0);
      }
      if (struct.isSetProperty()) {
        optionals.set(1);
      }
      if (struct.isSetStock_name()) {
        optionals.set(2);
      }
      if (struct.isSetRecommend_reason()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStock_code()) {
        oprot.writeString(struct.stock_code);
      }
      if (struct.isSetProperty()) {
        oprot.writeString(struct.property);
      }
      if (struct.isSetStock_name()) {
        oprot.writeString(struct.stock_name);
      }
      if (struct.isSetRecommend_reason()) {
        oprot.writeString(struct.recommend_reason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StockInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.stock_code = iprot.readString();
        struct.setStock_codeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.property = iprot.readString();
        struct.setPropertyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stock_name = iprot.readString();
        struct.setStock_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recommend_reason = iprot.readString();
        struct.setRecommend_reasonIsSet(true);
      }
    }
  }

}

