/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qktz.service.thrift.intelligent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserInfo implements org.apache.thrift.TBase<UserInfo, UserInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserInfo");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UPDATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedAt", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MOBILE_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("mobilePhoneNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BIND_MOBILE_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("bindMobilePhoneNumber", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AUTH_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("authData", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField HEAD_IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("headImageUrl", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserInfoTupleSchemeFactory());
  }

  public String uid; // required
  public String password; // required
  public String username; // required
  public String createdAt; // required
  public String updatedAt; // required
  public String mobilePhoneNumber; // required
  public String nickname; // required
  public String cid; // required
  public String desc; // required
  public String bindMobilePhoneNumber; // required
  public String authData; // required
  public String headImageUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    PASSWORD((short)2, "password"),
    USERNAME((short)3, "username"),
    CREATED_AT((short)4, "createdAt"),
    UPDATED_AT((short)5, "updatedAt"),
    MOBILE_PHONE_NUMBER((short)6, "mobilePhoneNumber"),
    NICKNAME((short)7, "nickname"),
    CID((short)8, "cid"),
    DESC((short)9, "desc"),
    BIND_MOBILE_PHONE_NUMBER((short)10, "bindMobilePhoneNumber"),
    AUTH_DATA((short)11, "authData"),
    HEAD_IMAGE_URL((short)12, "headImageUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // PASSWORD
          return PASSWORD;
        case 3: // USERNAME
          return USERNAME;
        case 4: // CREATED_AT
          return CREATED_AT;
        case 5: // UPDATED_AT
          return UPDATED_AT;
        case 6: // MOBILE_PHONE_NUMBER
          return MOBILE_PHONE_NUMBER;
        case 7: // NICKNAME
          return NICKNAME;
        case 8: // CID
          return CID;
        case 9: // DESC
          return DESC;
        case 10: // BIND_MOBILE_PHONE_NUMBER
          return BIND_MOBILE_PHONE_NUMBER;
        case 11: // AUTH_DATA
          return AUTH_DATA;
        case 12: // HEAD_IMAGE_URL
          return HEAD_IMAGE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATED_AT, new org.apache.thrift.meta_data.FieldMetaData("updatedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("mobilePhoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIND_MOBILE_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("bindMobilePhoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_DATA, new org.apache.thrift.meta_data.FieldMetaData("authData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEAD_IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("headImageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserInfo.class, metaDataMap);
  }

  public UserInfo() {
  }

  public UserInfo(
    String uid,
    String password,
    String username,
    String createdAt,
    String updatedAt,
    String mobilePhoneNumber,
    String nickname,
    String cid,
    String desc,
    String bindMobilePhoneNumber,
    String authData,
    String headImageUrl)
  {
    this();
    this.uid = uid;
    this.password = password;
    this.username = username;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.mobilePhoneNumber = mobilePhoneNumber;
    this.nickname = nickname;
    this.cid = cid;
    this.desc = desc;
    this.bindMobilePhoneNumber = bindMobilePhoneNumber;
    this.authData = authData;
    this.headImageUrl = headImageUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserInfo(UserInfo other) {
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    if (other.isSetUpdatedAt()) {
      this.updatedAt = other.updatedAt;
    }
    if (other.isSetMobilePhoneNumber()) {
      this.mobilePhoneNumber = other.mobilePhoneNumber;
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetCid()) {
      this.cid = other.cid;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetBindMobilePhoneNumber()) {
      this.bindMobilePhoneNumber = other.bindMobilePhoneNumber;
    }
    if (other.isSetAuthData()) {
      this.authData = other.authData;
    }
    if (other.isSetHeadImageUrl()) {
      this.headImageUrl = other.headImageUrl;
    }
  }

  public UserInfo deepCopy() {
    return new UserInfo(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.password = null;
    this.username = null;
    this.createdAt = null;
    this.updatedAt = null;
    this.mobilePhoneNumber = null;
    this.nickname = null;
    this.cid = null;
    this.desc = null;
    this.bindMobilePhoneNumber = null;
    this.authData = null;
    this.headImageUrl = null;
  }

  public String getUid() {
    return this.uid;
  }

  public UserInfo setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public UserInfo setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public UserInfo setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getCreatedAt() {
    return this.createdAt;
  }

  public UserInfo setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public String getUpdatedAt() {
    return this.updatedAt;
  }

  public UserInfo setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  public void unsetUpdatedAt() {
    this.updatedAt = null;
  }

  /** Returns true if field updatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAt() {
    return this.updatedAt != null;
  }

  public void setUpdatedAtIsSet(boolean value) {
    if (!value) {
      this.updatedAt = null;
    }
  }

  public String getMobilePhoneNumber() {
    return this.mobilePhoneNumber;
  }

  public UserInfo setMobilePhoneNumber(String mobilePhoneNumber) {
    this.mobilePhoneNumber = mobilePhoneNumber;
    return this;
  }

  public void unsetMobilePhoneNumber() {
    this.mobilePhoneNumber = null;
  }

  /** Returns true if field mobilePhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetMobilePhoneNumber() {
    return this.mobilePhoneNumber != null;
  }

  public void setMobilePhoneNumberIsSet(boolean value) {
    if (!value) {
      this.mobilePhoneNumber = null;
    }
  }

  public String getNickname() {
    return this.nickname;
  }

  public UserInfo setNickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public String getCid() {
    return this.cid;
  }

  public UserInfo setCid(String cid) {
    this.cid = cid;
    return this;
  }

  public void unsetCid() {
    this.cid = null;
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return this.cid != null;
  }

  public void setCidIsSet(boolean value) {
    if (!value) {
      this.cid = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public UserInfo setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getBindMobilePhoneNumber() {
    return this.bindMobilePhoneNumber;
  }

  public UserInfo setBindMobilePhoneNumber(String bindMobilePhoneNumber) {
    this.bindMobilePhoneNumber = bindMobilePhoneNumber;
    return this;
  }

  public void unsetBindMobilePhoneNumber() {
    this.bindMobilePhoneNumber = null;
  }

  /** Returns true if field bindMobilePhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetBindMobilePhoneNumber() {
    return this.bindMobilePhoneNumber != null;
  }

  public void setBindMobilePhoneNumberIsSet(boolean value) {
    if (!value) {
      this.bindMobilePhoneNumber = null;
    }
  }

  public String getAuthData() {
    return this.authData;
  }

  public UserInfo setAuthData(String authData) {
    this.authData = authData;
    return this;
  }

  public void unsetAuthData() {
    this.authData = null;
  }

  /** Returns true if field authData is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthData() {
    return this.authData != null;
  }

  public void setAuthDataIsSet(boolean value) {
    if (!value) {
      this.authData = null;
    }
  }

  public String getHeadImageUrl() {
    return this.headImageUrl;
  }

  public UserInfo setHeadImageUrl(String headImageUrl) {
    this.headImageUrl = headImageUrl;
    return this;
  }

  public void unsetHeadImageUrl() {
    this.headImageUrl = null;
  }

  /** Returns true if field headImageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetHeadImageUrl() {
    return this.headImageUrl != null;
  }

  public void setHeadImageUrlIsSet(boolean value) {
    if (!value) {
      this.headImageUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((String)value);
      }
      break;

    case UPDATED_AT:
      if (value == null) {
        unsetUpdatedAt();
      } else {
        setUpdatedAt((String)value);
      }
      break;

    case MOBILE_PHONE_NUMBER:
      if (value == null) {
        unsetMobilePhoneNumber();
      } else {
        setMobilePhoneNumber((String)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((String)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case BIND_MOBILE_PHONE_NUMBER:
      if (value == null) {
        unsetBindMobilePhoneNumber();
      } else {
        setBindMobilePhoneNumber((String)value);
      }
      break;

    case AUTH_DATA:
      if (value == null) {
        unsetAuthData();
      } else {
        setAuthData((String)value);
      }
      break;

    case HEAD_IMAGE_URL:
      if (value == null) {
        unsetHeadImageUrl();
      } else {
        setHeadImageUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case PASSWORD:
      return getPassword();

    case USERNAME:
      return getUsername();

    case CREATED_AT:
      return getCreatedAt();

    case UPDATED_AT:
      return getUpdatedAt();

    case MOBILE_PHONE_NUMBER:
      return getMobilePhoneNumber();

    case NICKNAME:
      return getNickname();

    case CID:
      return getCid();

    case DESC:
      return getDesc();

    case BIND_MOBILE_PHONE_NUMBER:
      return getBindMobilePhoneNumber();

    case AUTH_DATA:
      return getAuthData();

    case HEAD_IMAGE_URL:
      return getHeadImageUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case PASSWORD:
      return isSetPassword();
    case USERNAME:
      return isSetUsername();
    case CREATED_AT:
      return isSetCreatedAt();
    case UPDATED_AT:
      return isSetUpdatedAt();
    case MOBILE_PHONE_NUMBER:
      return isSetMobilePhoneNumber();
    case NICKNAME:
      return isSetNickname();
    case CID:
      return isSetCid();
    case DESC:
      return isSetDesc();
    case BIND_MOBILE_PHONE_NUMBER:
      return isSetBindMobilePhoneNumber();
    case AUTH_DATA:
      return isSetAuthData();
    case HEAD_IMAGE_URL:
      return isSetHeadImageUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserInfo)
      return this.equals((UserInfo)that);
    return false;
  }

  public boolean equals(UserInfo that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_updatedAt = true && this.isSetUpdatedAt();
    boolean that_present_updatedAt = true && that.isSetUpdatedAt();
    if (this_present_updatedAt || that_present_updatedAt) {
      if (!(this_present_updatedAt && that_present_updatedAt))
        return false;
      if (!this.updatedAt.equals(that.updatedAt))
        return false;
    }

    boolean this_present_mobilePhoneNumber = true && this.isSetMobilePhoneNumber();
    boolean that_present_mobilePhoneNumber = true && that.isSetMobilePhoneNumber();
    if (this_present_mobilePhoneNumber || that_present_mobilePhoneNumber) {
      if (!(this_present_mobilePhoneNumber && that_present_mobilePhoneNumber))
        return false;
      if (!this.mobilePhoneNumber.equals(that.mobilePhoneNumber))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (!this.cid.equals(that.cid))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_bindMobilePhoneNumber = true && this.isSetBindMobilePhoneNumber();
    boolean that_present_bindMobilePhoneNumber = true && that.isSetBindMobilePhoneNumber();
    if (this_present_bindMobilePhoneNumber || that_present_bindMobilePhoneNumber) {
      if (!(this_present_bindMobilePhoneNumber && that_present_bindMobilePhoneNumber))
        return false;
      if (!this.bindMobilePhoneNumber.equals(that.bindMobilePhoneNumber))
        return false;
    }

    boolean this_present_authData = true && this.isSetAuthData();
    boolean that_present_authData = true && that.isSetAuthData();
    if (this_present_authData || that_present_authData) {
      if (!(this_present_authData && that_present_authData))
        return false;
      if (!this.authData.equals(that.authData))
        return false;
    }

    boolean this_present_headImageUrl = true && this.isSetHeadImageUrl();
    boolean that_present_headImageUrl = true && that.isSetHeadImageUrl();
    if (this_present_headImageUrl || that_present_headImageUrl) {
      if (!(this_present_headImageUrl && that_present_headImageUrl))
        return false;
      if (!this.headImageUrl.equals(that.headImageUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserInfo typedOther = (UserInfo)other;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(typedOther.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, typedOther.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdatedAt()).compareTo(typedOther.isSetUpdatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedAt, typedOther.updatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobilePhoneNumber()).compareTo(typedOther.isSetMobilePhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobilePhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobilePhoneNumber, typedOther.mobilePhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickname()).compareTo(typedOther.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, typedOther.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(typedOther.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, typedOther.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBindMobilePhoneNumber()).compareTo(typedOther.isSetBindMobilePhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBindMobilePhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindMobilePhoneNumber, typedOther.bindMobilePhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthData()).compareTo(typedOther.isSetAuthData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authData, typedOther.authData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeadImageUrl()).compareTo(typedOther.isSetHeadImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeadImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headImageUrl, typedOther.headImageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserInfo(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updatedAt:");
    if (this.updatedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.updatedAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobilePhoneNumber:");
    if (this.mobilePhoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.mobilePhoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickname:");
    if (this.nickname == null) {
      sb.append("null");
    } else {
      sb.append(this.nickname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cid:");
    if (this.cid == null) {
      sb.append("null");
    } else {
      sb.append(this.cid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bindMobilePhoneNumber:");
    if (this.bindMobilePhoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.bindMobilePhoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authData:");
    if (this.authData == null) {
      sb.append("null");
    } else {
      sb.append(this.authData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headImageUrl:");
    if (this.headImageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.headImageUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserInfoStandardSchemeFactory implements SchemeFactory {
    public UserInfoStandardScheme getScheme() {
      return new UserInfoStandardScheme();
    }
  }

  private static class UserInfoStandardScheme extends StandardScheme<UserInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPDATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updatedAt = iprot.readString();
              struct.setUpdatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MOBILE_PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobilePhoneNumber = iprot.readString();
              struct.setMobilePhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cid = iprot.readString();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BIND_MOBILE_PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bindMobilePhoneNumber = iprot.readString();
              struct.setBindMobilePhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AUTH_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authData = iprot.readString();
              struct.setAuthDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HEAD_IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headImageUrl = iprot.readString();
              struct.setHeadImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      if (struct.updatedAt != null) {
        oprot.writeFieldBegin(UPDATED_AT_FIELD_DESC);
        oprot.writeString(struct.updatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.mobilePhoneNumber != null) {
        oprot.writeFieldBegin(MOBILE_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.mobilePhoneNumber);
        oprot.writeFieldEnd();
      }
      if (struct.nickname != null) {
        oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
        oprot.writeString(struct.nickname);
        oprot.writeFieldEnd();
      }
      if (struct.cid != null) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeString(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.bindMobilePhoneNumber != null) {
        oprot.writeFieldBegin(BIND_MOBILE_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.bindMobilePhoneNumber);
        oprot.writeFieldEnd();
      }
      if (struct.authData != null) {
        oprot.writeFieldBegin(AUTH_DATA_FIELD_DESC);
        oprot.writeString(struct.authData);
        oprot.writeFieldEnd();
      }
      if (struct.headImageUrl != null) {
        oprot.writeFieldBegin(HEAD_IMAGE_URL_FIELD_DESC);
        oprot.writeString(struct.headImageUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserInfoTupleSchemeFactory implements SchemeFactory {
    public UserInfoTupleScheme getScheme() {
      return new UserInfoTupleScheme();
    }
  }

  private static class UserInfoTupleScheme extends TupleScheme<UserInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetPassword()) {
        optionals.set(1);
      }
      if (struct.isSetUsername()) {
        optionals.set(2);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(3);
      }
      if (struct.isSetUpdatedAt()) {
        optionals.set(4);
      }
      if (struct.isSetMobilePhoneNumber()) {
        optionals.set(5);
      }
      if (struct.isSetNickname()) {
        optionals.set(6);
      }
      if (struct.isSetCid()) {
        optionals.set(7);
      }
      if (struct.isSetDesc()) {
        optionals.set(8);
      }
      if (struct.isSetBindMobilePhoneNumber()) {
        optionals.set(9);
      }
      if (struct.isSetAuthData()) {
        optionals.set(10);
      }
      if (struct.isSetHeadImageUrl()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeString(struct.createdAt);
      }
      if (struct.isSetUpdatedAt()) {
        oprot.writeString(struct.updatedAt);
      }
      if (struct.isSetMobilePhoneNumber()) {
        oprot.writeString(struct.mobilePhoneNumber);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetCid()) {
        oprot.writeString(struct.cid);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetBindMobilePhoneNumber()) {
        oprot.writeString(struct.bindMobilePhoneNumber);
      }
      if (struct.isSetAuthData()) {
        oprot.writeString(struct.authData);
      }
      if (struct.isSetHeadImageUrl()) {
        oprot.writeString(struct.headImageUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createdAt = iprot.readString();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.updatedAt = iprot.readString();
        struct.setUpdatedAtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mobilePhoneNumber = iprot.readString();
        struct.setMobilePhoneNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cid = iprot.readString();
        struct.setCidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(9)) {
        struct.bindMobilePhoneNumber = iprot.readString();
        struct.setBindMobilePhoneNumberIsSet(true);
      }
      if (incoming.get(10)) {
        struct.authData = iprot.readString();
        struct.setAuthDataIsSet(true);
      }
      if (incoming.get(11)) {
        struct.headImageUrl = iprot.readString();
        struct.setHeadImageUrlIsSet(true);
      }
    }
  }

}

