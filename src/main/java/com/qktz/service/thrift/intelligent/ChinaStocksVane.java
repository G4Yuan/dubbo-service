/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qktz.service.thrift.intelligent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChinaStocksVane implements org.apache.thrift.TBase<ChinaStocksVane, ChinaStocksVane._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChinaStocksVane");

  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("trading_day", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QK_INDEX_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("qk_index_level", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QK_INDEX_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("qk_index_text", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QK_INDEX_LEVEL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("qk_index_level_text", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField QK_INDEX_FREE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("qk_index_free_level", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField QK_INDEX_FREE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("qk_index_free_text", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField QK_INDEX_FREE_LEVEL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("qk_index_free_level_text", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField QK50_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("qk50_text", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField QK_AD_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("qkAD_text", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EMOTION_INDEX_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("emotion_index_text", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EMOTION_INDEX_FREE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("emotion_index_free_text", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MAIN_CAPITAL_UNSCRAMBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("main_capital_unscramble", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MAIN_CAPITAL_FREE_UNSCRAMBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("main_capital_free_unscramble", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EMOTION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("emotion_data", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField EMOTION_FREE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("emotion_free_data", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField BUY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("buy_status", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modify_time", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CSVID_FIELD_DESC = new org.apache.thrift.protocol.TField("csvid", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChinaStocksVaneStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChinaStocksVaneTupleSchemeFactory());
  }

  public String trading_day; // required
  public int qk_index_level; // required
  public String qk_index_text; // required
  public String qk_index_level_text; // required
  public int qk_index_free_level; // required
  public String qk_index_free_text; // required
  public String qk_index_free_level_text; // required
  public String qk50_text; // required
  public String qkAD_text; // required
  public String emotion_index_text; // required
  public String emotion_index_free_text; // required
  public String main_capital_unscramble; // required
  public String main_capital_free_unscramble; // required
  public String emotion_data; // required
  public String emotion_free_data; // required
  public int buy_status; // required
  public String creator; // required
  public String create_time; // required
  public String modify_time; // required
  public int csvid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADING_DAY((short)1, "trading_day"),
    QK_INDEX_LEVEL((short)2, "qk_index_level"),
    QK_INDEX_TEXT((short)3, "qk_index_text"),
    QK_INDEX_LEVEL_TEXT((short)4, "qk_index_level_text"),
    QK_INDEX_FREE_LEVEL((short)5, "qk_index_free_level"),
    QK_INDEX_FREE_TEXT((short)6, "qk_index_free_text"),
    QK_INDEX_FREE_LEVEL_TEXT((short)7, "qk_index_free_level_text"),
    QK50_TEXT((short)8, "qk50_text"),
    QK_AD_TEXT((short)9, "qkAD_text"),
    EMOTION_INDEX_TEXT((short)10, "emotion_index_text"),
    EMOTION_INDEX_FREE_TEXT((short)11, "emotion_index_free_text"),
    MAIN_CAPITAL_UNSCRAMBLE((short)12, "main_capital_unscramble"),
    MAIN_CAPITAL_FREE_UNSCRAMBLE((short)13, "main_capital_free_unscramble"),
    EMOTION_DATA((short)14, "emotion_data"),
    EMOTION_FREE_DATA((short)15, "emotion_free_data"),
    BUY_STATUS((short)16, "buy_status"),
    CREATOR((short)17, "creator"),
    CREATE_TIME((short)18, "create_time"),
    MODIFY_TIME((short)19, "modify_time"),
    CSVID((short)20, "csvid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADING_DAY
          return TRADING_DAY;
        case 2: // QK_INDEX_LEVEL
          return QK_INDEX_LEVEL;
        case 3: // QK_INDEX_TEXT
          return QK_INDEX_TEXT;
        case 4: // QK_INDEX_LEVEL_TEXT
          return QK_INDEX_LEVEL_TEXT;
        case 5: // QK_INDEX_FREE_LEVEL
          return QK_INDEX_FREE_LEVEL;
        case 6: // QK_INDEX_FREE_TEXT
          return QK_INDEX_FREE_TEXT;
        case 7: // QK_INDEX_FREE_LEVEL_TEXT
          return QK_INDEX_FREE_LEVEL_TEXT;
        case 8: // QK50_TEXT
          return QK50_TEXT;
        case 9: // QK_AD_TEXT
          return QK_AD_TEXT;
        case 10: // EMOTION_INDEX_TEXT
          return EMOTION_INDEX_TEXT;
        case 11: // EMOTION_INDEX_FREE_TEXT
          return EMOTION_INDEX_FREE_TEXT;
        case 12: // MAIN_CAPITAL_UNSCRAMBLE
          return MAIN_CAPITAL_UNSCRAMBLE;
        case 13: // MAIN_CAPITAL_FREE_UNSCRAMBLE
          return MAIN_CAPITAL_FREE_UNSCRAMBLE;
        case 14: // EMOTION_DATA
          return EMOTION_DATA;
        case 15: // EMOTION_FREE_DATA
          return EMOTION_FREE_DATA;
        case 16: // BUY_STATUS
          return BUY_STATUS;
        case 17: // CREATOR
          return CREATOR;
        case 18: // CREATE_TIME
          return CREATE_TIME;
        case 19: // MODIFY_TIME
          return MODIFY_TIME;
        case 20: // CSVID
          return CSVID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QK_INDEX_LEVEL_ISSET_ID = 0;
  private static final int __QK_INDEX_FREE_LEVEL_ISSET_ID = 1;
  private static final int __BUY_STATUS_ISSET_ID = 2;
  private static final int __CSVID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("trading_day", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QK_INDEX_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("qk_index_level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.QK_INDEX_TEXT, new org.apache.thrift.meta_data.FieldMetaData("qk_index_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QK_INDEX_LEVEL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("qk_index_level_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QK_INDEX_FREE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("qk_index_free_level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.QK_INDEX_FREE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("qk_index_free_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QK_INDEX_FREE_LEVEL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("qk_index_free_level_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QK50_TEXT, new org.apache.thrift.meta_data.FieldMetaData("qk50_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QK_AD_TEXT, new org.apache.thrift.meta_data.FieldMetaData("qkAD_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMOTION_INDEX_TEXT, new org.apache.thrift.meta_data.FieldMetaData("emotion_index_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMOTION_INDEX_FREE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("emotion_index_free_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIN_CAPITAL_UNSCRAMBLE, new org.apache.thrift.meta_data.FieldMetaData("main_capital_unscramble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIN_CAPITAL_FREE_UNSCRAMBLE, new org.apache.thrift.meta_data.FieldMetaData("main_capital_free_unscramble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMOTION_DATA, new org.apache.thrift.meta_data.FieldMetaData("emotion_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMOTION_FREE_DATA, new org.apache.thrift.meta_data.FieldMetaData("emotion_free_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("buy_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("modify_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CSVID, new org.apache.thrift.meta_data.FieldMetaData("csvid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChinaStocksVane.class, metaDataMap);
  }

  public ChinaStocksVane() {
  }

  public ChinaStocksVane(
    String trading_day,
    int qk_index_level,
    String qk_index_text,
    String qk_index_level_text,
    int qk_index_free_level,
    String qk_index_free_text,
    String qk_index_free_level_text,
    String qk50_text,
    String qkAD_text,
    String emotion_index_text,
    String emotion_index_free_text,
    String main_capital_unscramble,
    String main_capital_free_unscramble,
    String emotion_data,
    String emotion_free_data,
    int buy_status,
    String creator,
    String create_time,
    String modify_time,
    int csvid)
  {
    this();
    this.trading_day = trading_day;
    this.qk_index_level = qk_index_level;
    setQk_index_levelIsSet(true);
    this.qk_index_text = qk_index_text;
    this.qk_index_level_text = qk_index_level_text;
    this.qk_index_free_level = qk_index_free_level;
    setQk_index_free_levelIsSet(true);
    this.qk_index_free_text = qk_index_free_text;
    this.qk_index_free_level_text = qk_index_free_level_text;
    this.qk50_text = qk50_text;
    this.qkAD_text = qkAD_text;
    this.emotion_index_text = emotion_index_text;
    this.emotion_index_free_text = emotion_index_free_text;
    this.main_capital_unscramble = main_capital_unscramble;
    this.main_capital_free_unscramble = main_capital_free_unscramble;
    this.emotion_data = emotion_data;
    this.emotion_free_data = emotion_free_data;
    this.buy_status = buy_status;
    setBuy_statusIsSet(true);
    this.creator = creator;
    this.create_time = create_time;
    this.modify_time = modify_time;
    this.csvid = csvid;
    setCsvidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChinaStocksVane(ChinaStocksVane other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTrading_day()) {
      this.trading_day = other.trading_day;
    }
    this.qk_index_level = other.qk_index_level;
    if (other.isSetQk_index_text()) {
      this.qk_index_text = other.qk_index_text;
    }
    if (other.isSetQk_index_level_text()) {
      this.qk_index_level_text = other.qk_index_level_text;
    }
    this.qk_index_free_level = other.qk_index_free_level;
    if (other.isSetQk_index_free_text()) {
      this.qk_index_free_text = other.qk_index_free_text;
    }
    if (other.isSetQk_index_free_level_text()) {
      this.qk_index_free_level_text = other.qk_index_free_level_text;
    }
    if (other.isSetQk50_text()) {
      this.qk50_text = other.qk50_text;
    }
    if (other.isSetQkAD_text()) {
      this.qkAD_text = other.qkAD_text;
    }
    if (other.isSetEmotion_index_text()) {
      this.emotion_index_text = other.emotion_index_text;
    }
    if (other.isSetEmotion_index_free_text()) {
      this.emotion_index_free_text = other.emotion_index_free_text;
    }
    if (other.isSetMain_capital_unscramble()) {
      this.main_capital_unscramble = other.main_capital_unscramble;
    }
    if (other.isSetMain_capital_free_unscramble()) {
      this.main_capital_free_unscramble = other.main_capital_free_unscramble;
    }
    if (other.isSetEmotion_data()) {
      this.emotion_data = other.emotion_data;
    }
    if (other.isSetEmotion_free_data()) {
      this.emotion_free_data = other.emotion_free_data;
    }
    this.buy_status = other.buy_status;
    if (other.isSetCreator()) {
      this.creator = other.creator;
    }
    if (other.isSetCreate_time()) {
      this.create_time = other.create_time;
    }
    if (other.isSetModify_time()) {
      this.modify_time = other.modify_time;
    }
    this.csvid = other.csvid;
  }

  public ChinaStocksVane deepCopy() {
    return new ChinaStocksVane(this);
  }

  @Override
  public void clear() {
    this.trading_day = null;
    setQk_index_levelIsSet(false);
    this.qk_index_level = 0;
    this.qk_index_text = null;
    this.qk_index_level_text = null;
    setQk_index_free_levelIsSet(false);
    this.qk_index_free_level = 0;
    this.qk_index_free_text = null;
    this.qk_index_free_level_text = null;
    this.qk50_text = null;
    this.qkAD_text = null;
    this.emotion_index_text = null;
    this.emotion_index_free_text = null;
    this.main_capital_unscramble = null;
    this.main_capital_free_unscramble = null;
    this.emotion_data = null;
    this.emotion_free_data = null;
    setBuy_statusIsSet(false);
    this.buy_status = 0;
    this.creator = null;
    this.create_time = null;
    this.modify_time = null;
    setCsvidIsSet(false);
    this.csvid = 0;
  }

  public String getTrading_day() {
    return this.trading_day;
  }

  public ChinaStocksVane setTrading_day(String trading_day) {
    this.trading_day = trading_day;
    return this;
  }

  public void unsetTrading_day() {
    this.trading_day = null;
  }

  /** Returns true if field trading_day is set (has been assigned a value) and false otherwise */
  public boolean isSetTrading_day() {
    return this.trading_day != null;
  }

  public void setTrading_dayIsSet(boolean value) {
    if (!value) {
      this.trading_day = null;
    }
  }

  public int getQk_index_level() {
    return this.qk_index_level;
  }

  public ChinaStocksVane setQk_index_level(int qk_index_level) {
    this.qk_index_level = qk_index_level;
    setQk_index_levelIsSet(true);
    return this;
  }

  public void unsetQk_index_level() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QK_INDEX_LEVEL_ISSET_ID);
  }

  /** Returns true if field qk_index_level is set (has been assigned a value) and false otherwise */
  public boolean isSetQk_index_level() {
    return EncodingUtils.testBit(__isset_bitfield, __QK_INDEX_LEVEL_ISSET_ID);
  }

  public void setQk_index_levelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QK_INDEX_LEVEL_ISSET_ID, value);
  }

  public String getQk_index_text() {
    return this.qk_index_text;
  }

  public ChinaStocksVane setQk_index_text(String qk_index_text) {
    this.qk_index_text = qk_index_text;
    return this;
  }

  public void unsetQk_index_text() {
    this.qk_index_text = null;
  }

  /** Returns true if field qk_index_text is set (has been assigned a value) and false otherwise */
  public boolean isSetQk_index_text() {
    return this.qk_index_text != null;
  }

  public void setQk_index_textIsSet(boolean value) {
    if (!value) {
      this.qk_index_text = null;
    }
  }

  public String getQk_index_level_text() {
    return this.qk_index_level_text;
  }

  public ChinaStocksVane setQk_index_level_text(String qk_index_level_text) {
    this.qk_index_level_text = qk_index_level_text;
    return this;
  }

  public void unsetQk_index_level_text() {
    this.qk_index_level_text = null;
  }

  /** Returns true if field qk_index_level_text is set (has been assigned a value) and false otherwise */
  public boolean isSetQk_index_level_text() {
    return this.qk_index_level_text != null;
  }

  public void setQk_index_level_textIsSet(boolean value) {
    if (!value) {
      this.qk_index_level_text = null;
    }
  }

  public int getQk_index_free_level() {
    return this.qk_index_free_level;
  }

  public ChinaStocksVane setQk_index_free_level(int qk_index_free_level) {
    this.qk_index_free_level = qk_index_free_level;
    setQk_index_free_levelIsSet(true);
    return this;
  }

  public void unsetQk_index_free_level() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QK_INDEX_FREE_LEVEL_ISSET_ID);
  }

  /** Returns true if field qk_index_free_level is set (has been assigned a value) and false otherwise */
  public boolean isSetQk_index_free_level() {
    return EncodingUtils.testBit(__isset_bitfield, __QK_INDEX_FREE_LEVEL_ISSET_ID);
  }

  public void setQk_index_free_levelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QK_INDEX_FREE_LEVEL_ISSET_ID, value);
  }

  public String getQk_index_free_text() {
    return this.qk_index_free_text;
  }

  public ChinaStocksVane setQk_index_free_text(String qk_index_free_text) {
    this.qk_index_free_text = qk_index_free_text;
    return this;
  }

  public void unsetQk_index_free_text() {
    this.qk_index_free_text = null;
  }

  /** Returns true if field qk_index_free_text is set (has been assigned a value) and false otherwise */
  public boolean isSetQk_index_free_text() {
    return this.qk_index_free_text != null;
  }

  public void setQk_index_free_textIsSet(boolean value) {
    if (!value) {
      this.qk_index_free_text = null;
    }
  }

  public String getQk_index_free_level_text() {
    return this.qk_index_free_level_text;
  }

  public ChinaStocksVane setQk_index_free_level_text(String qk_index_free_level_text) {
    this.qk_index_free_level_text = qk_index_free_level_text;
    return this;
  }

  public void unsetQk_index_free_level_text() {
    this.qk_index_free_level_text = null;
  }

  /** Returns true if field qk_index_free_level_text is set (has been assigned a value) and false otherwise */
  public boolean isSetQk_index_free_level_text() {
    return this.qk_index_free_level_text != null;
  }

  public void setQk_index_free_level_textIsSet(boolean value) {
    if (!value) {
      this.qk_index_free_level_text = null;
    }
  }

  public String getQk50_text() {
    return this.qk50_text;
  }

  public ChinaStocksVane setQk50_text(String qk50_text) {
    this.qk50_text = qk50_text;
    return this;
  }

  public void unsetQk50_text() {
    this.qk50_text = null;
  }

  /** Returns true if field qk50_text is set (has been assigned a value) and false otherwise */
  public boolean isSetQk50_text() {
    return this.qk50_text != null;
  }

  public void setQk50_textIsSet(boolean value) {
    if (!value) {
      this.qk50_text = null;
    }
  }

  public String getQkAD_text() {
    return this.qkAD_text;
  }

  public ChinaStocksVane setQkAD_text(String qkAD_text) {
    this.qkAD_text = qkAD_text;
    return this;
  }

  public void unsetQkAD_text() {
    this.qkAD_text = null;
  }

  /** Returns true if field qkAD_text is set (has been assigned a value) and false otherwise */
  public boolean isSetQkAD_text() {
    return this.qkAD_text != null;
  }

  public void setQkAD_textIsSet(boolean value) {
    if (!value) {
      this.qkAD_text = null;
    }
  }

  public String getEmotion_index_text() {
    return this.emotion_index_text;
  }

  public ChinaStocksVane setEmotion_index_text(String emotion_index_text) {
    this.emotion_index_text = emotion_index_text;
    return this;
  }

  public void unsetEmotion_index_text() {
    this.emotion_index_text = null;
  }

  /** Returns true if field emotion_index_text is set (has been assigned a value) and false otherwise */
  public boolean isSetEmotion_index_text() {
    return this.emotion_index_text != null;
  }

  public void setEmotion_index_textIsSet(boolean value) {
    if (!value) {
      this.emotion_index_text = null;
    }
  }

  public String getEmotion_index_free_text() {
    return this.emotion_index_free_text;
  }

  public ChinaStocksVane setEmotion_index_free_text(String emotion_index_free_text) {
    this.emotion_index_free_text = emotion_index_free_text;
    return this;
  }

  public void unsetEmotion_index_free_text() {
    this.emotion_index_free_text = null;
  }

  /** Returns true if field emotion_index_free_text is set (has been assigned a value) and false otherwise */
  public boolean isSetEmotion_index_free_text() {
    return this.emotion_index_free_text != null;
  }

  public void setEmotion_index_free_textIsSet(boolean value) {
    if (!value) {
      this.emotion_index_free_text = null;
    }
  }

  public String getMain_capital_unscramble() {
    return this.main_capital_unscramble;
  }

  public ChinaStocksVane setMain_capital_unscramble(String main_capital_unscramble) {
    this.main_capital_unscramble = main_capital_unscramble;
    return this;
  }

  public void unsetMain_capital_unscramble() {
    this.main_capital_unscramble = null;
  }

  /** Returns true if field main_capital_unscramble is set (has been assigned a value) and false otherwise */
  public boolean isSetMain_capital_unscramble() {
    return this.main_capital_unscramble != null;
  }

  public void setMain_capital_unscrambleIsSet(boolean value) {
    if (!value) {
      this.main_capital_unscramble = null;
    }
  }

  public String getMain_capital_free_unscramble() {
    return this.main_capital_free_unscramble;
  }

  public ChinaStocksVane setMain_capital_free_unscramble(String main_capital_free_unscramble) {
    this.main_capital_free_unscramble = main_capital_free_unscramble;
    return this;
  }

  public void unsetMain_capital_free_unscramble() {
    this.main_capital_free_unscramble = null;
  }

  /** Returns true if field main_capital_free_unscramble is set (has been assigned a value) and false otherwise */
  public boolean isSetMain_capital_free_unscramble() {
    return this.main_capital_free_unscramble != null;
  }

  public void setMain_capital_free_unscrambleIsSet(boolean value) {
    if (!value) {
      this.main_capital_free_unscramble = null;
    }
  }

  public String getEmotion_data() {
    return this.emotion_data;
  }

  public ChinaStocksVane setEmotion_data(String emotion_data) {
    this.emotion_data = emotion_data;
    return this;
  }

  public void unsetEmotion_data() {
    this.emotion_data = null;
  }

  /** Returns true if field emotion_data is set (has been assigned a value) and false otherwise */
  public boolean isSetEmotion_data() {
    return this.emotion_data != null;
  }

  public void setEmotion_dataIsSet(boolean value) {
    if (!value) {
      this.emotion_data = null;
    }
  }

  public String getEmotion_free_data() {
    return this.emotion_free_data;
  }

  public ChinaStocksVane setEmotion_free_data(String emotion_free_data) {
    this.emotion_free_data = emotion_free_data;
    return this;
  }

  public void unsetEmotion_free_data() {
    this.emotion_free_data = null;
  }

  /** Returns true if field emotion_free_data is set (has been assigned a value) and false otherwise */
  public boolean isSetEmotion_free_data() {
    return this.emotion_free_data != null;
  }

  public void setEmotion_free_dataIsSet(boolean value) {
    if (!value) {
      this.emotion_free_data = null;
    }
  }

  public int getBuy_status() {
    return this.buy_status;
  }

  public ChinaStocksVane setBuy_status(int buy_status) {
    this.buy_status = buy_status;
    setBuy_statusIsSet(true);
    return this;
  }

  public void unsetBuy_status() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUY_STATUS_ISSET_ID);
  }

  /** Returns true if field buy_status is set (has been assigned a value) and false otherwise */
  public boolean isSetBuy_status() {
    return EncodingUtils.testBit(__isset_bitfield, __BUY_STATUS_ISSET_ID);
  }

  public void setBuy_statusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUY_STATUS_ISSET_ID, value);
  }

  public String getCreator() {
    return this.creator;
  }

  public ChinaStocksVane setCreator(String creator) {
    this.creator = creator;
    return this;
  }

  public void unsetCreator() {
    this.creator = null;
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return this.creator != null;
  }

  public void setCreatorIsSet(boolean value) {
    if (!value) {
      this.creator = null;
    }
  }

  public String getCreate_time() {
    return this.create_time;
  }

  public ChinaStocksVane setCreate_time(String create_time) {
    this.create_time = create_time;
    return this;
  }

  public void unsetCreate_time() {
    this.create_time = null;
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return this.create_time != null;
  }

  public void setCreate_timeIsSet(boolean value) {
    if (!value) {
      this.create_time = null;
    }
  }

  public String getModify_time() {
    return this.modify_time;
  }

  public ChinaStocksVane setModify_time(String modify_time) {
    this.modify_time = modify_time;
    return this;
  }

  public void unsetModify_time() {
    this.modify_time = null;
  }

  /** Returns true if field modify_time is set (has been assigned a value) and false otherwise */
  public boolean isSetModify_time() {
    return this.modify_time != null;
  }

  public void setModify_timeIsSet(boolean value) {
    if (!value) {
      this.modify_time = null;
    }
  }

  public int getCsvid() {
    return this.csvid;
  }

  public ChinaStocksVane setCsvid(int csvid) {
    this.csvid = csvid;
    setCsvidIsSet(true);
    return this;
  }

  public void unsetCsvid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSVID_ISSET_ID);
  }

  /** Returns true if field csvid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsvid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSVID_ISSET_ID);
  }

  public void setCsvidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSVID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADING_DAY:
      if (value == null) {
        unsetTrading_day();
      } else {
        setTrading_day((String)value);
      }
      break;

    case QK_INDEX_LEVEL:
      if (value == null) {
        unsetQk_index_level();
      } else {
        setQk_index_level((Integer)value);
      }
      break;

    case QK_INDEX_TEXT:
      if (value == null) {
        unsetQk_index_text();
      } else {
        setQk_index_text((String)value);
      }
      break;

    case QK_INDEX_LEVEL_TEXT:
      if (value == null) {
        unsetQk_index_level_text();
      } else {
        setQk_index_level_text((String)value);
      }
      break;

    case QK_INDEX_FREE_LEVEL:
      if (value == null) {
        unsetQk_index_free_level();
      } else {
        setQk_index_free_level((Integer)value);
      }
      break;

    case QK_INDEX_FREE_TEXT:
      if (value == null) {
        unsetQk_index_free_text();
      } else {
        setQk_index_free_text((String)value);
      }
      break;

    case QK_INDEX_FREE_LEVEL_TEXT:
      if (value == null) {
        unsetQk_index_free_level_text();
      } else {
        setQk_index_free_level_text((String)value);
      }
      break;

    case QK50_TEXT:
      if (value == null) {
        unsetQk50_text();
      } else {
        setQk50_text((String)value);
      }
      break;

    case QK_AD_TEXT:
      if (value == null) {
        unsetQkAD_text();
      } else {
        setQkAD_text((String)value);
      }
      break;

    case EMOTION_INDEX_TEXT:
      if (value == null) {
        unsetEmotion_index_text();
      } else {
        setEmotion_index_text((String)value);
      }
      break;

    case EMOTION_INDEX_FREE_TEXT:
      if (value == null) {
        unsetEmotion_index_free_text();
      } else {
        setEmotion_index_free_text((String)value);
      }
      break;

    case MAIN_CAPITAL_UNSCRAMBLE:
      if (value == null) {
        unsetMain_capital_unscramble();
      } else {
        setMain_capital_unscramble((String)value);
      }
      break;

    case MAIN_CAPITAL_FREE_UNSCRAMBLE:
      if (value == null) {
        unsetMain_capital_free_unscramble();
      } else {
        setMain_capital_free_unscramble((String)value);
      }
      break;

    case EMOTION_DATA:
      if (value == null) {
        unsetEmotion_data();
      } else {
        setEmotion_data((String)value);
      }
      break;

    case EMOTION_FREE_DATA:
      if (value == null) {
        unsetEmotion_free_data();
      } else {
        setEmotion_free_data((String)value);
      }
      break;

    case BUY_STATUS:
      if (value == null) {
        unsetBuy_status();
      } else {
        setBuy_status((Integer)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((String)value);
      }
      break;

    case MODIFY_TIME:
      if (value == null) {
        unsetModify_time();
      } else {
        setModify_time((String)value);
      }
      break;

    case CSVID:
      if (value == null) {
        unsetCsvid();
      } else {
        setCsvid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADING_DAY:
      return getTrading_day();

    case QK_INDEX_LEVEL:
      return Integer.valueOf(getQk_index_level());

    case QK_INDEX_TEXT:
      return getQk_index_text();

    case QK_INDEX_LEVEL_TEXT:
      return getQk_index_level_text();

    case QK_INDEX_FREE_LEVEL:
      return Integer.valueOf(getQk_index_free_level());

    case QK_INDEX_FREE_TEXT:
      return getQk_index_free_text();

    case QK_INDEX_FREE_LEVEL_TEXT:
      return getQk_index_free_level_text();

    case QK50_TEXT:
      return getQk50_text();

    case QK_AD_TEXT:
      return getQkAD_text();

    case EMOTION_INDEX_TEXT:
      return getEmotion_index_text();

    case EMOTION_INDEX_FREE_TEXT:
      return getEmotion_index_free_text();

    case MAIN_CAPITAL_UNSCRAMBLE:
      return getMain_capital_unscramble();

    case MAIN_CAPITAL_FREE_UNSCRAMBLE:
      return getMain_capital_free_unscramble();

    case EMOTION_DATA:
      return getEmotion_data();

    case EMOTION_FREE_DATA:
      return getEmotion_free_data();

    case BUY_STATUS:
      return Integer.valueOf(getBuy_status());

    case CREATOR:
      return getCreator();

    case CREATE_TIME:
      return getCreate_time();

    case MODIFY_TIME:
      return getModify_time();

    case CSVID:
      return Integer.valueOf(getCsvid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADING_DAY:
      return isSetTrading_day();
    case QK_INDEX_LEVEL:
      return isSetQk_index_level();
    case QK_INDEX_TEXT:
      return isSetQk_index_text();
    case QK_INDEX_LEVEL_TEXT:
      return isSetQk_index_level_text();
    case QK_INDEX_FREE_LEVEL:
      return isSetQk_index_free_level();
    case QK_INDEX_FREE_TEXT:
      return isSetQk_index_free_text();
    case QK_INDEX_FREE_LEVEL_TEXT:
      return isSetQk_index_free_level_text();
    case QK50_TEXT:
      return isSetQk50_text();
    case QK_AD_TEXT:
      return isSetQkAD_text();
    case EMOTION_INDEX_TEXT:
      return isSetEmotion_index_text();
    case EMOTION_INDEX_FREE_TEXT:
      return isSetEmotion_index_free_text();
    case MAIN_CAPITAL_UNSCRAMBLE:
      return isSetMain_capital_unscramble();
    case MAIN_CAPITAL_FREE_UNSCRAMBLE:
      return isSetMain_capital_free_unscramble();
    case EMOTION_DATA:
      return isSetEmotion_data();
    case EMOTION_FREE_DATA:
      return isSetEmotion_free_data();
    case BUY_STATUS:
      return isSetBuy_status();
    case CREATOR:
      return isSetCreator();
    case CREATE_TIME:
      return isSetCreate_time();
    case MODIFY_TIME:
      return isSetModify_time();
    case CSVID:
      return isSetCsvid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChinaStocksVane)
      return this.equals((ChinaStocksVane)that);
    return false;
  }

  public boolean equals(ChinaStocksVane that) {
    if (that == null)
      return false;

    boolean this_present_trading_day = true && this.isSetTrading_day();
    boolean that_present_trading_day = true && that.isSetTrading_day();
    if (this_present_trading_day || that_present_trading_day) {
      if (!(this_present_trading_day && that_present_trading_day))
        return false;
      if (!this.trading_day.equals(that.trading_day))
        return false;
    }

    boolean this_present_qk_index_level = true;
    boolean that_present_qk_index_level = true;
    if (this_present_qk_index_level || that_present_qk_index_level) {
      if (!(this_present_qk_index_level && that_present_qk_index_level))
        return false;
      if (this.qk_index_level != that.qk_index_level)
        return false;
    }

    boolean this_present_qk_index_text = true && this.isSetQk_index_text();
    boolean that_present_qk_index_text = true && that.isSetQk_index_text();
    if (this_present_qk_index_text || that_present_qk_index_text) {
      if (!(this_present_qk_index_text && that_present_qk_index_text))
        return false;
      if (!this.qk_index_text.equals(that.qk_index_text))
        return false;
    }

    boolean this_present_qk_index_level_text = true && this.isSetQk_index_level_text();
    boolean that_present_qk_index_level_text = true && that.isSetQk_index_level_text();
    if (this_present_qk_index_level_text || that_present_qk_index_level_text) {
      if (!(this_present_qk_index_level_text && that_present_qk_index_level_text))
        return false;
      if (!this.qk_index_level_text.equals(that.qk_index_level_text))
        return false;
    }

    boolean this_present_qk_index_free_level = true;
    boolean that_present_qk_index_free_level = true;
    if (this_present_qk_index_free_level || that_present_qk_index_free_level) {
      if (!(this_present_qk_index_free_level && that_present_qk_index_free_level))
        return false;
      if (this.qk_index_free_level != that.qk_index_free_level)
        return false;
    }

    boolean this_present_qk_index_free_text = true && this.isSetQk_index_free_text();
    boolean that_present_qk_index_free_text = true && that.isSetQk_index_free_text();
    if (this_present_qk_index_free_text || that_present_qk_index_free_text) {
      if (!(this_present_qk_index_free_text && that_present_qk_index_free_text))
        return false;
      if (!this.qk_index_free_text.equals(that.qk_index_free_text))
        return false;
    }

    boolean this_present_qk_index_free_level_text = true && this.isSetQk_index_free_level_text();
    boolean that_present_qk_index_free_level_text = true && that.isSetQk_index_free_level_text();
    if (this_present_qk_index_free_level_text || that_present_qk_index_free_level_text) {
      if (!(this_present_qk_index_free_level_text && that_present_qk_index_free_level_text))
        return false;
      if (!this.qk_index_free_level_text.equals(that.qk_index_free_level_text))
        return false;
    }

    boolean this_present_qk50_text = true && this.isSetQk50_text();
    boolean that_present_qk50_text = true && that.isSetQk50_text();
    if (this_present_qk50_text || that_present_qk50_text) {
      if (!(this_present_qk50_text && that_present_qk50_text))
        return false;
      if (!this.qk50_text.equals(that.qk50_text))
        return false;
    }

    boolean this_present_qkAD_text = true && this.isSetQkAD_text();
    boolean that_present_qkAD_text = true && that.isSetQkAD_text();
    if (this_present_qkAD_text || that_present_qkAD_text) {
      if (!(this_present_qkAD_text && that_present_qkAD_text))
        return false;
      if (!this.qkAD_text.equals(that.qkAD_text))
        return false;
    }

    boolean this_present_emotion_index_text = true && this.isSetEmotion_index_text();
    boolean that_present_emotion_index_text = true && that.isSetEmotion_index_text();
    if (this_present_emotion_index_text || that_present_emotion_index_text) {
      if (!(this_present_emotion_index_text && that_present_emotion_index_text))
        return false;
      if (!this.emotion_index_text.equals(that.emotion_index_text))
        return false;
    }

    boolean this_present_emotion_index_free_text = true && this.isSetEmotion_index_free_text();
    boolean that_present_emotion_index_free_text = true && that.isSetEmotion_index_free_text();
    if (this_present_emotion_index_free_text || that_present_emotion_index_free_text) {
      if (!(this_present_emotion_index_free_text && that_present_emotion_index_free_text))
        return false;
      if (!this.emotion_index_free_text.equals(that.emotion_index_free_text))
        return false;
    }

    boolean this_present_main_capital_unscramble = true && this.isSetMain_capital_unscramble();
    boolean that_present_main_capital_unscramble = true && that.isSetMain_capital_unscramble();
    if (this_present_main_capital_unscramble || that_present_main_capital_unscramble) {
      if (!(this_present_main_capital_unscramble && that_present_main_capital_unscramble))
        return false;
      if (!this.main_capital_unscramble.equals(that.main_capital_unscramble))
        return false;
    }

    boolean this_present_main_capital_free_unscramble = true && this.isSetMain_capital_free_unscramble();
    boolean that_present_main_capital_free_unscramble = true && that.isSetMain_capital_free_unscramble();
    if (this_present_main_capital_free_unscramble || that_present_main_capital_free_unscramble) {
      if (!(this_present_main_capital_free_unscramble && that_present_main_capital_free_unscramble))
        return false;
      if (!this.main_capital_free_unscramble.equals(that.main_capital_free_unscramble))
        return false;
    }

    boolean this_present_emotion_data = true && this.isSetEmotion_data();
    boolean that_present_emotion_data = true && that.isSetEmotion_data();
    if (this_present_emotion_data || that_present_emotion_data) {
      if (!(this_present_emotion_data && that_present_emotion_data))
        return false;
      if (!this.emotion_data.equals(that.emotion_data))
        return false;
    }

    boolean this_present_emotion_free_data = true && this.isSetEmotion_free_data();
    boolean that_present_emotion_free_data = true && that.isSetEmotion_free_data();
    if (this_present_emotion_free_data || that_present_emotion_free_data) {
      if (!(this_present_emotion_free_data && that_present_emotion_free_data))
        return false;
      if (!this.emotion_free_data.equals(that.emotion_free_data))
        return false;
    }

    boolean this_present_buy_status = true;
    boolean that_present_buy_status = true;
    if (this_present_buy_status || that_present_buy_status) {
      if (!(this_present_buy_status && that_present_buy_status))
        return false;
      if (this.buy_status != that.buy_status)
        return false;
    }

    boolean this_present_creator = true && this.isSetCreator();
    boolean that_present_creator = true && that.isSetCreator();
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (!this.creator.equals(that.creator))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_modify_time = true && this.isSetModify_time();
    boolean that_present_modify_time = true && that.isSetModify_time();
    if (this_present_modify_time || that_present_modify_time) {
      if (!(this_present_modify_time && that_present_modify_time))
        return false;
      if (!this.modify_time.equals(that.modify_time))
        return false;
    }

    boolean this_present_csvid = true;
    boolean that_present_csvid = true;
    if (this_present_csvid || that_present_csvid) {
      if (!(this_present_csvid && that_present_csvid))
        return false;
      if (this.csvid != that.csvid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ChinaStocksVane other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ChinaStocksVane typedOther = (ChinaStocksVane)other;

    lastComparison = Boolean.valueOf(isSetTrading_day()).compareTo(typedOther.isSetTrading_day());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrading_day()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trading_day, typedOther.trading_day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQk_index_level()).compareTo(typedOther.isSetQk_index_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQk_index_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qk_index_level, typedOther.qk_index_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQk_index_text()).compareTo(typedOther.isSetQk_index_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQk_index_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qk_index_text, typedOther.qk_index_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQk_index_level_text()).compareTo(typedOther.isSetQk_index_level_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQk_index_level_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qk_index_level_text, typedOther.qk_index_level_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQk_index_free_level()).compareTo(typedOther.isSetQk_index_free_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQk_index_free_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qk_index_free_level, typedOther.qk_index_free_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQk_index_free_text()).compareTo(typedOther.isSetQk_index_free_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQk_index_free_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qk_index_free_text, typedOther.qk_index_free_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQk_index_free_level_text()).compareTo(typedOther.isSetQk_index_free_level_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQk_index_free_level_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qk_index_free_level_text, typedOther.qk_index_free_level_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQk50_text()).compareTo(typedOther.isSetQk50_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQk50_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qk50_text, typedOther.qk50_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQkAD_text()).compareTo(typedOther.isSetQkAD_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQkAD_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qkAD_text, typedOther.qkAD_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmotion_index_text()).compareTo(typedOther.isSetEmotion_index_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmotion_index_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotion_index_text, typedOther.emotion_index_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmotion_index_free_text()).compareTo(typedOther.isSetEmotion_index_free_text());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmotion_index_free_text()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotion_index_free_text, typedOther.emotion_index_free_text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMain_capital_unscramble()).compareTo(typedOther.isSetMain_capital_unscramble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMain_capital_unscramble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.main_capital_unscramble, typedOther.main_capital_unscramble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMain_capital_free_unscramble()).compareTo(typedOther.isSetMain_capital_free_unscramble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMain_capital_free_unscramble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.main_capital_free_unscramble, typedOther.main_capital_free_unscramble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmotion_data()).compareTo(typedOther.isSetEmotion_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmotion_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotion_data, typedOther.emotion_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmotion_free_data()).compareTo(typedOther.isSetEmotion_free_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmotion_free_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotion_free_data, typedOther.emotion_free_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuy_status()).compareTo(typedOther.isSetBuy_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuy_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buy_status, typedOther.buy_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(typedOther.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, typedOther.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(typedOther.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, typedOther.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModify_time()).compareTo(typedOther.isSetModify_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModify_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modify_time, typedOther.modify_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsvid()).compareTo(typedOther.isSetCsvid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsvid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csvid, typedOther.csvid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChinaStocksVane(");
    boolean first = true;

    sb.append("trading_day:");
    if (this.trading_day == null) {
      sb.append("null");
    } else {
      sb.append(this.trading_day);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qk_index_level:");
    sb.append(this.qk_index_level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("qk_index_text:");
    if (this.qk_index_text == null) {
      sb.append("null");
    } else {
      sb.append(this.qk_index_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qk_index_level_text:");
    if (this.qk_index_level_text == null) {
      sb.append("null");
    } else {
      sb.append(this.qk_index_level_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qk_index_free_level:");
    sb.append(this.qk_index_free_level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("qk_index_free_text:");
    if (this.qk_index_free_text == null) {
      sb.append("null");
    } else {
      sb.append(this.qk_index_free_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qk_index_free_level_text:");
    if (this.qk_index_free_level_text == null) {
      sb.append("null");
    } else {
      sb.append(this.qk_index_free_level_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qk50_text:");
    if (this.qk50_text == null) {
      sb.append("null");
    } else {
      sb.append(this.qk50_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qkAD_text:");
    if (this.qkAD_text == null) {
      sb.append("null");
    } else {
      sb.append(this.qkAD_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emotion_index_text:");
    if (this.emotion_index_text == null) {
      sb.append("null");
    } else {
      sb.append(this.emotion_index_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emotion_index_free_text:");
    if (this.emotion_index_free_text == null) {
      sb.append("null");
    } else {
      sb.append(this.emotion_index_free_text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("main_capital_unscramble:");
    if (this.main_capital_unscramble == null) {
      sb.append("null");
    } else {
      sb.append(this.main_capital_unscramble);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("main_capital_free_unscramble:");
    if (this.main_capital_free_unscramble == null) {
      sb.append("null");
    } else {
      sb.append(this.main_capital_free_unscramble);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emotion_data:");
    if (this.emotion_data == null) {
      sb.append("null");
    } else {
      sb.append(this.emotion_data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("emotion_free_data:");
    if (this.emotion_free_data == null) {
      sb.append("null");
    } else {
      sb.append(this.emotion_free_data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buy_status:");
    sb.append(this.buy_status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    if (this.creator == null) {
      sb.append("null");
    } else {
      sb.append(this.creator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("create_time:");
    if (this.create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.create_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modify_time:");
    if (this.modify_time == null) {
      sb.append("null");
    } else {
      sb.append(this.modify_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("csvid:");
    sb.append(this.csvid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChinaStocksVaneStandardSchemeFactory implements SchemeFactory {
    public ChinaStocksVaneStandardScheme getScheme() {
      return new ChinaStocksVaneStandardScheme();
    }
  }

  private static class ChinaStocksVaneStandardScheme extends StandardScheme<ChinaStocksVane> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChinaStocksVane struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trading_day = iprot.readString();
              struct.setTrading_dayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QK_INDEX_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.qk_index_level = iprot.readI32();
              struct.setQk_index_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QK_INDEX_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qk_index_text = iprot.readString();
              struct.setQk_index_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QK_INDEX_LEVEL_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qk_index_level_text = iprot.readString();
              struct.setQk_index_level_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QK_INDEX_FREE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.qk_index_free_level = iprot.readI32();
              struct.setQk_index_free_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QK_INDEX_FREE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qk_index_free_text = iprot.readString();
              struct.setQk_index_free_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QK_INDEX_FREE_LEVEL_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qk_index_free_level_text = iprot.readString();
              struct.setQk_index_free_level_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QK50_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qk50_text = iprot.readString();
              struct.setQk50_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // QK_AD_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qkAD_text = iprot.readString();
              struct.setQkAD_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EMOTION_INDEX_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emotion_index_text = iprot.readString();
              struct.setEmotion_index_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EMOTION_INDEX_FREE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emotion_index_free_text = iprot.readString();
              struct.setEmotion_index_free_textIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAIN_CAPITAL_UNSCRAMBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.main_capital_unscramble = iprot.readString();
              struct.setMain_capital_unscrambleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAIN_CAPITAL_FREE_UNSCRAMBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.main_capital_free_unscramble = iprot.readString();
              struct.setMain_capital_free_unscrambleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EMOTION_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emotion_data = iprot.readString();
              struct.setEmotion_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EMOTION_FREE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.emotion_free_data = iprot.readString();
              struct.setEmotion_free_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BUY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buy_status = iprot.readI32();
              struct.setBuy_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creator = iprot.readString();
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_time = iprot.readString();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MODIFY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modify_time = iprot.readString();
              struct.setModify_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CSVID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.csvid = iprot.readI32();
              struct.setCsvidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChinaStocksVane struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.trading_day != null) {
        oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
        oprot.writeString(struct.trading_day);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QK_INDEX_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.qk_index_level);
      oprot.writeFieldEnd();
      if (struct.qk_index_text != null) {
        oprot.writeFieldBegin(QK_INDEX_TEXT_FIELD_DESC);
        oprot.writeString(struct.qk_index_text);
        oprot.writeFieldEnd();
      }
      if (struct.qk_index_level_text != null) {
        oprot.writeFieldBegin(QK_INDEX_LEVEL_TEXT_FIELD_DESC);
        oprot.writeString(struct.qk_index_level_text);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QK_INDEX_FREE_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.qk_index_free_level);
      oprot.writeFieldEnd();
      if (struct.qk_index_free_text != null) {
        oprot.writeFieldBegin(QK_INDEX_FREE_TEXT_FIELD_DESC);
        oprot.writeString(struct.qk_index_free_text);
        oprot.writeFieldEnd();
      }
      if (struct.qk_index_free_level_text != null) {
        oprot.writeFieldBegin(QK_INDEX_FREE_LEVEL_TEXT_FIELD_DESC);
        oprot.writeString(struct.qk_index_free_level_text);
        oprot.writeFieldEnd();
      }
      if (struct.qk50_text != null) {
        oprot.writeFieldBegin(QK50_TEXT_FIELD_DESC);
        oprot.writeString(struct.qk50_text);
        oprot.writeFieldEnd();
      }
      if (struct.qkAD_text != null) {
        oprot.writeFieldBegin(QK_AD_TEXT_FIELD_DESC);
        oprot.writeString(struct.qkAD_text);
        oprot.writeFieldEnd();
      }
      if (struct.emotion_index_text != null) {
        oprot.writeFieldBegin(EMOTION_INDEX_TEXT_FIELD_DESC);
        oprot.writeString(struct.emotion_index_text);
        oprot.writeFieldEnd();
      }
      if (struct.emotion_index_free_text != null) {
        oprot.writeFieldBegin(EMOTION_INDEX_FREE_TEXT_FIELD_DESC);
        oprot.writeString(struct.emotion_index_free_text);
        oprot.writeFieldEnd();
      }
      if (struct.main_capital_unscramble != null) {
        oprot.writeFieldBegin(MAIN_CAPITAL_UNSCRAMBLE_FIELD_DESC);
        oprot.writeString(struct.main_capital_unscramble);
        oprot.writeFieldEnd();
      }
      if (struct.main_capital_free_unscramble != null) {
        oprot.writeFieldBegin(MAIN_CAPITAL_FREE_UNSCRAMBLE_FIELD_DESC);
        oprot.writeString(struct.main_capital_free_unscramble);
        oprot.writeFieldEnd();
      }
      if (struct.emotion_data != null) {
        oprot.writeFieldBegin(EMOTION_DATA_FIELD_DESC);
        oprot.writeString(struct.emotion_data);
        oprot.writeFieldEnd();
      }
      if (struct.emotion_free_data != null) {
        oprot.writeFieldBegin(EMOTION_FREE_DATA_FIELD_DESC);
        oprot.writeString(struct.emotion_free_data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.buy_status);
      oprot.writeFieldEnd();
      if (struct.creator != null) {
        oprot.writeFieldBegin(CREATOR_FIELD_DESC);
        oprot.writeString(struct.creator);
        oprot.writeFieldEnd();
      }
      if (struct.create_time != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.modify_time != null) {
        oprot.writeFieldBegin(MODIFY_TIME_FIELD_DESC);
        oprot.writeString(struct.modify_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CSVID_FIELD_DESC);
      oprot.writeI32(struct.csvid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChinaStocksVaneTupleSchemeFactory implements SchemeFactory {
    public ChinaStocksVaneTupleScheme getScheme() {
      return new ChinaStocksVaneTupleScheme();
    }
  }

  private static class ChinaStocksVaneTupleScheme extends TupleScheme<ChinaStocksVane> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChinaStocksVane struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTrading_day()) {
        optionals.set(0);
      }
      if (struct.isSetQk_index_level()) {
        optionals.set(1);
      }
      if (struct.isSetQk_index_text()) {
        optionals.set(2);
      }
      if (struct.isSetQk_index_level_text()) {
        optionals.set(3);
      }
      if (struct.isSetQk_index_free_level()) {
        optionals.set(4);
      }
      if (struct.isSetQk_index_free_text()) {
        optionals.set(5);
      }
      if (struct.isSetQk_index_free_level_text()) {
        optionals.set(6);
      }
      if (struct.isSetQk50_text()) {
        optionals.set(7);
      }
      if (struct.isSetQkAD_text()) {
        optionals.set(8);
      }
      if (struct.isSetEmotion_index_text()) {
        optionals.set(9);
      }
      if (struct.isSetEmotion_index_free_text()) {
        optionals.set(10);
      }
      if (struct.isSetMain_capital_unscramble()) {
        optionals.set(11);
      }
      if (struct.isSetMain_capital_free_unscramble()) {
        optionals.set(12);
      }
      if (struct.isSetEmotion_data()) {
        optionals.set(13);
      }
      if (struct.isSetEmotion_free_data()) {
        optionals.set(14);
      }
      if (struct.isSetBuy_status()) {
        optionals.set(15);
      }
      if (struct.isSetCreator()) {
        optionals.set(16);
      }
      if (struct.isSetCreate_time()) {
        optionals.set(17);
      }
      if (struct.isSetModify_time()) {
        optionals.set(18);
      }
      if (struct.isSetCsvid()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetTrading_day()) {
        oprot.writeString(struct.trading_day);
      }
      if (struct.isSetQk_index_level()) {
        oprot.writeI32(struct.qk_index_level);
      }
      if (struct.isSetQk_index_text()) {
        oprot.writeString(struct.qk_index_text);
      }
      if (struct.isSetQk_index_level_text()) {
        oprot.writeString(struct.qk_index_level_text);
      }
      if (struct.isSetQk_index_free_level()) {
        oprot.writeI32(struct.qk_index_free_level);
      }
      if (struct.isSetQk_index_free_text()) {
        oprot.writeString(struct.qk_index_free_text);
      }
      if (struct.isSetQk_index_free_level_text()) {
        oprot.writeString(struct.qk_index_free_level_text);
      }
      if (struct.isSetQk50_text()) {
        oprot.writeString(struct.qk50_text);
      }
      if (struct.isSetQkAD_text()) {
        oprot.writeString(struct.qkAD_text);
      }
      if (struct.isSetEmotion_index_text()) {
        oprot.writeString(struct.emotion_index_text);
      }
      if (struct.isSetEmotion_index_free_text()) {
        oprot.writeString(struct.emotion_index_free_text);
      }
      if (struct.isSetMain_capital_unscramble()) {
        oprot.writeString(struct.main_capital_unscramble);
      }
      if (struct.isSetMain_capital_free_unscramble()) {
        oprot.writeString(struct.main_capital_free_unscramble);
      }
      if (struct.isSetEmotion_data()) {
        oprot.writeString(struct.emotion_data);
      }
      if (struct.isSetEmotion_free_data()) {
        oprot.writeString(struct.emotion_free_data);
      }
      if (struct.isSetBuy_status()) {
        oprot.writeI32(struct.buy_status);
      }
      if (struct.isSetCreator()) {
        oprot.writeString(struct.creator);
      }
      if (struct.isSetCreate_time()) {
        oprot.writeString(struct.create_time);
      }
      if (struct.isSetModify_time()) {
        oprot.writeString(struct.modify_time);
      }
      if (struct.isSetCsvid()) {
        oprot.writeI32(struct.csvid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChinaStocksVane struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.trading_day = iprot.readString();
        struct.setTrading_dayIsSet(true);
      }
      if (incoming.get(1)) {
        struct.qk_index_level = iprot.readI32();
        struct.setQk_index_levelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.qk_index_text = iprot.readString();
        struct.setQk_index_textIsSet(true);
      }
      if (incoming.get(3)) {
        struct.qk_index_level_text = iprot.readString();
        struct.setQk_index_level_textIsSet(true);
      }
      if (incoming.get(4)) {
        struct.qk_index_free_level = iprot.readI32();
        struct.setQk_index_free_levelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.qk_index_free_text = iprot.readString();
        struct.setQk_index_free_textIsSet(true);
      }
      if (incoming.get(6)) {
        struct.qk_index_free_level_text = iprot.readString();
        struct.setQk_index_free_level_textIsSet(true);
      }
      if (incoming.get(7)) {
        struct.qk50_text = iprot.readString();
        struct.setQk50_textIsSet(true);
      }
      if (incoming.get(8)) {
        struct.qkAD_text = iprot.readString();
        struct.setQkAD_textIsSet(true);
      }
      if (incoming.get(9)) {
        struct.emotion_index_text = iprot.readString();
        struct.setEmotion_index_textIsSet(true);
      }
      if (incoming.get(10)) {
        struct.emotion_index_free_text = iprot.readString();
        struct.setEmotion_index_free_textIsSet(true);
      }
      if (incoming.get(11)) {
        struct.main_capital_unscramble = iprot.readString();
        struct.setMain_capital_unscrambleIsSet(true);
      }
      if (incoming.get(12)) {
        struct.main_capital_free_unscramble = iprot.readString();
        struct.setMain_capital_free_unscrambleIsSet(true);
      }
      if (incoming.get(13)) {
        struct.emotion_data = iprot.readString();
        struct.setEmotion_dataIsSet(true);
      }
      if (incoming.get(14)) {
        struct.emotion_free_data = iprot.readString();
        struct.setEmotion_free_dataIsSet(true);
      }
      if (incoming.get(15)) {
        struct.buy_status = iprot.readI32();
        struct.setBuy_statusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.creator = iprot.readString();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(17)) {
        struct.create_time = iprot.readString();
        struct.setCreate_timeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.modify_time = iprot.readString();
        struct.setModify_timeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.csvid = iprot.readI32();
        struct.setCsvidIsSet(true);
      }
    }
  }

}

