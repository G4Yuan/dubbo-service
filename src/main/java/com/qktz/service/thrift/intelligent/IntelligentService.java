/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qktz.service.thrift.intelligent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IntelligentService {

  public interface Iface {

    public String findMainCapital(String reqId, int buy_status) throws BusinessException, org.apache.thrift.TException;

    public boolean insertCSVane(String reqId, ChinaStocksVane csVane) throws BusinessException, org.apache.thrift.TException;

    public String findCSVane(String reqId, int buy_status) throws BusinessException, org.apache.thrift.TException;

    public String findCSVaneByID(String reqId, int csvane_id) throws BusinessException, org.apache.thrift.TException;

    public boolean updateCSVane(String reqId, ChinaStocksVane csVane) throws BusinessException, org.apache.thrift.TException;

    public CSVanePager findCSVanePage(String reqId, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException;

    public void addPortfolio(String reqId, PortfolioInfo portfolioInfo) throws BusinessException, org.apache.thrift.TException;

    public PortfolioPager findPortfolioPage(String reqId, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException;

    public PortfolioPager findPortfolioByTitle(String reqId, String name, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException;

    public PortfolioPager findPortfolioByTime(String reqId, String createdAt, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException;

    public PortfolioPager findPortfolioByStatus(String reqId, int status, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException;

    public PortfolioPager findPortfolioByCategories(String reqId, String categories, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException;

    public PortfolioInfo findPortfolioByAccountID(String reqId, String account_id) throws BusinessException, org.apache.thrift.TException;

    public PortfolioInfo findPortfolioByID(String reqId, int id) throws BusinessException, org.apache.thrift.TException;

    public boolean updatePortfolioByID(String reqId, PortfolioInfo portfolioInfo) throws BusinessException, org.apache.thrift.TException;

    public boolean updatePortfolioByAdviser(String reqId, String user_object_id, int portfolio_id) throws BusinessException, org.apache.thrift.TException;

    public AppPager findAppPagerSimple(String reqId, String isFree, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException;

    public String findAppPagerSpec(String reqId, String isFree, int portfolio_id) throws BusinessException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findMainCapital(String reqId, int buy_status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findMainCapital_call> resultHandler) throws org.apache.thrift.TException;

    public void insertCSVane(String reqId, ChinaStocksVane csVane, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.insertCSVane_call> resultHandler) throws org.apache.thrift.TException;

    public void findCSVane(String reqId, int buy_status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findCSVane_call> resultHandler) throws org.apache.thrift.TException;

    public void findCSVaneByID(String reqId, int csvane_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findCSVaneByID_call> resultHandler) throws org.apache.thrift.TException;

    public void updateCSVane(String reqId, ChinaStocksVane csVane, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateCSVane_call> resultHandler) throws org.apache.thrift.TException;

    public void findCSVanePage(String reqId, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findCSVanePage_call> resultHandler) throws org.apache.thrift.TException;

    public void addPortfolio(String reqId, PortfolioInfo portfolioInfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addPortfolio_call> resultHandler) throws org.apache.thrift.TException;

    public void findPortfolioPage(String reqId, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPortfolioPage_call> resultHandler) throws org.apache.thrift.TException;

    public void findPortfolioByTitle(String reqId, String name, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPortfolioByTitle_call> resultHandler) throws org.apache.thrift.TException;

    public void findPortfolioByTime(String reqId, String createdAt, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPortfolioByTime_call> resultHandler) throws org.apache.thrift.TException;

    public void findPortfolioByStatus(String reqId, int status, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPortfolioByStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void findPortfolioByCategories(String reqId, String categories, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPortfolioByCategories_call> resultHandler) throws org.apache.thrift.TException;

    public void findPortfolioByAccountID(String reqId, String account_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPortfolioByAccountID_call> resultHandler) throws org.apache.thrift.TException;

    public void findPortfolioByID(String reqId, int id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findPortfolioByID_call> resultHandler) throws org.apache.thrift.TException;

    public void updatePortfolioByID(String reqId, PortfolioInfo portfolioInfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updatePortfolioByID_call> resultHandler) throws org.apache.thrift.TException;

    public void updatePortfolioByAdviser(String reqId, String user_object_id, int portfolio_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updatePortfolioByAdviser_call> resultHandler) throws org.apache.thrift.TException;

    public void findAppPagerSimple(String reqId, String isFree, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAppPagerSimple_call> resultHandler) throws org.apache.thrift.TException;

    public void findAppPagerSpec(String reqId, String isFree, int portfolio_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.findAppPagerSpec_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String findMainCapital(String reqId, int buy_status) throws BusinessException, org.apache.thrift.TException
    {
      send_findMainCapital(reqId, buy_status);
      return recv_findMainCapital();
    }

    public void send_findMainCapital(String reqId, int buy_status) throws org.apache.thrift.TException
    {
      findMainCapital_args args = new findMainCapital_args();
      args.setReqId(reqId);
      args.setBuy_status(buy_status);
      sendBase("findMainCapital", args);
    }

    public String recv_findMainCapital() throws BusinessException, org.apache.thrift.TException
    {
      findMainCapital_result result = new findMainCapital_result();
      receiveBase(result, "findMainCapital");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMainCapital failed: unknown result");
    }

    public boolean insertCSVane(String reqId, ChinaStocksVane csVane) throws BusinessException, org.apache.thrift.TException
    {
      send_insertCSVane(reqId, csVane);
      return recv_insertCSVane();
    }

    public void send_insertCSVane(String reqId, ChinaStocksVane csVane) throws org.apache.thrift.TException
    {
      insertCSVane_args args = new insertCSVane_args();
      args.setReqId(reqId);
      args.setCsVane(csVane);
      sendBase("insertCSVane", args);
    }

    public boolean recv_insertCSVane() throws BusinessException, org.apache.thrift.TException
    {
      insertCSVane_result result = new insertCSVane_result();
      receiveBase(result, "insertCSVane");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertCSVane failed: unknown result");
    }

    public String findCSVane(String reqId, int buy_status) throws BusinessException, org.apache.thrift.TException
    {
      send_findCSVane(reqId, buy_status);
      return recv_findCSVane();
    }

    public void send_findCSVane(String reqId, int buy_status) throws org.apache.thrift.TException
    {
      findCSVane_args args = new findCSVane_args();
      args.setReqId(reqId);
      args.setBuy_status(buy_status);
      sendBase("findCSVane", args);
    }

    public String recv_findCSVane() throws BusinessException, org.apache.thrift.TException
    {
      findCSVane_result result = new findCSVane_result();
      receiveBase(result, "findCSVane");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCSVane failed: unknown result");
    }

    public String findCSVaneByID(String reqId, int csvane_id) throws BusinessException, org.apache.thrift.TException
    {
      send_findCSVaneByID(reqId, csvane_id);
      return recv_findCSVaneByID();
    }

    public void send_findCSVaneByID(String reqId, int csvane_id) throws org.apache.thrift.TException
    {
      findCSVaneByID_args args = new findCSVaneByID_args();
      args.setReqId(reqId);
      args.setCsvane_id(csvane_id);
      sendBase("findCSVaneByID", args);
    }

    public String recv_findCSVaneByID() throws BusinessException, org.apache.thrift.TException
    {
      findCSVaneByID_result result = new findCSVaneByID_result();
      receiveBase(result, "findCSVaneByID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCSVaneByID failed: unknown result");
    }

    public boolean updateCSVane(String reqId, ChinaStocksVane csVane) throws BusinessException, org.apache.thrift.TException
    {
      send_updateCSVane(reqId, csVane);
      return recv_updateCSVane();
    }

    public void send_updateCSVane(String reqId, ChinaStocksVane csVane) throws org.apache.thrift.TException
    {
      updateCSVane_args args = new updateCSVane_args();
      args.setReqId(reqId);
      args.setCsVane(csVane);
      sendBase("updateCSVane", args);
    }

    public boolean recv_updateCSVane() throws BusinessException, org.apache.thrift.TException
    {
      updateCSVane_result result = new updateCSVane_result();
      receiveBase(result, "updateCSVane");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCSVane failed: unknown result");
    }

    public CSVanePager findCSVanePage(String reqId, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException
    {
      send_findCSVanePage(reqId, pageNow, pageSize);
      return recv_findCSVanePage();
    }

    public void send_findCSVanePage(String reqId, int pageNow, int pageSize) throws org.apache.thrift.TException
    {
      findCSVanePage_args args = new findCSVanePage_args();
      args.setReqId(reqId);
      args.setPageNow(pageNow);
      args.setPageSize(pageSize);
      sendBase("findCSVanePage", args);
    }

    public CSVanePager recv_findCSVanePage() throws BusinessException, org.apache.thrift.TException
    {
      findCSVanePage_result result = new findCSVanePage_result();
      receiveBase(result, "findCSVanePage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCSVanePage failed: unknown result");
    }

    public void addPortfolio(String reqId, PortfolioInfo portfolioInfo) throws BusinessException, org.apache.thrift.TException
    {
      send_addPortfolio(reqId, portfolioInfo);
      recv_addPortfolio();
    }

    public void send_addPortfolio(String reqId, PortfolioInfo portfolioInfo) throws org.apache.thrift.TException
    {
      addPortfolio_args args = new addPortfolio_args();
      args.setReqId(reqId);
      args.setPortfolioInfo(portfolioInfo);
      sendBase("addPortfolio", args);
    }

    public void recv_addPortfolio() throws BusinessException, org.apache.thrift.TException
    {
      addPortfolio_result result = new addPortfolio_result();
      receiveBase(result, "addPortfolio");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public PortfolioPager findPortfolioPage(String reqId, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException
    {
      send_findPortfolioPage(reqId, pageNow, pageSize);
      return recv_findPortfolioPage();
    }

    public void send_findPortfolioPage(String reqId, int pageNow, int pageSize) throws org.apache.thrift.TException
    {
      findPortfolioPage_args args = new findPortfolioPage_args();
      args.setReqId(reqId);
      args.setPageNow(pageNow);
      args.setPageSize(pageSize);
      sendBase("findPortfolioPage", args);
    }

    public PortfolioPager recv_findPortfolioPage() throws BusinessException, org.apache.thrift.TException
    {
      findPortfolioPage_result result = new findPortfolioPage_result();
      receiveBase(result, "findPortfolioPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPortfolioPage failed: unknown result");
    }

    public PortfolioPager findPortfolioByTitle(String reqId, String name, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException
    {
      send_findPortfolioByTitle(reqId, name, pageNow, pageSize);
      return recv_findPortfolioByTitle();
    }

    public void send_findPortfolioByTitle(String reqId, String name, int pageNow, int pageSize) throws org.apache.thrift.TException
    {
      findPortfolioByTitle_args args = new findPortfolioByTitle_args();
      args.setReqId(reqId);
      args.setName(name);
      args.setPageNow(pageNow);
      args.setPageSize(pageSize);
      sendBase("findPortfolioByTitle", args);
    }

    public PortfolioPager recv_findPortfolioByTitle() throws BusinessException, org.apache.thrift.TException
    {
      findPortfolioByTitle_result result = new findPortfolioByTitle_result();
      receiveBase(result, "findPortfolioByTitle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPortfolioByTitle failed: unknown result");
    }

    public PortfolioPager findPortfolioByTime(String reqId, String createdAt, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException
    {
      send_findPortfolioByTime(reqId, createdAt, pageNow, pageSize);
      return recv_findPortfolioByTime();
    }

    public void send_findPortfolioByTime(String reqId, String createdAt, int pageNow, int pageSize) throws org.apache.thrift.TException
    {
      findPortfolioByTime_args args = new findPortfolioByTime_args();
      args.setReqId(reqId);
      args.setCreatedAt(createdAt);
      args.setPageNow(pageNow);
      args.setPageSize(pageSize);
      sendBase("findPortfolioByTime", args);
    }

    public PortfolioPager recv_findPortfolioByTime() throws BusinessException, org.apache.thrift.TException
    {
      findPortfolioByTime_result result = new findPortfolioByTime_result();
      receiveBase(result, "findPortfolioByTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPortfolioByTime failed: unknown result");
    }

    public PortfolioPager findPortfolioByStatus(String reqId, int status, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException
    {
      send_findPortfolioByStatus(reqId, status, pageNow, pageSize);
      return recv_findPortfolioByStatus();
    }

    public void send_findPortfolioByStatus(String reqId, int status, int pageNow, int pageSize) throws org.apache.thrift.TException
    {
      findPortfolioByStatus_args args = new findPortfolioByStatus_args();
      args.setReqId(reqId);
      args.setStatus(status);
      args.setPageNow(pageNow);
      args.setPageSize(pageSize);
      sendBase("findPortfolioByStatus", args);
    }

    public PortfolioPager recv_findPortfolioByStatus() throws BusinessException, org.apache.thrift.TException
    {
      findPortfolioByStatus_result result = new findPortfolioByStatus_result();
      receiveBase(result, "findPortfolioByStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPortfolioByStatus failed: unknown result");
    }

    public PortfolioPager findPortfolioByCategories(String reqId, String categories, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException
    {
      send_findPortfolioByCategories(reqId, categories, pageNow, pageSize);
      return recv_findPortfolioByCategories();
    }

    public void send_findPortfolioByCategories(String reqId, String categories, int pageNow, int pageSize) throws org.apache.thrift.TException
    {
      findPortfolioByCategories_args args = new findPortfolioByCategories_args();
      args.setReqId(reqId);
      args.setCategories(categories);
      args.setPageNow(pageNow);
      args.setPageSize(pageSize);
      sendBase("findPortfolioByCategories", args);
    }

    public PortfolioPager recv_findPortfolioByCategories() throws BusinessException, org.apache.thrift.TException
    {
      findPortfolioByCategories_result result = new findPortfolioByCategories_result();
      receiveBase(result, "findPortfolioByCategories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPortfolioByCategories failed: unknown result");
    }

    public PortfolioInfo findPortfolioByAccountID(String reqId, String account_id) throws BusinessException, org.apache.thrift.TException
    {
      send_findPortfolioByAccountID(reqId, account_id);
      return recv_findPortfolioByAccountID();
    }

    public void send_findPortfolioByAccountID(String reqId, String account_id) throws org.apache.thrift.TException
    {
      findPortfolioByAccountID_args args = new findPortfolioByAccountID_args();
      args.setReqId(reqId);
      args.setAccount_id(account_id);
      sendBase("findPortfolioByAccountID", args);
    }

    public PortfolioInfo recv_findPortfolioByAccountID() throws BusinessException, org.apache.thrift.TException
    {
      findPortfolioByAccountID_result result = new findPortfolioByAccountID_result();
      receiveBase(result, "findPortfolioByAccountID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPortfolioByAccountID failed: unknown result");
    }

    public PortfolioInfo findPortfolioByID(String reqId, int id) throws BusinessException, org.apache.thrift.TException
    {
      send_findPortfolioByID(reqId, id);
      return recv_findPortfolioByID();
    }

    public void send_findPortfolioByID(String reqId, int id) throws org.apache.thrift.TException
    {
      findPortfolioByID_args args = new findPortfolioByID_args();
      args.setReqId(reqId);
      args.setId(id);
      sendBase("findPortfolioByID", args);
    }

    public PortfolioInfo recv_findPortfolioByID() throws BusinessException, org.apache.thrift.TException
    {
      findPortfolioByID_result result = new findPortfolioByID_result();
      receiveBase(result, "findPortfolioByID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPortfolioByID failed: unknown result");
    }

    public boolean updatePortfolioByID(String reqId, PortfolioInfo portfolioInfo) throws BusinessException, org.apache.thrift.TException
    {
      send_updatePortfolioByID(reqId, portfolioInfo);
      return recv_updatePortfolioByID();
    }

    public void send_updatePortfolioByID(String reqId, PortfolioInfo portfolioInfo) throws org.apache.thrift.TException
    {
      updatePortfolioByID_args args = new updatePortfolioByID_args();
      args.setReqId(reqId);
      args.setPortfolioInfo(portfolioInfo);
      sendBase("updatePortfolioByID", args);
    }

    public boolean recv_updatePortfolioByID() throws BusinessException, org.apache.thrift.TException
    {
      updatePortfolioByID_result result = new updatePortfolioByID_result();
      receiveBase(result, "updatePortfolioByID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePortfolioByID failed: unknown result");
    }

    public boolean updatePortfolioByAdviser(String reqId, String user_object_id, int portfolio_id) throws BusinessException, org.apache.thrift.TException
    {
      send_updatePortfolioByAdviser(reqId, user_object_id, portfolio_id);
      return recv_updatePortfolioByAdviser();
    }

    public void send_updatePortfolioByAdviser(String reqId, String user_object_id, int portfolio_id) throws org.apache.thrift.TException
    {
      updatePortfolioByAdviser_args args = new updatePortfolioByAdviser_args();
      args.setReqId(reqId);
      args.setUser_object_id(user_object_id);
      args.setPortfolio_id(portfolio_id);
      sendBase("updatePortfolioByAdviser", args);
    }

    public boolean recv_updatePortfolioByAdviser() throws BusinessException, org.apache.thrift.TException
    {
      updatePortfolioByAdviser_result result = new updatePortfolioByAdviser_result();
      receiveBase(result, "updatePortfolioByAdviser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePortfolioByAdviser failed: unknown result");
    }

    public AppPager findAppPagerSimple(String reqId, String isFree, int pageNow, int pageSize) throws BusinessException, org.apache.thrift.TException
    {
      send_findAppPagerSimple(reqId, isFree, pageNow, pageSize);
      return recv_findAppPagerSimple();
    }

    public void send_findAppPagerSimple(String reqId, String isFree, int pageNow, int pageSize) throws org.apache.thrift.TException
    {
      findAppPagerSimple_args args = new findAppPagerSimple_args();
      args.setReqId(reqId);
      args.setIsFree(isFree);
      args.setPageNow(pageNow);
      args.setPageSize(pageSize);
      sendBase("findAppPagerSimple", args);
    }

    public AppPager recv_findAppPagerSimple() throws BusinessException, org.apache.thrift.TException
    {
      findAppPagerSimple_result result = new findAppPagerSimple_result();
      receiveBase(result, "findAppPagerSimple");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAppPagerSimple failed: unknown result");
    }

    public String findAppPagerSpec(String reqId, String isFree, int portfolio_id) throws BusinessException, org.apache.thrift.TException
    {
      send_findAppPagerSpec(reqId, isFree, portfolio_id);
      return recv_findAppPagerSpec();
    }

    public void send_findAppPagerSpec(String reqId, String isFree, int portfolio_id) throws org.apache.thrift.TException
    {
      findAppPagerSpec_args args = new findAppPagerSpec_args();
      args.setReqId(reqId);
      args.setIsFree(isFree);
      args.setPortfolio_id(portfolio_id);
      sendBase("findAppPagerSpec", args);
    }

    public String recv_findAppPagerSpec() throws BusinessException, org.apache.thrift.TException
    {
      findAppPagerSpec_result result = new findAppPagerSpec_result();
      receiveBase(result, "findAppPagerSpec");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAppPagerSpec failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findMainCapital(String reqId, int buy_status, org.apache.thrift.async.AsyncMethodCallback<findMainCapital_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMainCapital_call method_call = new findMainCapital_call(reqId, buy_status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMainCapital_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private int buy_status;
      public findMainCapital_call(String reqId, int buy_status, org.apache.thrift.async.AsyncMethodCallback<findMainCapital_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.buy_status = buy_status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMainCapital", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMainCapital_args args = new findMainCapital_args();
        args.setReqId(reqId);
        args.setBuy_status(buy_status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMainCapital();
      }
    }

    public void insertCSVane(String reqId, ChinaStocksVane csVane, org.apache.thrift.async.AsyncMethodCallback<insertCSVane_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertCSVane_call method_call = new insertCSVane_call(reqId, csVane, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertCSVane_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private ChinaStocksVane csVane;
      public insertCSVane_call(String reqId, ChinaStocksVane csVane, org.apache.thrift.async.AsyncMethodCallback<insertCSVane_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.csVane = csVane;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertCSVane", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertCSVane_args args = new insertCSVane_args();
        args.setReqId(reqId);
        args.setCsVane(csVane);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertCSVane();
      }
    }

    public void findCSVane(String reqId, int buy_status, org.apache.thrift.async.AsyncMethodCallback<findCSVane_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCSVane_call method_call = new findCSVane_call(reqId, buy_status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCSVane_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private int buy_status;
      public findCSVane_call(String reqId, int buy_status, org.apache.thrift.async.AsyncMethodCallback<findCSVane_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.buy_status = buy_status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCSVane", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCSVane_args args = new findCSVane_args();
        args.setReqId(reqId);
        args.setBuy_status(buy_status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCSVane();
      }
    }

    public void findCSVaneByID(String reqId, int csvane_id, org.apache.thrift.async.AsyncMethodCallback<findCSVaneByID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCSVaneByID_call method_call = new findCSVaneByID_call(reqId, csvane_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCSVaneByID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private int csvane_id;
      public findCSVaneByID_call(String reqId, int csvane_id, org.apache.thrift.async.AsyncMethodCallback<findCSVaneByID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.csvane_id = csvane_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCSVaneByID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCSVaneByID_args args = new findCSVaneByID_args();
        args.setReqId(reqId);
        args.setCsvane_id(csvane_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCSVaneByID();
      }
    }

    public void updateCSVane(String reqId, ChinaStocksVane csVane, org.apache.thrift.async.AsyncMethodCallback<updateCSVane_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCSVane_call method_call = new updateCSVane_call(reqId, csVane, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCSVane_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private ChinaStocksVane csVane;
      public updateCSVane_call(String reqId, ChinaStocksVane csVane, org.apache.thrift.async.AsyncMethodCallback<updateCSVane_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.csVane = csVane;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCSVane", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCSVane_args args = new updateCSVane_args();
        args.setReqId(reqId);
        args.setCsVane(csVane);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCSVane();
      }
    }

    public void findCSVanePage(String reqId, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findCSVanePage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCSVanePage_call method_call = new findCSVanePage_call(reqId, pageNow, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCSVanePage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private int pageNow;
      private int pageSize;
      public findCSVanePage_call(String reqId, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findCSVanePage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.pageNow = pageNow;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCSVanePage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCSVanePage_args args = new findCSVanePage_args();
        args.setReqId(reqId);
        args.setPageNow(pageNow);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CSVanePager getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCSVanePage();
      }
    }

    public void addPortfolio(String reqId, PortfolioInfo portfolioInfo, org.apache.thrift.async.AsyncMethodCallback<addPortfolio_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPortfolio_call method_call = new addPortfolio_call(reqId, portfolioInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPortfolio_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private PortfolioInfo portfolioInfo;
      public addPortfolio_call(String reqId, PortfolioInfo portfolioInfo, org.apache.thrift.async.AsyncMethodCallback<addPortfolio_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.portfolioInfo = portfolioInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPortfolio", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPortfolio_args args = new addPortfolio_args();
        args.setReqId(reqId);
        args.setPortfolioInfo(portfolioInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addPortfolio();
      }
    }

    public void findPortfolioPage(String reqId, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioPage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPortfolioPage_call method_call = new findPortfolioPage_call(reqId, pageNow, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPortfolioPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private int pageNow;
      private int pageSize;
      public findPortfolioPage_call(String reqId, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioPage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.pageNow = pageNow;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPortfolioPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPortfolioPage_args args = new findPortfolioPage_args();
        args.setReqId(reqId);
        args.setPageNow(pageNow);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PortfolioPager getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPortfolioPage();
      }
    }

    public void findPortfolioByTitle(String reqId, String name, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByTitle_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPortfolioByTitle_call method_call = new findPortfolioByTitle_call(reqId, name, pageNow, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPortfolioByTitle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private String name;
      private int pageNow;
      private int pageSize;
      public findPortfolioByTitle_call(String reqId, String name, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByTitle_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.name = name;
        this.pageNow = pageNow;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPortfolioByTitle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPortfolioByTitle_args args = new findPortfolioByTitle_args();
        args.setReqId(reqId);
        args.setName(name);
        args.setPageNow(pageNow);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PortfolioPager getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPortfolioByTitle();
      }
    }

    public void findPortfolioByTime(String reqId, String createdAt, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByTime_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPortfolioByTime_call method_call = new findPortfolioByTime_call(reqId, createdAt, pageNow, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPortfolioByTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private String createdAt;
      private int pageNow;
      private int pageSize;
      public findPortfolioByTime_call(String reqId, String createdAt, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByTime_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.createdAt = createdAt;
        this.pageNow = pageNow;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPortfolioByTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPortfolioByTime_args args = new findPortfolioByTime_args();
        args.setReqId(reqId);
        args.setCreatedAt(createdAt);
        args.setPageNow(pageNow);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PortfolioPager getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPortfolioByTime();
      }
    }

    public void findPortfolioByStatus(String reqId, int status, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPortfolioByStatus_call method_call = new findPortfolioByStatus_call(reqId, status, pageNow, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPortfolioByStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private int status;
      private int pageNow;
      private int pageSize;
      public findPortfolioByStatus_call(String reqId, int status, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.status = status;
        this.pageNow = pageNow;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPortfolioByStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPortfolioByStatus_args args = new findPortfolioByStatus_args();
        args.setReqId(reqId);
        args.setStatus(status);
        args.setPageNow(pageNow);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PortfolioPager getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPortfolioByStatus();
      }
    }

    public void findPortfolioByCategories(String reqId, String categories, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByCategories_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPortfolioByCategories_call method_call = new findPortfolioByCategories_call(reqId, categories, pageNow, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPortfolioByCategories_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private String categories;
      private int pageNow;
      private int pageSize;
      public findPortfolioByCategories_call(String reqId, String categories, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByCategories_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.categories = categories;
        this.pageNow = pageNow;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPortfolioByCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPortfolioByCategories_args args = new findPortfolioByCategories_args();
        args.setReqId(reqId);
        args.setCategories(categories);
        args.setPageNow(pageNow);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PortfolioPager getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPortfolioByCategories();
      }
    }

    public void findPortfolioByAccountID(String reqId, String account_id, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByAccountID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPortfolioByAccountID_call method_call = new findPortfolioByAccountID_call(reqId, account_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPortfolioByAccountID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private String account_id;
      public findPortfolioByAccountID_call(String reqId, String account_id, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByAccountID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.account_id = account_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPortfolioByAccountID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPortfolioByAccountID_args args = new findPortfolioByAccountID_args();
        args.setReqId(reqId);
        args.setAccount_id(account_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PortfolioInfo getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPortfolioByAccountID();
      }
    }

    public void findPortfolioByID(String reqId, int id, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPortfolioByID_call method_call = new findPortfolioByID_call(reqId, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPortfolioByID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private int id;
      public findPortfolioByID_call(String reqId, int id, org.apache.thrift.async.AsyncMethodCallback<findPortfolioByID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPortfolioByID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPortfolioByID_args args = new findPortfolioByID_args();
        args.setReqId(reqId);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PortfolioInfo getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPortfolioByID();
      }
    }

    public void updatePortfolioByID(String reqId, PortfolioInfo portfolioInfo, org.apache.thrift.async.AsyncMethodCallback<updatePortfolioByID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePortfolioByID_call method_call = new updatePortfolioByID_call(reqId, portfolioInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePortfolioByID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private PortfolioInfo portfolioInfo;
      public updatePortfolioByID_call(String reqId, PortfolioInfo portfolioInfo, org.apache.thrift.async.AsyncMethodCallback<updatePortfolioByID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.portfolioInfo = portfolioInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePortfolioByID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePortfolioByID_args args = new updatePortfolioByID_args();
        args.setReqId(reqId);
        args.setPortfolioInfo(portfolioInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePortfolioByID();
      }
    }

    public void updatePortfolioByAdviser(String reqId, String user_object_id, int portfolio_id, org.apache.thrift.async.AsyncMethodCallback<updatePortfolioByAdviser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePortfolioByAdviser_call method_call = new updatePortfolioByAdviser_call(reqId, user_object_id, portfolio_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePortfolioByAdviser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private String user_object_id;
      private int portfolio_id;
      public updatePortfolioByAdviser_call(String reqId, String user_object_id, int portfolio_id, org.apache.thrift.async.AsyncMethodCallback<updatePortfolioByAdviser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.user_object_id = user_object_id;
        this.portfolio_id = portfolio_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePortfolioByAdviser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePortfolioByAdviser_args args = new updatePortfolioByAdviser_args();
        args.setReqId(reqId);
        args.setUser_object_id(user_object_id);
        args.setPortfolio_id(portfolio_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePortfolioByAdviser();
      }
    }

    public void findAppPagerSimple(String reqId, String isFree, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findAppPagerSimple_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAppPagerSimple_call method_call = new findAppPagerSimple_call(reqId, isFree, pageNow, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAppPagerSimple_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private String isFree;
      private int pageNow;
      private int pageSize;
      public findAppPagerSimple_call(String reqId, String isFree, int pageNow, int pageSize, org.apache.thrift.async.AsyncMethodCallback<findAppPagerSimple_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.isFree = isFree;
        this.pageNow = pageNow;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAppPagerSimple", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAppPagerSimple_args args = new findAppPagerSimple_args();
        args.setReqId(reqId);
        args.setIsFree(isFree);
        args.setPageNow(pageNow);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AppPager getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAppPagerSimple();
      }
    }

    public void findAppPagerSpec(String reqId, String isFree, int portfolio_id, org.apache.thrift.async.AsyncMethodCallback<findAppPagerSpec_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAppPagerSpec_call method_call = new findAppPagerSpec_call(reqId, isFree, portfolio_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAppPagerSpec_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String reqId;
      private String isFree;
      private int portfolio_id;
      public findAppPagerSpec_call(String reqId, String isFree, int portfolio_id, org.apache.thrift.async.AsyncMethodCallback<findAppPagerSpec_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqId = reqId;
        this.isFree = isFree;
        this.portfolio_id = portfolio_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAppPagerSpec", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAppPagerSpec_args args = new findAppPagerSpec_args();
        args.setReqId(reqId);
        args.setIsFree(isFree);
        args.setPortfolio_id(portfolio_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws BusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAppPagerSpec();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findMainCapital", new findMainCapital());
      processMap.put("insertCSVane", new insertCSVane());
      processMap.put("findCSVane", new findCSVane());
      processMap.put("findCSVaneByID", new findCSVaneByID());
      processMap.put("updateCSVane", new updateCSVane());
      processMap.put("findCSVanePage", new findCSVanePage());
      processMap.put("addPortfolio", new addPortfolio());
      processMap.put("findPortfolioPage", new findPortfolioPage());
      processMap.put("findPortfolioByTitle", new findPortfolioByTitle());
      processMap.put("findPortfolioByTime", new findPortfolioByTime());
      processMap.put("findPortfolioByStatus", new findPortfolioByStatus());
      processMap.put("findPortfolioByCategories", new findPortfolioByCategories());
      processMap.put("findPortfolioByAccountID", new findPortfolioByAccountID());
      processMap.put("findPortfolioByID", new findPortfolioByID());
      processMap.put("updatePortfolioByID", new updatePortfolioByID());
      processMap.put("updatePortfolioByAdviser", new updatePortfolioByAdviser());
      processMap.put("findAppPagerSimple", new findAppPagerSimple());
      processMap.put("findAppPagerSpec", new findAppPagerSpec());
      return processMap;
    }

    public static class findMainCapital<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMainCapital_args> {
      public findMainCapital() {
        super("findMainCapital");
      }

      public findMainCapital_args getEmptyArgsInstance() {
        return new findMainCapital_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findMainCapital_result getResult(I iface, findMainCapital_args args) throws org.apache.thrift.TException {
        findMainCapital_result result = new findMainCapital_result();
        try {
          result.success = iface.findMainCapital(args.reqId, args.buy_status);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class insertCSVane<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertCSVane_args> {
      public insertCSVane() {
        super("insertCSVane");
      }

      public insertCSVane_args getEmptyArgsInstance() {
        return new insertCSVane_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertCSVane_result getResult(I iface, insertCSVane_args args) throws org.apache.thrift.TException {
        insertCSVane_result result = new insertCSVane_result();
        try {
          result.success = iface.insertCSVane(args.reqId, args.csVane);
          result.setSuccessIsSet(true);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findCSVane<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCSVane_args> {
      public findCSVane() {
        super("findCSVane");
      }

      public findCSVane_args getEmptyArgsInstance() {
        return new findCSVane_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findCSVane_result getResult(I iface, findCSVane_args args) throws org.apache.thrift.TException {
        findCSVane_result result = new findCSVane_result();
        try {
          result.success = iface.findCSVane(args.reqId, args.buy_status);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findCSVaneByID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCSVaneByID_args> {
      public findCSVaneByID() {
        super("findCSVaneByID");
      }

      public findCSVaneByID_args getEmptyArgsInstance() {
        return new findCSVaneByID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findCSVaneByID_result getResult(I iface, findCSVaneByID_args args) throws org.apache.thrift.TException {
        findCSVaneByID_result result = new findCSVaneByID_result();
        try {
          result.success = iface.findCSVaneByID(args.reqId, args.csvane_id);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updateCSVane<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCSVane_args> {
      public updateCSVane() {
        super("updateCSVane");
      }

      public updateCSVane_args getEmptyArgsInstance() {
        return new updateCSVane_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCSVane_result getResult(I iface, updateCSVane_args args) throws org.apache.thrift.TException {
        updateCSVane_result result = new updateCSVane_result();
        try {
          result.success = iface.updateCSVane(args.reqId, args.csVane);
          result.setSuccessIsSet(true);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findCSVanePage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCSVanePage_args> {
      public findCSVanePage() {
        super("findCSVanePage");
      }

      public findCSVanePage_args getEmptyArgsInstance() {
        return new findCSVanePage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findCSVanePage_result getResult(I iface, findCSVanePage_args args) throws org.apache.thrift.TException {
        findCSVanePage_result result = new findCSVanePage_result();
        try {
          result.success = iface.findCSVanePage(args.reqId, args.pageNow, args.pageSize);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class addPortfolio<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPortfolio_args> {
      public addPortfolio() {
        super("addPortfolio");
      }

      public addPortfolio_args getEmptyArgsInstance() {
        return new addPortfolio_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPortfolio_result getResult(I iface, addPortfolio_args args) throws org.apache.thrift.TException {
        addPortfolio_result result = new addPortfolio_result();
        try {
          iface.addPortfolio(args.reqId, args.portfolioInfo);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPortfolioPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPortfolioPage_args> {
      public findPortfolioPage() {
        super("findPortfolioPage");
      }

      public findPortfolioPage_args getEmptyArgsInstance() {
        return new findPortfolioPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPortfolioPage_result getResult(I iface, findPortfolioPage_args args) throws org.apache.thrift.TException {
        findPortfolioPage_result result = new findPortfolioPage_result();
        try {
          result.success = iface.findPortfolioPage(args.reqId, args.pageNow, args.pageSize);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPortfolioByTitle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPortfolioByTitle_args> {
      public findPortfolioByTitle() {
        super("findPortfolioByTitle");
      }

      public findPortfolioByTitle_args getEmptyArgsInstance() {
        return new findPortfolioByTitle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPortfolioByTitle_result getResult(I iface, findPortfolioByTitle_args args) throws org.apache.thrift.TException {
        findPortfolioByTitle_result result = new findPortfolioByTitle_result();
        try {
          result.success = iface.findPortfolioByTitle(args.reqId, args.name, args.pageNow, args.pageSize);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPortfolioByTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPortfolioByTime_args> {
      public findPortfolioByTime() {
        super("findPortfolioByTime");
      }

      public findPortfolioByTime_args getEmptyArgsInstance() {
        return new findPortfolioByTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPortfolioByTime_result getResult(I iface, findPortfolioByTime_args args) throws org.apache.thrift.TException {
        findPortfolioByTime_result result = new findPortfolioByTime_result();
        try {
          result.success = iface.findPortfolioByTime(args.reqId, args.createdAt, args.pageNow, args.pageSize);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPortfolioByStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPortfolioByStatus_args> {
      public findPortfolioByStatus() {
        super("findPortfolioByStatus");
      }

      public findPortfolioByStatus_args getEmptyArgsInstance() {
        return new findPortfolioByStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPortfolioByStatus_result getResult(I iface, findPortfolioByStatus_args args) throws org.apache.thrift.TException {
        findPortfolioByStatus_result result = new findPortfolioByStatus_result();
        try {
          result.success = iface.findPortfolioByStatus(args.reqId, args.status, args.pageNow, args.pageSize);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPortfolioByCategories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPortfolioByCategories_args> {
      public findPortfolioByCategories() {
        super("findPortfolioByCategories");
      }

      public findPortfolioByCategories_args getEmptyArgsInstance() {
        return new findPortfolioByCategories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPortfolioByCategories_result getResult(I iface, findPortfolioByCategories_args args) throws org.apache.thrift.TException {
        findPortfolioByCategories_result result = new findPortfolioByCategories_result();
        try {
          result.success = iface.findPortfolioByCategories(args.reqId, args.categories, args.pageNow, args.pageSize);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPortfolioByAccountID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPortfolioByAccountID_args> {
      public findPortfolioByAccountID() {
        super("findPortfolioByAccountID");
      }

      public findPortfolioByAccountID_args getEmptyArgsInstance() {
        return new findPortfolioByAccountID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPortfolioByAccountID_result getResult(I iface, findPortfolioByAccountID_args args) throws org.apache.thrift.TException {
        findPortfolioByAccountID_result result = new findPortfolioByAccountID_result();
        try {
          result.success = iface.findPortfolioByAccountID(args.reqId, args.account_id);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPortfolioByID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPortfolioByID_args> {
      public findPortfolioByID() {
        super("findPortfolioByID");
      }

      public findPortfolioByID_args getEmptyArgsInstance() {
        return new findPortfolioByID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPortfolioByID_result getResult(I iface, findPortfolioByID_args args) throws org.apache.thrift.TException {
        findPortfolioByID_result result = new findPortfolioByID_result();
        try {
          result.success = iface.findPortfolioByID(args.reqId, args.id);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updatePortfolioByID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePortfolioByID_args> {
      public updatePortfolioByID() {
        super("updatePortfolioByID");
      }

      public updatePortfolioByID_args getEmptyArgsInstance() {
        return new updatePortfolioByID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePortfolioByID_result getResult(I iface, updatePortfolioByID_args args) throws org.apache.thrift.TException {
        updatePortfolioByID_result result = new updatePortfolioByID_result();
        try {
          result.success = iface.updatePortfolioByID(args.reqId, args.portfolioInfo);
          result.setSuccessIsSet(true);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updatePortfolioByAdviser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePortfolioByAdviser_args> {
      public updatePortfolioByAdviser() {
        super("updatePortfolioByAdviser");
      }

      public updatePortfolioByAdviser_args getEmptyArgsInstance() {
        return new updatePortfolioByAdviser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePortfolioByAdviser_result getResult(I iface, updatePortfolioByAdviser_args args) throws org.apache.thrift.TException {
        updatePortfolioByAdviser_result result = new updatePortfolioByAdviser_result();
        try {
          result.success = iface.updatePortfolioByAdviser(args.reqId, args.user_object_id, args.portfolio_id);
          result.setSuccessIsSet(true);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findAppPagerSimple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAppPagerSimple_args> {
      public findAppPagerSimple() {
        super("findAppPagerSimple");
      }

      public findAppPagerSimple_args getEmptyArgsInstance() {
        return new findAppPagerSimple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAppPagerSimple_result getResult(I iface, findAppPagerSimple_args args) throws org.apache.thrift.TException {
        findAppPagerSimple_result result = new findAppPagerSimple_result();
        try {
          result.success = iface.findAppPagerSimple(args.reqId, args.isFree, args.pageNow, args.pageSize);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findAppPagerSpec<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAppPagerSpec_args> {
      public findAppPagerSpec() {
        super("findAppPagerSpec");
      }

      public findAppPagerSpec_args getEmptyArgsInstance() {
        return new findAppPagerSpec_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAppPagerSpec_result getResult(I iface, findAppPagerSpec_args args) throws org.apache.thrift.TException {
        findAppPagerSpec_result result = new findAppPagerSpec_result();
        try {
          result.success = iface.findAppPagerSpec(args.reqId, args.isFree, args.portfolio_id);
        } catch (BusinessException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class findMainCapital_args implements org.apache.thrift.TBase<findMainCapital_args, findMainCapital_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMainCapital_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("buy_status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMainCapital_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMainCapital_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public int buy_status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      BUY_STATUS((short)2, "buy_status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // BUY_STATUS
            return BUY_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BUY_STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("buy_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMainCapital_args.class, metaDataMap);
    }

    public findMainCapital_args() {
    }

    public findMainCapital_args(
      String reqId,
      int buy_status)
    {
      this();
      this.reqId = reqId;
      this.buy_status = buy_status;
      setBuy_statusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMainCapital_args(findMainCapital_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.buy_status = other.buy_status;
    }

    public findMainCapital_args deepCopy() {
      return new findMainCapital_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      setBuy_statusIsSet(false);
      this.buy_status = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findMainCapital_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getBuy_status() {
      return this.buy_status;
    }

    public findMainCapital_args setBuy_status(int buy_status) {
      this.buy_status = buy_status;
      setBuy_statusIsSet(true);
      return this;
    }

    public void unsetBuy_status() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUY_STATUS_ISSET_ID);
    }

    /** Returns true if field buy_status is set (has been assigned a value) and false otherwise */
    public boolean isSetBuy_status() {
      return EncodingUtils.testBit(__isset_bitfield, __BUY_STATUS_ISSET_ID);
    }

    public void setBuy_statusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUY_STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case BUY_STATUS:
        if (value == null) {
          unsetBuy_status();
        } else {
          setBuy_status((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case BUY_STATUS:
        return Integer.valueOf(getBuy_status());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case BUY_STATUS:
        return isSetBuy_status();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMainCapital_args)
        return this.equals((findMainCapital_args)that);
      return false;
    }

    public boolean equals(findMainCapital_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_buy_status = true;
      boolean that_present_buy_status = true;
      if (this_present_buy_status || that_present_buy_status) {
        if (!(this_present_buy_status && that_present_buy_status))
          return false;
        if (this.buy_status != that.buy_status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMainCapital_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMainCapital_args typedOther = (findMainCapital_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBuy_status()).compareTo(typedOther.isSetBuy_status());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuy_status()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buy_status, typedOther.buy_status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMainCapital_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("buy_status:");
      sb.append(this.buy_status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMainCapital_argsStandardSchemeFactory implements SchemeFactory {
      public findMainCapital_argsStandardScheme getScheme() {
        return new findMainCapital_argsStandardScheme();
      }
    }

    private static class findMainCapital_argsStandardScheme extends StandardScheme<findMainCapital_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMainCapital_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUY_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.buy_status = iprot.readI32();
                struct.setBuy_statusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMainCapital_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BUY_STATUS_FIELD_DESC);
        oprot.writeI32(struct.buy_status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMainCapital_argsTupleSchemeFactory implements SchemeFactory {
      public findMainCapital_argsTupleScheme getScheme() {
        return new findMainCapital_argsTupleScheme();
      }
    }

    private static class findMainCapital_argsTupleScheme extends TupleScheme<findMainCapital_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMainCapital_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetBuy_status()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetBuy_status()) {
          oprot.writeI32(struct.buy_status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMainCapital_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.buy_status = iprot.readI32();
          struct.setBuy_statusIsSet(true);
        }
      }
    }

  }

  public static class findMainCapital_result implements org.apache.thrift.TBase<findMainCapital_result, findMainCapital_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMainCapital_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMainCapital_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMainCapital_resultTupleSchemeFactory());
    }

    public String success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMainCapital_result.class, metaDataMap);
    }

    public findMainCapital_result() {
    }

    public findMainCapital_result(
      String success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMainCapital_result(findMainCapital_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findMainCapital_result deepCopy() {
      return new findMainCapital_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findMainCapital_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findMainCapital_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMainCapital_result)
        return this.equals((findMainCapital_result)that);
      return false;
    }

    public boolean equals(findMainCapital_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findMainCapital_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findMainCapital_result typedOther = (findMainCapital_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMainCapital_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMainCapital_resultStandardSchemeFactory implements SchemeFactory {
      public findMainCapital_resultStandardScheme getScheme() {
        return new findMainCapital_resultStandardScheme();
      }
    }

    private static class findMainCapital_resultStandardScheme extends StandardScheme<findMainCapital_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMainCapital_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMainCapital_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMainCapital_resultTupleSchemeFactory implements SchemeFactory {
      public findMainCapital_resultTupleScheme getScheme() {
        return new findMainCapital_resultTupleScheme();
      }
    }

    private static class findMainCapital_resultTupleScheme extends TupleScheme<findMainCapital_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMainCapital_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMainCapital_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class insertCSVane_args implements org.apache.thrift.TBase<insertCSVane_args, insertCSVane_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertCSVane_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CS_VANE_FIELD_DESC = new org.apache.thrift.protocol.TField("csVane", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertCSVane_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertCSVane_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public ChinaStocksVane csVane; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      CS_VANE((short)2, "csVane");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // CS_VANE
            return CS_VANE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CS_VANE, new org.apache.thrift.meta_data.FieldMetaData("csVane", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChinaStocksVane.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertCSVane_args.class, metaDataMap);
    }

    public insertCSVane_args() {
    }

    public insertCSVane_args(
      String reqId,
      ChinaStocksVane csVane)
    {
      this();
      this.reqId = reqId;
      this.csVane = csVane;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertCSVane_args(insertCSVane_args other) {
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetCsVane()) {
        this.csVane = new ChinaStocksVane(other.csVane);
      }
    }

    public insertCSVane_args deepCopy() {
      return new insertCSVane_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.csVane = null;
    }

    public String getReqId() {
      return this.reqId;
    }

    public insertCSVane_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public ChinaStocksVane getCsVane() {
      return this.csVane;
    }

    public insertCSVane_args setCsVane(ChinaStocksVane csVane) {
      this.csVane = csVane;
      return this;
    }

    public void unsetCsVane() {
      this.csVane = null;
    }

    /** Returns true if field csVane is set (has been assigned a value) and false otherwise */
    public boolean isSetCsVane() {
      return this.csVane != null;
    }

    public void setCsVaneIsSet(boolean value) {
      if (!value) {
        this.csVane = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case CS_VANE:
        if (value == null) {
          unsetCsVane();
        } else {
          setCsVane((ChinaStocksVane)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case CS_VANE:
        return getCsVane();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case CS_VANE:
        return isSetCsVane();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertCSVane_args)
        return this.equals((insertCSVane_args)that);
      return false;
    }

    public boolean equals(insertCSVane_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_csVane = true && this.isSetCsVane();
      boolean that_present_csVane = true && that.isSetCsVane();
      if (this_present_csVane || that_present_csVane) {
        if (!(this_present_csVane && that_present_csVane))
          return false;
        if (!this.csVane.equals(that.csVane))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertCSVane_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertCSVane_args typedOther = (insertCSVane_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCsVane()).compareTo(typedOther.isSetCsVane());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCsVane()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csVane, typedOther.csVane);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertCSVane_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("csVane:");
      if (this.csVane == null) {
        sb.append("null");
      } else {
        sb.append(this.csVane);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (csVane != null) {
        csVane.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertCSVane_argsStandardSchemeFactory implements SchemeFactory {
      public insertCSVane_argsStandardScheme getScheme() {
        return new insertCSVane_argsStandardScheme();
      }
    }

    private static class insertCSVane_argsStandardScheme extends StandardScheme<insertCSVane_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertCSVane_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CS_VANE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.csVane = new ChinaStocksVane();
                struct.csVane.read(iprot);
                struct.setCsVaneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertCSVane_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.csVane != null) {
          oprot.writeFieldBegin(CS_VANE_FIELD_DESC);
          struct.csVane.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertCSVane_argsTupleSchemeFactory implements SchemeFactory {
      public insertCSVane_argsTupleScheme getScheme() {
        return new insertCSVane_argsTupleScheme();
      }
    }

    private static class insertCSVane_argsTupleScheme extends TupleScheme<insertCSVane_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertCSVane_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetCsVane()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetCsVane()) {
          struct.csVane.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertCSVane_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.csVane = new ChinaStocksVane();
          struct.csVane.read(iprot);
          struct.setCsVaneIsSet(true);
        }
      }
    }

  }

  public static class insertCSVane_result implements org.apache.thrift.TBase<insertCSVane_result, insertCSVane_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertCSVane_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertCSVane_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertCSVane_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertCSVane_result.class, metaDataMap);
    }

    public insertCSVane_result() {
    }

    public insertCSVane_result(
      boolean success,
      BusinessException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertCSVane_result(insertCSVane_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public insertCSVane_result deepCopy() {
      return new insertCSVane_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public insertCSVane_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public insertCSVane_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertCSVane_result)
        return this.equals((insertCSVane_result)that);
      return false;
    }

    public boolean equals(insertCSVane_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertCSVane_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertCSVane_result typedOther = (insertCSVane_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertCSVane_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertCSVane_resultStandardSchemeFactory implements SchemeFactory {
      public insertCSVane_resultStandardScheme getScheme() {
        return new insertCSVane_resultStandardScheme();
      }
    }

    private static class insertCSVane_resultStandardScheme extends StandardScheme<insertCSVane_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertCSVane_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertCSVane_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertCSVane_resultTupleSchemeFactory implements SchemeFactory {
      public insertCSVane_resultTupleScheme getScheme() {
        return new insertCSVane_resultTupleScheme();
      }
    }

    private static class insertCSVane_resultTupleScheme extends TupleScheme<insertCSVane_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertCSVane_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertCSVane_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findCSVane_args implements org.apache.thrift.TBase<findCSVane_args, findCSVane_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCSVane_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BUY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("buy_status", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCSVane_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCSVane_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public int buy_status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      BUY_STATUS((short)2, "buy_status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // BUY_STATUS
            return BUY_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BUY_STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("buy_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCSVane_args.class, metaDataMap);
    }

    public findCSVane_args() {
    }

    public findCSVane_args(
      String reqId,
      int buy_status)
    {
      this();
      this.reqId = reqId;
      this.buy_status = buy_status;
      setBuy_statusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCSVane_args(findCSVane_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.buy_status = other.buy_status;
    }

    public findCSVane_args deepCopy() {
      return new findCSVane_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      setBuy_statusIsSet(false);
      this.buy_status = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findCSVane_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getBuy_status() {
      return this.buy_status;
    }

    public findCSVane_args setBuy_status(int buy_status) {
      this.buy_status = buy_status;
      setBuy_statusIsSet(true);
      return this;
    }

    public void unsetBuy_status() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUY_STATUS_ISSET_ID);
    }

    /** Returns true if field buy_status is set (has been assigned a value) and false otherwise */
    public boolean isSetBuy_status() {
      return EncodingUtils.testBit(__isset_bitfield, __BUY_STATUS_ISSET_ID);
    }

    public void setBuy_statusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUY_STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case BUY_STATUS:
        if (value == null) {
          unsetBuy_status();
        } else {
          setBuy_status((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case BUY_STATUS:
        return Integer.valueOf(getBuy_status());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case BUY_STATUS:
        return isSetBuy_status();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCSVane_args)
        return this.equals((findCSVane_args)that);
      return false;
    }

    public boolean equals(findCSVane_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_buy_status = true;
      boolean that_present_buy_status = true;
      if (this_present_buy_status || that_present_buy_status) {
        if (!(this_present_buy_status && that_present_buy_status))
          return false;
        if (this.buy_status != that.buy_status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findCSVane_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findCSVane_args typedOther = (findCSVane_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBuy_status()).compareTo(typedOther.isSetBuy_status());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuy_status()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buy_status, typedOther.buy_status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCSVane_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("buy_status:");
      sb.append(this.buy_status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCSVane_argsStandardSchemeFactory implements SchemeFactory {
      public findCSVane_argsStandardScheme getScheme() {
        return new findCSVane_argsStandardScheme();
      }
    }

    private static class findCSVane_argsStandardScheme extends StandardScheme<findCSVane_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCSVane_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BUY_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.buy_status = iprot.readI32();
                struct.setBuy_statusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCSVane_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BUY_STATUS_FIELD_DESC);
        oprot.writeI32(struct.buy_status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCSVane_argsTupleSchemeFactory implements SchemeFactory {
      public findCSVane_argsTupleScheme getScheme() {
        return new findCSVane_argsTupleScheme();
      }
    }

    private static class findCSVane_argsTupleScheme extends TupleScheme<findCSVane_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCSVane_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetBuy_status()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetBuy_status()) {
          oprot.writeI32(struct.buy_status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCSVane_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.buy_status = iprot.readI32();
          struct.setBuy_statusIsSet(true);
        }
      }
    }

  }

  public static class findCSVane_result implements org.apache.thrift.TBase<findCSVane_result, findCSVane_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCSVane_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCSVane_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCSVane_resultTupleSchemeFactory());
    }

    public String success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCSVane_result.class, metaDataMap);
    }

    public findCSVane_result() {
    }

    public findCSVane_result(
      String success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCSVane_result(findCSVane_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findCSVane_result deepCopy() {
      return new findCSVane_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findCSVane_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findCSVane_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCSVane_result)
        return this.equals((findCSVane_result)that);
      return false;
    }

    public boolean equals(findCSVane_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findCSVane_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findCSVane_result typedOther = (findCSVane_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCSVane_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCSVane_resultStandardSchemeFactory implements SchemeFactory {
      public findCSVane_resultStandardScheme getScheme() {
        return new findCSVane_resultStandardScheme();
      }
    }

    private static class findCSVane_resultStandardScheme extends StandardScheme<findCSVane_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCSVane_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCSVane_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCSVane_resultTupleSchemeFactory implements SchemeFactory {
      public findCSVane_resultTupleScheme getScheme() {
        return new findCSVane_resultTupleScheme();
      }
    }

    private static class findCSVane_resultTupleScheme extends TupleScheme<findCSVane_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCSVane_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCSVane_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findCSVaneByID_args implements org.apache.thrift.TBase<findCSVaneByID_args, findCSVaneByID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCSVaneByID_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CSVANE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("csvane_id", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCSVaneByID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCSVaneByID_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public int csvane_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      CSVANE_ID((short)2, "csvane_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // CSVANE_ID
            return CSVANE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CSVANE_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CSVANE_ID, new org.apache.thrift.meta_data.FieldMetaData("csvane_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCSVaneByID_args.class, metaDataMap);
    }

    public findCSVaneByID_args() {
    }

    public findCSVaneByID_args(
      String reqId,
      int csvane_id)
    {
      this();
      this.reqId = reqId;
      this.csvane_id = csvane_id;
      setCsvane_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCSVaneByID_args(findCSVaneByID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.csvane_id = other.csvane_id;
    }

    public findCSVaneByID_args deepCopy() {
      return new findCSVaneByID_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      setCsvane_idIsSet(false);
      this.csvane_id = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findCSVaneByID_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getCsvane_id() {
      return this.csvane_id;
    }

    public findCSVaneByID_args setCsvane_id(int csvane_id) {
      this.csvane_id = csvane_id;
      setCsvane_idIsSet(true);
      return this;
    }

    public void unsetCsvane_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSVANE_ID_ISSET_ID);
    }

    /** Returns true if field csvane_id is set (has been assigned a value) and false otherwise */
    public boolean isSetCsvane_id() {
      return EncodingUtils.testBit(__isset_bitfield, __CSVANE_ID_ISSET_ID);
    }

    public void setCsvane_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSVANE_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case CSVANE_ID:
        if (value == null) {
          unsetCsvane_id();
        } else {
          setCsvane_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case CSVANE_ID:
        return Integer.valueOf(getCsvane_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case CSVANE_ID:
        return isSetCsvane_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCSVaneByID_args)
        return this.equals((findCSVaneByID_args)that);
      return false;
    }

    public boolean equals(findCSVaneByID_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_csvane_id = true;
      boolean that_present_csvane_id = true;
      if (this_present_csvane_id || that_present_csvane_id) {
        if (!(this_present_csvane_id && that_present_csvane_id))
          return false;
        if (this.csvane_id != that.csvane_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findCSVaneByID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findCSVaneByID_args typedOther = (findCSVaneByID_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCsvane_id()).compareTo(typedOther.isSetCsvane_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCsvane_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csvane_id, typedOther.csvane_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCSVaneByID_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("csvane_id:");
      sb.append(this.csvane_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCSVaneByID_argsStandardSchemeFactory implements SchemeFactory {
      public findCSVaneByID_argsStandardScheme getScheme() {
        return new findCSVaneByID_argsStandardScheme();
      }
    }

    private static class findCSVaneByID_argsStandardScheme extends StandardScheme<findCSVaneByID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCSVaneByID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CSVANE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.csvane_id = iprot.readI32();
                struct.setCsvane_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCSVaneByID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CSVANE_ID_FIELD_DESC);
        oprot.writeI32(struct.csvane_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCSVaneByID_argsTupleSchemeFactory implements SchemeFactory {
      public findCSVaneByID_argsTupleScheme getScheme() {
        return new findCSVaneByID_argsTupleScheme();
      }
    }

    private static class findCSVaneByID_argsTupleScheme extends TupleScheme<findCSVaneByID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCSVaneByID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetCsvane_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetCsvane_id()) {
          oprot.writeI32(struct.csvane_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCSVaneByID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.csvane_id = iprot.readI32();
          struct.setCsvane_idIsSet(true);
        }
      }
    }

  }

  public static class findCSVaneByID_result implements org.apache.thrift.TBase<findCSVaneByID_result, findCSVaneByID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCSVaneByID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCSVaneByID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCSVaneByID_resultTupleSchemeFactory());
    }

    public String success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCSVaneByID_result.class, metaDataMap);
    }

    public findCSVaneByID_result() {
    }

    public findCSVaneByID_result(
      String success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCSVaneByID_result(findCSVaneByID_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findCSVaneByID_result deepCopy() {
      return new findCSVaneByID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findCSVaneByID_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findCSVaneByID_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCSVaneByID_result)
        return this.equals((findCSVaneByID_result)that);
      return false;
    }

    public boolean equals(findCSVaneByID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findCSVaneByID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findCSVaneByID_result typedOther = (findCSVaneByID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCSVaneByID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCSVaneByID_resultStandardSchemeFactory implements SchemeFactory {
      public findCSVaneByID_resultStandardScheme getScheme() {
        return new findCSVaneByID_resultStandardScheme();
      }
    }

    private static class findCSVaneByID_resultStandardScheme extends StandardScheme<findCSVaneByID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCSVaneByID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCSVaneByID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCSVaneByID_resultTupleSchemeFactory implements SchemeFactory {
      public findCSVaneByID_resultTupleScheme getScheme() {
        return new findCSVaneByID_resultTupleScheme();
      }
    }

    private static class findCSVaneByID_resultTupleScheme extends TupleScheme<findCSVaneByID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCSVaneByID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCSVaneByID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class updateCSVane_args implements org.apache.thrift.TBase<updateCSVane_args, updateCSVane_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCSVane_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CS_VANE_FIELD_DESC = new org.apache.thrift.protocol.TField("csVane", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCSVane_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCSVane_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public ChinaStocksVane csVane; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      CS_VANE((short)2, "csVane");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // CS_VANE
            return CS_VANE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CS_VANE, new org.apache.thrift.meta_data.FieldMetaData("csVane", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChinaStocksVane.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCSVane_args.class, metaDataMap);
    }

    public updateCSVane_args() {
    }

    public updateCSVane_args(
      String reqId,
      ChinaStocksVane csVane)
    {
      this();
      this.reqId = reqId;
      this.csVane = csVane;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCSVane_args(updateCSVane_args other) {
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetCsVane()) {
        this.csVane = new ChinaStocksVane(other.csVane);
      }
    }

    public updateCSVane_args deepCopy() {
      return new updateCSVane_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.csVane = null;
    }

    public String getReqId() {
      return this.reqId;
    }

    public updateCSVane_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public ChinaStocksVane getCsVane() {
      return this.csVane;
    }

    public updateCSVane_args setCsVane(ChinaStocksVane csVane) {
      this.csVane = csVane;
      return this;
    }

    public void unsetCsVane() {
      this.csVane = null;
    }

    /** Returns true if field csVane is set (has been assigned a value) and false otherwise */
    public boolean isSetCsVane() {
      return this.csVane != null;
    }

    public void setCsVaneIsSet(boolean value) {
      if (!value) {
        this.csVane = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case CS_VANE:
        if (value == null) {
          unsetCsVane();
        } else {
          setCsVane((ChinaStocksVane)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case CS_VANE:
        return getCsVane();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case CS_VANE:
        return isSetCsVane();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCSVane_args)
        return this.equals((updateCSVane_args)that);
      return false;
    }

    public boolean equals(updateCSVane_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_csVane = true && this.isSetCsVane();
      boolean that_present_csVane = true && that.isSetCsVane();
      if (this_present_csVane || that_present_csVane) {
        if (!(this_present_csVane && that_present_csVane))
          return false;
        if (!this.csVane.equals(that.csVane))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCSVane_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCSVane_args typedOther = (updateCSVane_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCsVane()).compareTo(typedOther.isSetCsVane());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCsVane()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csVane, typedOther.csVane);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCSVane_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("csVane:");
      if (this.csVane == null) {
        sb.append("null");
      } else {
        sb.append(this.csVane);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (csVane != null) {
        csVane.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCSVane_argsStandardSchemeFactory implements SchemeFactory {
      public updateCSVane_argsStandardScheme getScheme() {
        return new updateCSVane_argsStandardScheme();
      }
    }

    private static class updateCSVane_argsStandardScheme extends StandardScheme<updateCSVane_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCSVane_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CS_VANE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.csVane = new ChinaStocksVane();
                struct.csVane.read(iprot);
                struct.setCsVaneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCSVane_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.csVane != null) {
          oprot.writeFieldBegin(CS_VANE_FIELD_DESC);
          struct.csVane.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCSVane_argsTupleSchemeFactory implements SchemeFactory {
      public updateCSVane_argsTupleScheme getScheme() {
        return new updateCSVane_argsTupleScheme();
      }
    }

    private static class updateCSVane_argsTupleScheme extends TupleScheme<updateCSVane_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCSVane_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetCsVane()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetCsVane()) {
          struct.csVane.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCSVane_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.csVane = new ChinaStocksVane();
          struct.csVane.read(iprot);
          struct.setCsVaneIsSet(true);
        }
      }
    }

  }

  public static class updateCSVane_result implements org.apache.thrift.TBase<updateCSVane_result, updateCSVane_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCSVane_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCSVane_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCSVane_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCSVane_result.class, metaDataMap);
    }

    public updateCSVane_result() {
    }

    public updateCSVane_result(
      boolean success,
      BusinessException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCSVane_result(updateCSVane_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public updateCSVane_result deepCopy() {
      return new updateCSVane_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateCSVane_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public updateCSVane_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCSVane_result)
        return this.equals((updateCSVane_result)that);
      return false;
    }

    public boolean equals(updateCSVane_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCSVane_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCSVane_result typedOther = (updateCSVane_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCSVane_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCSVane_resultStandardSchemeFactory implements SchemeFactory {
      public updateCSVane_resultStandardScheme getScheme() {
        return new updateCSVane_resultStandardScheme();
      }
    }

    private static class updateCSVane_resultStandardScheme extends StandardScheme<updateCSVane_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCSVane_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCSVane_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCSVane_resultTupleSchemeFactory implements SchemeFactory {
      public updateCSVane_resultTupleScheme getScheme() {
        return new updateCSVane_resultTupleScheme();
      }
    }

    private static class updateCSVane_resultTupleScheme extends TupleScheme<updateCSVane_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCSVane_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCSVane_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findCSVanePage_args implements org.apache.thrift.TBase<findCSVanePage_args, findCSVanePage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCSVanePage_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNow", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCSVanePage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCSVanePage_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public int pageNow; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      PAGE_NOW((short)2, "pageNow"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // PAGE_NOW
            return PAGE_NOW;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENOW_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NOW, new org.apache.thrift.meta_data.FieldMetaData("pageNow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCSVanePage_args.class, metaDataMap);
    }

    public findCSVanePage_args() {
    }

    public findCSVanePage_args(
      String reqId,
      int pageNow,
      int pageSize)
    {
      this();
      this.reqId = reqId;
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCSVanePage_args(findCSVanePage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.pageNow = other.pageNow;
      this.pageSize = other.pageSize;
    }

    public findCSVanePage_args deepCopy() {
      return new findCSVanePage_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      setPageNowIsSet(false);
      this.pageNow = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findCSVanePage_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getPageNow() {
      return this.pageNow;
    }

    public findCSVanePage_args setPageNow(int pageNow) {
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      return this;
    }

    public void unsetPageNow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    /** Returns true if field pageNow is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNow() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    public void setPageNowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENOW_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findCSVanePage_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case PAGE_NOW:
        if (value == null) {
          unsetPageNow();
        } else {
          setPageNow((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case PAGE_NOW:
        return Integer.valueOf(getPageNow());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case PAGE_NOW:
        return isSetPageNow();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCSVanePage_args)
        return this.equals((findCSVanePage_args)that);
      return false;
    }

    public boolean equals(findCSVanePage_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_pageNow = true;
      boolean that_present_pageNow = true;
      if (this_present_pageNow || that_present_pageNow) {
        if (!(this_present_pageNow && that_present_pageNow))
          return false;
        if (this.pageNow != that.pageNow)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findCSVanePage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findCSVanePage_args typedOther = (findCSVanePage_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNow()).compareTo(typedOther.isSetPageNow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNow, typedOther.pageNow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCSVanePage_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNow:");
      sb.append(this.pageNow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCSVanePage_argsStandardSchemeFactory implements SchemeFactory {
      public findCSVanePage_argsStandardScheme getScheme() {
        return new findCSVanePage_argsStandardScheme();
      }
    }

    private static class findCSVanePage_argsStandardScheme extends StandardScheme<findCSVanePage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCSVanePage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNow = iprot.readI32();
                struct.setPageNowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCSVanePage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NOW_FIELD_DESC);
        oprot.writeI32(struct.pageNow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCSVanePage_argsTupleSchemeFactory implements SchemeFactory {
      public findCSVanePage_argsTupleScheme getScheme() {
        return new findCSVanePage_argsTupleScheme();
      }
    }

    private static class findCSVanePage_argsTupleScheme extends TupleScheme<findCSVanePage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCSVanePage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNow()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetPageNow()) {
          oprot.writeI32(struct.pageNow);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCSVanePage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNow = iprot.readI32();
          struct.setPageNowIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findCSVanePage_result implements org.apache.thrift.TBase<findCSVanePage_result, findCSVanePage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCSVanePage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCSVanePage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCSVanePage_resultTupleSchemeFactory());
    }

    public CSVanePager success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CSVanePager.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCSVanePage_result.class, metaDataMap);
    }

    public findCSVanePage_result() {
    }

    public findCSVanePage_result(
      CSVanePager success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCSVanePage_result(findCSVanePage_result other) {
      if (other.isSetSuccess()) {
        this.success = new CSVanePager(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findCSVanePage_result deepCopy() {
      return new findCSVanePage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public CSVanePager getSuccess() {
      return this.success;
    }

    public findCSVanePage_result setSuccess(CSVanePager success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findCSVanePage_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CSVanePager)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCSVanePage_result)
        return this.equals((findCSVanePage_result)that);
      return false;
    }

    public boolean equals(findCSVanePage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findCSVanePage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findCSVanePage_result typedOther = (findCSVanePage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCSVanePage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCSVanePage_resultStandardSchemeFactory implements SchemeFactory {
      public findCSVanePage_resultStandardScheme getScheme() {
        return new findCSVanePage_resultStandardScheme();
      }
    }

    private static class findCSVanePage_resultStandardScheme extends StandardScheme<findCSVanePage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCSVanePage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CSVanePager();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCSVanePage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCSVanePage_resultTupleSchemeFactory implements SchemeFactory {
      public findCSVanePage_resultTupleScheme getScheme() {
        return new findCSVanePage_resultTupleScheme();
      }
    }

    private static class findCSVanePage_resultTupleScheme extends TupleScheme<findCSVanePage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCSVanePage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCSVanePage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CSVanePager();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class addPortfolio_args implements org.apache.thrift.TBase<addPortfolio_args, addPortfolio_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPortfolio_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORTFOLIO_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("portfolioInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPortfolio_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPortfolio_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public PortfolioInfo portfolioInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      PORTFOLIO_INFO((short)2, "portfolioInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // PORTFOLIO_INFO
            return PORTFOLIO_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORTFOLIO_INFO, new org.apache.thrift.meta_data.FieldMetaData("portfolioInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PortfolioInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPortfolio_args.class, metaDataMap);
    }

    public addPortfolio_args() {
    }

    public addPortfolio_args(
      String reqId,
      PortfolioInfo portfolioInfo)
    {
      this();
      this.reqId = reqId;
      this.portfolioInfo = portfolioInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPortfolio_args(addPortfolio_args other) {
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetPortfolioInfo()) {
        this.portfolioInfo = new PortfolioInfo(other.portfolioInfo);
      }
    }

    public addPortfolio_args deepCopy() {
      return new addPortfolio_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.portfolioInfo = null;
    }

    public String getReqId() {
      return this.reqId;
    }

    public addPortfolio_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public PortfolioInfo getPortfolioInfo() {
      return this.portfolioInfo;
    }

    public addPortfolio_args setPortfolioInfo(PortfolioInfo portfolioInfo) {
      this.portfolioInfo = portfolioInfo;
      return this;
    }

    public void unsetPortfolioInfo() {
      this.portfolioInfo = null;
    }

    /** Returns true if field portfolioInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPortfolioInfo() {
      return this.portfolioInfo != null;
    }

    public void setPortfolioInfoIsSet(boolean value) {
      if (!value) {
        this.portfolioInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case PORTFOLIO_INFO:
        if (value == null) {
          unsetPortfolioInfo();
        } else {
          setPortfolioInfo((PortfolioInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case PORTFOLIO_INFO:
        return getPortfolioInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case PORTFOLIO_INFO:
        return isSetPortfolioInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPortfolio_args)
        return this.equals((addPortfolio_args)that);
      return false;
    }

    public boolean equals(addPortfolio_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_portfolioInfo = true && this.isSetPortfolioInfo();
      boolean that_present_portfolioInfo = true && that.isSetPortfolioInfo();
      if (this_present_portfolioInfo || that_present_portfolioInfo) {
        if (!(this_present_portfolioInfo && that_present_portfolioInfo))
          return false;
        if (!this.portfolioInfo.equals(that.portfolioInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPortfolio_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPortfolio_args typedOther = (addPortfolio_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPortfolioInfo()).compareTo(typedOther.isSetPortfolioInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortfolioInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portfolioInfo, typedOther.portfolioInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPortfolio_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("portfolioInfo:");
      if (this.portfolioInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.portfolioInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (portfolioInfo != null) {
        portfolioInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPortfolio_argsStandardSchemeFactory implements SchemeFactory {
      public addPortfolio_argsStandardScheme getScheme() {
        return new addPortfolio_argsStandardScheme();
      }
    }

    private static class addPortfolio_argsStandardScheme extends StandardScheme<addPortfolio_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPortfolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORTFOLIO_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.portfolioInfo = new PortfolioInfo();
                struct.portfolioInfo.read(iprot);
                struct.setPortfolioInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPortfolio_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.portfolioInfo != null) {
          oprot.writeFieldBegin(PORTFOLIO_INFO_FIELD_DESC);
          struct.portfolioInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPortfolio_argsTupleSchemeFactory implements SchemeFactory {
      public addPortfolio_argsTupleScheme getScheme() {
        return new addPortfolio_argsTupleScheme();
      }
    }

    private static class addPortfolio_argsTupleScheme extends TupleScheme<addPortfolio_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetPortfolioInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetPortfolioInfo()) {
          struct.portfolioInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPortfolio_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.portfolioInfo = new PortfolioInfo();
          struct.portfolioInfo.read(iprot);
          struct.setPortfolioInfoIsSet(true);
        }
      }
    }

  }

  public static class addPortfolio_result implements org.apache.thrift.TBase<addPortfolio_result, addPortfolio_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPortfolio_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPortfolio_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPortfolio_resultTupleSchemeFactory());
    }

    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPortfolio_result.class, metaDataMap);
    }

    public addPortfolio_result() {
    }

    public addPortfolio_result(
      BusinessException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPortfolio_result(addPortfolio_result other) {
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public addPortfolio_result deepCopy() {
      return new addPortfolio_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public addPortfolio_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPortfolio_result)
        return this.equals((addPortfolio_result)that);
      return false;
    }

    public boolean equals(addPortfolio_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addPortfolio_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addPortfolio_result typedOther = (addPortfolio_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPortfolio_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPortfolio_resultStandardSchemeFactory implements SchemeFactory {
      public addPortfolio_resultStandardScheme getScheme() {
        return new addPortfolio_resultStandardScheme();
      }
    }

    private static class addPortfolio_resultStandardScheme extends StandardScheme<addPortfolio_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPortfolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPortfolio_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPortfolio_resultTupleSchemeFactory implements SchemeFactory {
      public addPortfolio_resultTupleScheme getScheme() {
        return new addPortfolio_resultTupleScheme();
      }
    }

    private static class addPortfolio_resultTupleScheme extends TupleScheme<addPortfolio_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPortfolio_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioPage_args implements org.apache.thrift.TBase<findPortfolioPage_args, findPortfolioPage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioPage_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNow", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioPage_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public int pageNow; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      PAGE_NOW((short)2, "pageNow"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // PAGE_NOW
            return PAGE_NOW;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENOW_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NOW, new org.apache.thrift.meta_data.FieldMetaData("pageNow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioPage_args.class, metaDataMap);
    }

    public findPortfolioPage_args() {
    }

    public findPortfolioPage_args(
      String reqId,
      int pageNow,
      int pageSize)
    {
      this();
      this.reqId = reqId;
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioPage_args(findPortfolioPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.pageNow = other.pageNow;
      this.pageSize = other.pageSize;
    }

    public findPortfolioPage_args deepCopy() {
      return new findPortfolioPage_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      setPageNowIsSet(false);
      this.pageNow = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findPortfolioPage_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getPageNow() {
      return this.pageNow;
    }

    public findPortfolioPage_args setPageNow(int pageNow) {
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      return this;
    }

    public void unsetPageNow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    /** Returns true if field pageNow is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNow() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    public void setPageNowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENOW_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findPortfolioPage_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case PAGE_NOW:
        if (value == null) {
          unsetPageNow();
        } else {
          setPageNow((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case PAGE_NOW:
        return Integer.valueOf(getPageNow());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case PAGE_NOW:
        return isSetPageNow();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioPage_args)
        return this.equals((findPortfolioPage_args)that);
      return false;
    }

    public boolean equals(findPortfolioPage_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_pageNow = true;
      boolean that_present_pageNow = true;
      if (this_present_pageNow || that_present_pageNow) {
        if (!(this_present_pageNow && that_present_pageNow))
          return false;
        if (this.pageNow != that.pageNow)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioPage_args typedOther = (findPortfolioPage_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNow()).compareTo(typedOther.isSetPageNow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNow, typedOther.pageNow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioPage_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNow:");
      sb.append(this.pageNow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioPage_argsStandardSchemeFactory implements SchemeFactory {
      public findPortfolioPage_argsStandardScheme getScheme() {
        return new findPortfolioPage_argsStandardScheme();
      }
    }

    private static class findPortfolioPage_argsStandardScheme extends StandardScheme<findPortfolioPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNow = iprot.readI32();
                struct.setPageNowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NOW_FIELD_DESC);
        oprot.writeI32(struct.pageNow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioPage_argsTupleSchemeFactory implements SchemeFactory {
      public findPortfolioPage_argsTupleScheme getScheme() {
        return new findPortfolioPage_argsTupleScheme();
      }
    }

    private static class findPortfolioPage_argsTupleScheme extends TupleScheme<findPortfolioPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNow()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetPageNow()) {
          oprot.writeI32(struct.pageNow);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNow = iprot.readI32();
          struct.setPageNowIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioPage_result implements org.apache.thrift.TBase<findPortfolioPage_result, findPortfolioPage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioPage_resultTupleSchemeFactory());
    }

    public PortfolioPager success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PortfolioPager.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioPage_result.class, metaDataMap);
    }

    public findPortfolioPage_result() {
    }

    public findPortfolioPage_result(
      PortfolioPager success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioPage_result(findPortfolioPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new PortfolioPager(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findPortfolioPage_result deepCopy() {
      return new findPortfolioPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public PortfolioPager getSuccess() {
      return this.success;
    }

    public findPortfolioPage_result setSuccess(PortfolioPager success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findPortfolioPage_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PortfolioPager)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioPage_result)
        return this.equals((findPortfolioPage_result)that);
      return false;
    }

    public boolean equals(findPortfolioPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioPage_result typedOther = (findPortfolioPage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioPage_resultStandardSchemeFactory implements SchemeFactory {
      public findPortfolioPage_resultStandardScheme getScheme() {
        return new findPortfolioPage_resultStandardScheme();
      }
    }

    private static class findPortfolioPage_resultStandardScheme extends StandardScheme<findPortfolioPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PortfolioPager();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioPage_resultTupleSchemeFactory implements SchemeFactory {
      public findPortfolioPage_resultTupleScheme getScheme() {
        return new findPortfolioPage_resultTupleScheme();
      }
    }

    private static class findPortfolioPage_resultTupleScheme extends TupleScheme<findPortfolioPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PortfolioPager();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByTitle_args implements org.apache.thrift.TBase<findPortfolioByTitle_args, findPortfolioByTitle_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByTitle_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNow", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByTitle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByTitle_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public String name; // required
    public int pageNow; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      NAME((short)2, "name"),
      PAGE_NOW((short)3, "pageNow"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // NAME
            return NAME;
          case 3: // PAGE_NOW
            return PAGE_NOW;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENOW_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NOW, new org.apache.thrift.meta_data.FieldMetaData("pageNow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByTitle_args.class, metaDataMap);
    }

    public findPortfolioByTitle_args() {
    }

    public findPortfolioByTitle_args(
      String reqId,
      String name,
      int pageNow,
      int pageSize)
    {
      this();
      this.reqId = reqId;
      this.name = name;
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByTitle_args(findPortfolioByTitle_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.pageNow = other.pageNow;
      this.pageSize = other.pageSize;
    }

    public findPortfolioByTitle_args deepCopy() {
      return new findPortfolioByTitle_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.name = null;
      setPageNowIsSet(false);
      this.pageNow = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findPortfolioByTitle_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public findPortfolioByTitle_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getPageNow() {
      return this.pageNow;
    }

    public findPortfolioByTitle_args setPageNow(int pageNow) {
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      return this;
    }

    public void unsetPageNow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    /** Returns true if field pageNow is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNow() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    public void setPageNowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENOW_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findPortfolioByTitle_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case PAGE_NOW:
        if (value == null) {
          unsetPageNow();
        } else {
          setPageNow((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case NAME:
        return getName();

      case PAGE_NOW:
        return Integer.valueOf(getPageNow());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case NAME:
        return isSetName();
      case PAGE_NOW:
        return isSetPageNow();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByTitle_args)
        return this.equals((findPortfolioByTitle_args)that);
      return false;
    }

    public boolean equals(findPortfolioByTitle_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_pageNow = true;
      boolean that_present_pageNow = true;
      if (this_present_pageNow || that_present_pageNow) {
        if (!(this_present_pageNow && that_present_pageNow))
          return false;
        if (this.pageNow != that.pageNow)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByTitle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByTitle_args typedOther = (findPortfolioByTitle_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNow()).compareTo(typedOther.isSetPageNow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNow, typedOther.pageNow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByTitle_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNow:");
      sb.append(this.pageNow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByTitle_argsStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByTitle_argsStandardScheme getScheme() {
        return new findPortfolioByTitle_argsStandardScheme();
      }
    }

    private static class findPortfolioByTitle_argsStandardScheme extends StandardScheme<findPortfolioByTitle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByTitle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNow = iprot.readI32();
                struct.setPageNowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByTitle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NOW_FIELD_DESC);
        oprot.writeI32(struct.pageNow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByTitle_argsTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByTitle_argsTupleScheme getScheme() {
        return new findPortfolioByTitle_argsTupleScheme();
      }
    }

    private static class findPortfolioByTitle_argsTupleScheme extends TupleScheme<findPortfolioByTitle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByTitle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetPageNow()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetPageNow()) {
          oprot.writeI32(struct.pageNow);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByTitle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNow = iprot.readI32();
          struct.setPageNowIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByTitle_result implements org.apache.thrift.TBase<findPortfolioByTitle_result, findPortfolioByTitle_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByTitle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByTitle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByTitle_resultTupleSchemeFactory());
    }

    public PortfolioPager success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PortfolioPager.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByTitle_result.class, metaDataMap);
    }

    public findPortfolioByTitle_result() {
    }

    public findPortfolioByTitle_result(
      PortfolioPager success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByTitle_result(findPortfolioByTitle_result other) {
      if (other.isSetSuccess()) {
        this.success = new PortfolioPager(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findPortfolioByTitle_result deepCopy() {
      return new findPortfolioByTitle_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public PortfolioPager getSuccess() {
      return this.success;
    }

    public findPortfolioByTitle_result setSuccess(PortfolioPager success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findPortfolioByTitle_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PortfolioPager)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByTitle_result)
        return this.equals((findPortfolioByTitle_result)that);
      return false;
    }

    public boolean equals(findPortfolioByTitle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByTitle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByTitle_result typedOther = (findPortfolioByTitle_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByTitle_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByTitle_resultStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByTitle_resultStandardScheme getScheme() {
        return new findPortfolioByTitle_resultStandardScheme();
      }
    }

    private static class findPortfolioByTitle_resultStandardScheme extends StandardScheme<findPortfolioByTitle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByTitle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PortfolioPager();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByTitle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByTitle_resultTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByTitle_resultTupleScheme getScheme() {
        return new findPortfolioByTitle_resultTupleScheme();
      }
    }

    private static class findPortfolioByTitle_resultTupleScheme extends TupleScheme<findPortfolioByTitle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByTitle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByTitle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PortfolioPager();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByTime_args implements org.apache.thrift.TBase<findPortfolioByTime_args, findPortfolioByTime_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByTime_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNow", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByTime_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByTime_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public String createdAt; // required
    public int pageNow; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      CREATED_AT((short)2, "createdAt"),
      PAGE_NOW((short)3, "pageNow"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // CREATED_AT
            return CREATED_AT;
          case 3: // PAGE_NOW
            return PAGE_NOW;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENOW_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NOW, new org.apache.thrift.meta_data.FieldMetaData("pageNow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByTime_args.class, metaDataMap);
    }

    public findPortfolioByTime_args() {
    }

    public findPortfolioByTime_args(
      String reqId,
      String createdAt,
      int pageNow,
      int pageSize)
    {
      this();
      this.reqId = reqId;
      this.createdAt = createdAt;
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByTime_args(findPortfolioByTime_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetCreatedAt()) {
        this.createdAt = other.createdAt;
      }
      this.pageNow = other.pageNow;
      this.pageSize = other.pageSize;
    }

    public findPortfolioByTime_args deepCopy() {
      return new findPortfolioByTime_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.createdAt = null;
      setPageNowIsSet(false);
      this.pageNow = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findPortfolioByTime_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public String getCreatedAt() {
      return this.createdAt;
    }

    public findPortfolioByTime_args setCreatedAt(String createdAt) {
      this.createdAt = createdAt;
      return this;
    }

    public void unsetCreatedAt() {
      this.createdAt = null;
    }

    /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
    public boolean isSetCreatedAt() {
      return this.createdAt != null;
    }

    public void setCreatedAtIsSet(boolean value) {
      if (!value) {
        this.createdAt = null;
      }
    }

    public int getPageNow() {
      return this.pageNow;
    }

    public findPortfolioByTime_args setPageNow(int pageNow) {
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      return this;
    }

    public void unsetPageNow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    /** Returns true if field pageNow is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNow() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    public void setPageNowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENOW_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findPortfolioByTime_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case CREATED_AT:
        if (value == null) {
          unsetCreatedAt();
        } else {
          setCreatedAt((String)value);
        }
        break;

      case PAGE_NOW:
        if (value == null) {
          unsetPageNow();
        } else {
          setPageNow((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case CREATED_AT:
        return getCreatedAt();

      case PAGE_NOW:
        return Integer.valueOf(getPageNow());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case CREATED_AT:
        return isSetCreatedAt();
      case PAGE_NOW:
        return isSetPageNow();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByTime_args)
        return this.equals((findPortfolioByTime_args)that);
      return false;
    }

    public boolean equals(findPortfolioByTime_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_createdAt = true && this.isSetCreatedAt();
      boolean that_present_createdAt = true && that.isSetCreatedAt();
      if (this_present_createdAt || that_present_createdAt) {
        if (!(this_present_createdAt && that_present_createdAt))
          return false;
        if (!this.createdAt.equals(that.createdAt))
          return false;
      }

      boolean this_present_pageNow = true;
      boolean that_present_pageNow = true;
      if (this_present_pageNow || that_present_pageNow) {
        if (!(this_present_pageNow && that_present_pageNow))
          return false;
        if (this.pageNow != that.pageNow)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByTime_args typedOther = (findPortfolioByTime_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(typedOther.isSetCreatedAt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreatedAt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, typedOther.createdAt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNow()).compareTo(typedOther.isSetPageNow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNow, typedOther.pageNow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByTime_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("createdAt:");
      if (this.createdAt == null) {
        sb.append("null");
      } else {
        sb.append(this.createdAt);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNow:");
      sb.append(this.pageNow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByTime_argsStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByTime_argsStandardScheme getScheme() {
        return new findPortfolioByTime_argsStandardScheme();
      }
    }

    private static class findPortfolioByTime_argsStandardScheme extends StandardScheme<findPortfolioByTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CREATED_AT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.createdAt = iprot.readString();
                struct.setCreatedAtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNow = iprot.readI32();
                struct.setPageNowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.createdAt != null) {
          oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
          oprot.writeString(struct.createdAt);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NOW_FIELD_DESC);
        oprot.writeI32(struct.pageNow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByTime_argsTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByTime_argsTupleScheme getScheme() {
        return new findPortfolioByTime_argsTupleScheme();
      }
    }

    private static class findPortfolioByTime_argsTupleScheme extends TupleScheme<findPortfolioByTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetCreatedAt()) {
          optionals.set(1);
        }
        if (struct.isSetPageNow()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetCreatedAt()) {
          oprot.writeString(struct.createdAt);
        }
        if (struct.isSetPageNow()) {
          oprot.writeI32(struct.pageNow);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.createdAt = iprot.readString();
          struct.setCreatedAtIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNow = iprot.readI32();
          struct.setPageNowIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByTime_result implements org.apache.thrift.TBase<findPortfolioByTime_result, findPortfolioByTime_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByTime_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByTime_resultTupleSchemeFactory());
    }

    public PortfolioPager success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PortfolioPager.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByTime_result.class, metaDataMap);
    }

    public findPortfolioByTime_result() {
    }

    public findPortfolioByTime_result(
      PortfolioPager success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByTime_result(findPortfolioByTime_result other) {
      if (other.isSetSuccess()) {
        this.success = new PortfolioPager(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findPortfolioByTime_result deepCopy() {
      return new findPortfolioByTime_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public PortfolioPager getSuccess() {
      return this.success;
    }

    public findPortfolioByTime_result setSuccess(PortfolioPager success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findPortfolioByTime_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PortfolioPager)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByTime_result)
        return this.equals((findPortfolioByTime_result)that);
      return false;
    }

    public boolean equals(findPortfolioByTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByTime_result typedOther = (findPortfolioByTime_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByTime_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByTime_resultStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByTime_resultStandardScheme getScheme() {
        return new findPortfolioByTime_resultStandardScheme();
      }
    }

    private static class findPortfolioByTime_resultStandardScheme extends StandardScheme<findPortfolioByTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PortfolioPager();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByTime_resultTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByTime_resultTupleScheme getScheme() {
        return new findPortfolioByTime_resultTupleScheme();
      }
    }

    private static class findPortfolioByTime_resultTupleScheme extends TupleScheme<findPortfolioByTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PortfolioPager();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByStatus_args implements org.apache.thrift.TBase<findPortfolioByStatus_args, findPortfolioByStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByStatus_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNow", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByStatus_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public int status; // required
    public int pageNow; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      STATUS((short)2, "status"),
      PAGE_NOW((short)3, "pageNow"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // STATUS
            return STATUS;
          case 3: // PAGE_NOW
            return PAGE_NOW;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private static final int __PAGENOW_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_NOW, new org.apache.thrift.meta_data.FieldMetaData("pageNow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByStatus_args.class, metaDataMap);
    }

    public findPortfolioByStatus_args() {
    }

    public findPortfolioByStatus_args(
      String reqId,
      int status,
      int pageNow,
      int pageSize)
    {
      this();
      this.reqId = reqId;
      this.status = status;
      setStatusIsSet(true);
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByStatus_args(findPortfolioByStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.status = other.status;
      this.pageNow = other.pageNow;
      this.pageSize = other.pageSize;
    }

    public findPortfolioByStatus_args deepCopy() {
      return new findPortfolioByStatus_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      setStatusIsSet(false);
      this.status = 0;
      setPageNowIsSet(false);
      this.pageNow = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findPortfolioByStatus_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getStatus() {
      return this.status;
    }

    public findPortfolioByStatus_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public int getPageNow() {
      return this.pageNow;
    }

    public findPortfolioByStatus_args setPageNow(int pageNow) {
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      return this;
    }

    public void unsetPageNow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    /** Returns true if field pageNow is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNow() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    public void setPageNowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENOW_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findPortfolioByStatus_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case PAGE_NOW:
        if (value == null) {
          unsetPageNow();
        } else {
          setPageNow((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case STATUS:
        return Integer.valueOf(getStatus());

      case PAGE_NOW:
        return Integer.valueOf(getPageNow());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case STATUS:
        return isSetStatus();
      case PAGE_NOW:
        return isSetPageNow();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByStatus_args)
        return this.equals((findPortfolioByStatus_args)that);
      return false;
    }

    public boolean equals(findPortfolioByStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_pageNow = true;
      boolean that_present_pageNow = true;
      if (this_present_pageNow || that_present_pageNow) {
        if (!(this_present_pageNow && that_present_pageNow))
          return false;
        if (this.pageNow != that.pageNow)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByStatus_args typedOther = (findPortfolioByStatus_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNow()).compareTo(typedOther.isSetPageNow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNow, typedOther.pageNow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByStatus_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNow:");
      sb.append(this.pageNow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByStatus_argsStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByStatus_argsStandardScheme getScheme() {
        return new findPortfolioByStatus_argsStandardScheme();
      }
    }

    private static class findPortfolioByStatus_argsStandardScheme extends StandardScheme<findPortfolioByStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNow = iprot.readI32();
                struct.setPageNowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NOW_FIELD_DESC);
        oprot.writeI32(struct.pageNow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByStatus_argsTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByStatus_argsTupleScheme getScheme() {
        return new findPortfolioByStatus_argsTupleScheme();
      }
    }

    private static class findPortfolioByStatus_argsTupleScheme extends TupleScheme<findPortfolioByStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        if (struct.isSetPageNow()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetPageNow()) {
          oprot.writeI32(struct.pageNow);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNow = iprot.readI32();
          struct.setPageNowIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByStatus_result implements org.apache.thrift.TBase<findPortfolioByStatus_result, findPortfolioByStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByStatus_resultTupleSchemeFactory());
    }

    public PortfolioPager success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PortfolioPager.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByStatus_result.class, metaDataMap);
    }

    public findPortfolioByStatus_result() {
    }

    public findPortfolioByStatus_result(
      PortfolioPager success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByStatus_result(findPortfolioByStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new PortfolioPager(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findPortfolioByStatus_result deepCopy() {
      return new findPortfolioByStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public PortfolioPager getSuccess() {
      return this.success;
    }

    public findPortfolioByStatus_result setSuccess(PortfolioPager success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findPortfolioByStatus_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PortfolioPager)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByStatus_result)
        return this.equals((findPortfolioByStatus_result)that);
      return false;
    }

    public boolean equals(findPortfolioByStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByStatus_result typedOther = (findPortfolioByStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByStatus_resultStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByStatus_resultStandardScheme getScheme() {
        return new findPortfolioByStatus_resultStandardScheme();
      }
    }

    private static class findPortfolioByStatus_resultStandardScheme extends StandardScheme<findPortfolioByStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PortfolioPager();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByStatus_resultTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByStatus_resultTupleScheme getScheme() {
        return new findPortfolioByStatus_resultTupleScheme();
      }
    }

    private static class findPortfolioByStatus_resultTupleScheme extends TupleScheme<findPortfolioByStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PortfolioPager();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByCategories_args implements org.apache.thrift.TBase<findPortfolioByCategories_args, findPortfolioByCategories_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByCategories_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("categories", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNow", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByCategories_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByCategories_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public String categories; // required
    public int pageNow; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      CATEGORIES((short)2, "categories"),
      PAGE_NOW((short)3, "pageNow"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // CATEGORIES
            return CATEGORIES;
          case 3: // PAGE_NOW
            return PAGE_NOW;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENOW_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("categories", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NOW, new org.apache.thrift.meta_data.FieldMetaData("pageNow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByCategories_args.class, metaDataMap);
    }

    public findPortfolioByCategories_args() {
    }

    public findPortfolioByCategories_args(
      String reqId,
      String categories,
      int pageNow,
      int pageSize)
    {
      this();
      this.reqId = reqId;
      this.categories = categories;
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByCategories_args(findPortfolioByCategories_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetCategories()) {
        this.categories = other.categories;
      }
      this.pageNow = other.pageNow;
      this.pageSize = other.pageSize;
    }

    public findPortfolioByCategories_args deepCopy() {
      return new findPortfolioByCategories_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.categories = null;
      setPageNowIsSet(false);
      this.pageNow = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findPortfolioByCategories_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public String getCategories() {
      return this.categories;
    }

    public findPortfolioByCategories_args setCategories(String categories) {
      this.categories = categories;
      return this;
    }

    public void unsetCategories() {
      this.categories = null;
    }

    /** Returns true if field categories is set (has been assigned a value) and false otherwise */
    public boolean isSetCategories() {
      return this.categories != null;
    }

    public void setCategoriesIsSet(boolean value) {
      if (!value) {
        this.categories = null;
      }
    }

    public int getPageNow() {
      return this.pageNow;
    }

    public findPortfolioByCategories_args setPageNow(int pageNow) {
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      return this;
    }

    public void unsetPageNow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    /** Returns true if field pageNow is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNow() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    public void setPageNowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENOW_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findPortfolioByCategories_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case CATEGORIES:
        if (value == null) {
          unsetCategories();
        } else {
          setCategories((String)value);
        }
        break;

      case PAGE_NOW:
        if (value == null) {
          unsetPageNow();
        } else {
          setPageNow((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case CATEGORIES:
        return getCategories();

      case PAGE_NOW:
        return Integer.valueOf(getPageNow());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case CATEGORIES:
        return isSetCategories();
      case PAGE_NOW:
        return isSetPageNow();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByCategories_args)
        return this.equals((findPortfolioByCategories_args)that);
      return false;
    }

    public boolean equals(findPortfolioByCategories_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_categories = true && this.isSetCategories();
      boolean that_present_categories = true && that.isSetCategories();
      if (this_present_categories || that_present_categories) {
        if (!(this_present_categories && that_present_categories))
          return false;
        if (!this.categories.equals(that.categories))
          return false;
      }

      boolean this_present_pageNow = true;
      boolean that_present_pageNow = true;
      if (this_present_pageNow || that_present_pageNow) {
        if (!(this_present_pageNow && that_present_pageNow))
          return false;
        if (this.pageNow != that.pageNow)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByCategories_args typedOther = (findPortfolioByCategories_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategories()).compareTo(typedOther.isSetCategories());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategories()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categories, typedOther.categories);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNow()).compareTo(typedOther.isSetPageNow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNow, typedOther.pageNow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByCategories_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categories:");
      if (this.categories == null) {
        sb.append("null");
      } else {
        sb.append(this.categories);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNow:");
      sb.append(this.pageNow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByCategories_argsStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByCategories_argsStandardScheme getScheme() {
        return new findPortfolioByCategories_argsStandardScheme();
      }
    }

    private static class findPortfolioByCategories_argsStandardScheme extends StandardScheme<findPortfolioByCategories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORIES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.categories = iprot.readString();
                struct.setCategoriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNow = iprot.readI32();
                struct.setPageNowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByCategories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.categories != null) {
          oprot.writeFieldBegin(CATEGORIES_FIELD_DESC);
          oprot.writeString(struct.categories);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NOW_FIELD_DESC);
        oprot.writeI32(struct.pageNow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByCategories_argsTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByCategories_argsTupleScheme getScheme() {
        return new findPortfolioByCategories_argsTupleScheme();
      }
    }

    private static class findPortfolioByCategories_argsTupleScheme extends TupleScheme<findPortfolioByCategories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetCategories()) {
          optionals.set(1);
        }
        if (struct.isSetPageNow()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetCategories()) {
          oprot.writeString(struct.categories);
        }
        if (struct.isSetPageNow()) {
          oprot.writeI32(struct.pageNow);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.categories = iprot.readString();
          struct.setCategoriesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNow = iprot.readI32();
          struct.setPageNowIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByCategories_result implements org.apache.thrift.TBase<findPortfolioByCategories_result, findPortfolioByCategories_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByCategories_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByCategories_resultTupleSchemeFactory());
    }

    public PortfolioPager success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PortfolioPager.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByCategories_result.class, metaDataMap);
    }

    public findPortfolioByCategories_result() {
    }

    public findPortfolioByCategories_result(
      PortfolioPager success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByCategories_result(findPortfolioByCategories_result other) {
      if (other.isSetSuccess()) {
        this.success = new PortfolioPager(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findPortfolioByCategories_result deepCopy() {
      return new findPortfolioByCategories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public PortfolioPager getSuccess() {
      return this.success;
    }

    public findPortfolioByCategories_result setSuccess(PortfolioPager success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findPortfolioByCategories_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PortfolioPager)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByCategories_result)
        return this.equals((findPortfolioByCategories_result)that);
      return false;
    }

    public boolean equals(findPortfolioByCategories_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByCategories_result typedOther = (findPortfolioByCategories_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByCategories_resultStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByCategories_resultStandardScheme getScheme() {
        return new findPortfolioByCategories_resultStandardScheme();
      }
    }

    private static class findPortfolioByCategories_resultStandardScheme extends StandardScheme<findPortfolioByCategories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PortfolioPager();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByCategories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByCategories_resultTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByCategories_resultTupleScheme getScheme() {
        return new findPortfolioByCategories_resultTupleScheme();
      }
    }

    private static class findPortfolioByCategories_resultTupleScheme extends TupleScheme<findPortfolioByCategories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PortfolioPager();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByAccountID_args implements org.apache.thrift.TBase<findPortfolioByAccountID_args, findPortfolioByAccountID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByAccountID_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("account_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByAccountID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByAccountID_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public String account_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      ACCOUNT_ID((short)2, "account_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // ACCOUNT_ID
            return ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("account_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByAccountID_args.class, metaDataMap);
    }

    public findPortfolioByAccountID_args() {
    }

    public findPortfolioByAccountID_args(
      String reqId,
      String account_id)
    {
      this();
      this.reqId = reqId;
      this.account_id = account_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByAccountID_args(findPortfolioByAccountID_args other) {
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetAccount_id()) {
        this.account_id = other.account_id;
      }
    }

    public findPortfolioByAccountID_args deepCopy() {
      return new findPortfolioByAccountID_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.account_id = null;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findPortfolioByAccountID_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public String getAccount_id() {
      return this.account_id;
    }

    public findPortfolioByAccountID_args setAccount_id(String account_id) {
      this.account_id = account_id;
      return this;
    }

    public void unsetAccount_id() {
      this.account_id = null;
    }

    /** Returns true if field account_id is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount_id() {
      return this.account_id != null;
    }

    public void setAccount_idIsSet(boolean value) {
      if (!value) {
        this.account_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case ACCOUNT_ID:
        if (value == null) {
          unsetAccount_id();
        } else {
          setAccount_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case ACCOUNT_ID:
        return getAccount_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case ACCOUNT_ID:
        return isSetAccount_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByAccountID_args)
        return this.equals((findPortfolioByAccountID_args)that);
      return false;
    }

    public boolean equals(findPortfolioByAccountID_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_account_id = true && this.isSetAccount_id();
      boolean that_present_account_id = true && that.isSetAccount_id();
      if (this_present_account_id || that_present_account_id) {
        if (!(this_present_account_id && that_present_account_id))
          return false;
        if (!this.account_id.equals(that.account_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByAccountID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByAccountID_args typedOther = (findPortfolioByAccountID_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccount_id()).compareTo(typedOther.isSetAccount_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account_id, typedOther.account_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByAccountID_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("account_id:");
      if (this.account_id == null) {
        sb.append("null");
      } else {
        sb.append(this.account_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByAccountID_argsStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByAccountID_argsStandardScheme getScheme() {
        return new findPortfolioByAccountID_argsStandardScheme();
      }
    }

    private static class findPortfolioByAccountID_argsStandardScheme extends StandardScheme<findPortfolioByAccountID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByAccountID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account_id = iprot.readString();
                struct.setAccount_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByAccountID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.account_id != null) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.account_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByAccountID_argsTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByAccountID_argsTupleScheme getScheme() {
        return new findPortfolioByAccountID_argsTupleScheme();
      }
    }

    private static class findPortfolioByAccountID_argsTupleScheme extends TupleScheme<findPortfolioByAccountID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByAccountID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetAccount_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetAccount_id()) {
          oprot.writeString(struct.account_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByAccountID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.account_id = iprot.readString();
          struct.setAccount_idIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByAccountID_result implements org.apache.thrift.TBase<findPortfolioByAccountID_result, findPortfolioByAccountID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByAccountID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByAccountID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByAccountID_resultTupleSchemeFactory());
    }

    public PortfolioInfo success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PortfolioInfo.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByAccountID_result.class, metaDataMap);
    }

    public findPortfolioByAccountID_result() {
    }

    public findPortfolioByAccountID_result(
      PortfolioInfo success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByAccountID_result(findPortfolioByAccountID_result other) {
      if (other.isSetSuccess()) {
        this.success = new PortfolioInfo(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findPortfolioByAccountID_result deepCopy() {
      return new findPortfolioByAccountID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public PortfolioInfo getSuccess() {
      return this.success;
    }

    public findPortfolioByAccountID_result setSuccess(PortfolioInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findPortfolioByAccountID_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PortfolioInfo)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByAccountID_result)
        return this.equals((findPortfolioByAccountID_result)that);
      return false;
    }

    public boolean equals(findPortfolioByAccountID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByAccountID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByAccountID_result typedOther = (findPortfolioByAccountID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByAccountID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByAccountID_resultStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByAccountID_resultStandardScheme getScheme() {
        return new findPortfolioByAccountID_resultStandardScheme();
      }
    }

    private static class findPortfolioByAccountID_resultStandardScheme extends StandardScheme<findPortfolioByAccountID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByAccountID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PortfolioInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByAccountID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByAccountID_resultTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByAccountID_resultTupleScheme getScheme() {
        return new findPortfolioByAccountID_resultTupleScheme();
      }
    }

    private static class findPortfolioByAccountID_resultTupleScheme extends TupleScheme<findPortfolioByAccountID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByAccountID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByAccountID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PortfolioInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByID_args implements org.apache.thrift.TBase<findPortfolioByID_args, findPortfolioByID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByID_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByID_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByID_args.class, metaDataMap);
    }

    public findPortfolioByID_args() {
    }

    public findPortfolioByID_args(
      String reqId,
      int id)
    {
      this();
      this.reqId = reqId;
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByID_args(findPortfolioByID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      this.id = other.id;
    }

    public findPortfolioByID_args deepCopy() {
      return new findPortfolioByID_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      setIdIsSet(false);
      this.id = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findPortfolioByID_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public int getId() {
      return this.id;
    }

    public findPortfolioByID_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case ID:
        return Integer.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByID_args)
        return this.equals((findPortfolioByID_args)that);
      return false;
    }

    public boolean equals(findPortfolioByID_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByID_args typedOther = (findPortfolioByID_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByID_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByID_argsStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByID_argsStandardScheme getScheme() {
        return new findPortfolioByID_argsStandardScheme();
      }
    }

    private static class findPortfolioByID_argsStandardScheme extends StandardScheme<findPortfolioByID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByID_argsTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByID_argsTupleScheme getScheme() {
        return new findPortfolioByID_argsTupleScheme();
      }
    }

    private static class findPortfolioByID_argsTupleScheme extends TupleScheme<findPortfolioByID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class findPortfolioByID_result implements org.apache.thrift.TBase<findPortfolioByID_result, findPortfolioByID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPortfolioByID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPortfolioByID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPortfolioByID_resultTupleSchemeFactory());
    }

    public PortfolioInfo success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PortfolioInfo.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPortfolioByID_result.class, metaDataMap);
    }

    public findPortfolioByID_result() {
    }

    public findPortfolioByID_result(
      PortfolioInfo success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPortfolioByID_result(findPortfolioByID_result other) {
      if (other.isSetSuccess()) {
        this.success = new PortfolioInfo(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findPortfolioByID_result deepCopy() {
      return new findPortfolioByID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public PortfolioInfo getSuccess() {
      return this.success;
    }

    public findPortfolioByID_result setSuccess(PortfolioInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findPortfolioByID_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PortfolioInfo)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPortfolioByID_result)
        return this.equals((findPortfolioByID_result)that);
      return false;
    }

    public boolean equals(findPortfolioByID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findPortfolioByID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findPortfolioByID_result typedOther = (findPortfolioByID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPortfolioByID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPortfolioByID_resultStandardSchemeFactory implements SchemeFactory {
      public findPortfolioByID_resultStandardScheme getScheme() {
        return new findPortfolioByID_resultStandardScheme();
      }
    }

    private static class findPortfolioByID_resultStandardScheme extends StandardScheme<findPortfolioByID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPortfolioByID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PortfolioInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPortfolioByID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPortfolioByID_resultTupleSchemeFactory implements SchemeFactory {
      public findPortfolioByID_resultTupleScheme getScheme() {
        return new findPortfolioByID_resultTupleScheme();
      }
    }

    private static class findPortfolioByID_resultTupleScheme extends TupleScheme<findPortfolioByID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPortfolioByID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPortfolioByID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PortfolioInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class updatePortfolioByID_args implements org.apache.thrift.TBase<updatePortfolioByID_args, updatePortfolioByID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePortfolioByID_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORTFOLIO_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("portfolioInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePortfolioByID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePortfolioByID_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public PortfolioInfo portfolioInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      PORTFOLIO_INFO((short)2, "portfolioInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // PORTFOLIO_INFO
            return PORTFOLIO_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORTFOLIO_INFO, new org.apache.thrift.meta_data.FieldMetaData("portfolioInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PortfolioInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePortfolioByID_args.class, metaDataMap);
    }

    public updatePortfolioByID_args() {
    }

    public updatePortfolioByID_args(
      String reqId,
      PortfolioInfo portfolioInfo)
    {
      this();
      this.reqId = reqId;
      this.portfolioInfo = portfolioInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePortfolioByID_args(updatePortfolioByID_args other) {
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetPortfolioInfo()) {
        this.portfolioInfo = new PortfolioInfo(other.portfolioInfo);
      }
    }

    public updatePortfolioByID_args deepCopy() {
      return new updatePortfolioByID_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.portfolioInfo = null;
    }

    public String getReqId() {
      return this.reqId;
    }

    public updatePortfolioByID_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public PortfolioInfo getPortfolioInfo() {
      return this.portfolioInfo;
    }

    public updatePortfolioByID_args setPortfolioInfo(PortfolioInfo portfolioInfo) {
      this.portfolioInfo = portfolioInfo;
      return this;
    }

    public void unsetPortfolioInfo() {
      this.portfolioInfo = null;
    }

    /** Returns true if field portfolioInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPortfolioInfo() {
      return this.portfolioInfo != null;
    }

    public void setPortfolioInfoIsSet(boolean value) {
      if (!value) {
        this.portfolioInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case PORTFOLIO_INFO:
        if (value == null) {
          unsetPortfolioInfo();
        } else {
          setPortfolioInfo((PortfolioInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case PORTFOLIO_INFO:
        return getPortfolioInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case PORTFOLIO_INFO:
        return isSetPortfolioInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePortfolioByID_args)
        return this.equals((updatePortfolioByID_args)that);
      return false;
    }

    public boolean equals(updatePortfolioByID_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_portfolioInfo = true && this.isSetPortfolioInfo();
      boolean that_present_portfolioInfo = true && that.isSetPortfolioInfo();
      if (this_present_portfolioInfo || that_present_portfolioInfo) {
        if (!(this_present_portfolioInfo && that_present_portfolioInfo))
          return false;
        if (!this.portfolioInfo.equals(that.portfolioInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePortfolioByID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePortfolioByID_args typedOther = (updatePortfolioByID_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPortfolioInfo()).compareTo(typedOther.isSetPortfolioInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortfolioInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portfolioInfo, typedOther.portfolioInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePortfolioByID_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("portfolioInfo:");
      if (this.portfolioInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.portfolioInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (portfolioInfo != null) {
        portfolioInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePortfolioByID_argsStandardSchemeFactory implements SchemeFactory {
      public updatePortfolioByID_argsStandardScheme getScheme() {
        return new updatePortfolioByID_argsStandardScheme();
      }
    }

    private static class updatePortfolioByID_argsStandardScheme extends StandardScheme<updatePortfolioByID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePortfolioByID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORTFOLIO_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.portfolioInfo = new PortfolioInfo();
                struct.portfolioInfo.read(iprot);
                struct.setPortfolioInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePortfolioByID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.portfolioInfo != null) {
          oprot.writeFieldBegin(PORTFOLIO_INFO_FIELD_DESC);
          struct.portfolioInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePortfolioByID_argsTupleSchemeFactory implements SchemeFactory {
      public updatePortfolioByID_argsTupleScheme getScheme() {
        return new updatePortfolioByID_argsTupleScheme();
      }
    }

    private static class updatePortfolioByID_argsTupleScheme extends TupleScheme<updatePortfolioByID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePortfolioByID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetPortfolioInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetPortfolioInfo()) {
          struct.portfolioInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePortfolioByID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.portfolioInfo = new PortfolioInfo();
          struct.portfolioInfo.read(iprot);
          struct.setPortfolioInfoIsSet(true);
        }
      }
    }

  }

  public static class updatePortfolioByID_result implements org.apache.thrift.TBase<updatePortfolioByID_result, updatePortfolioByID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePortfolioByID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePortfolioByID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePortfolioByID_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePortfolioByID_result.class, metaDataMap);
    }

    public updatePortfolioByID_result() {
    }

    public updatePortfolioByID_result(
      boolean success,
      BusinessException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePortfolioByID_result(updatePortfolioByID_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public updatePortfolioByID_result deepCopy() {
      return new updatePortfolioByID_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updatePortfolioByID_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public updatePortfolioByID_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePortfolioByID_result)
        return this.equals((updatePortfolioByID_result)that);
      return false;
    }

    public boolean equals(updatePortfolioByID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePortfolioByID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePortfolioByID_result typedOther = (updatePortfolioByID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePortfolioByID_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePortfolioByID_resultStandardSchemeFactory implements SchemeFactory {
      public updatePortfolioByID_resultStandardScheme getScheme() {
        return new updatePortfolioByID_resultStandardScheme();
      }
    }

    private static class updatePortfolioByID_resultStandardScheme extends StandardScheme<updatePortfolioByID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePortfolioByID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePortfolioByID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePortfolioByID_resultTupleSchemeFactory implements SchemeFactory {
      public updatePortfolioByID_resultTupleScheme getScheme() {
        return new updatePortfolioByID_resultTupleScheme();
      }
    }

    private static class updatePortfolioByID_resultTupleScheme extends TupleScheme<updatePortfolioByID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePortfolioByID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePortfolioByID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class updatePortfolioByAdviser_args implements org.apache.thrift.TBase<updatePortfolioByAdviser_args, updatePortfolioByAdviser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePortfolioByAdviser_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_object_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PORTFOLIO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("portfolio_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePortfolioByAdviser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePortfolioByAdviser_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public String user_object_id; // required
    public int portfolio_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      USER_OBJECT_ID((short)2, "user_object_id"),
      PORTFOLIO_ID((short)3, "portfolio_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // USER_OBJECT_ID
            return USER_OBJECT_ID;
          case 3: // PORTFOLIO_ID
            return PORTFOLIO_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORTFOLIO_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("user_object_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORTFOLIO_ID, new org.apache.thrift.meta_data.FieldMetaData("portfolio_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePortfolioByAdviser_args.class, metaDataMap);
    }

    public updatePortfolioByAdviser_args() {
    }

    public updatePortfolioByAdviser_args(
      String reqId,
      String user_object_id,
      int portfolio_id)
    {
      this();
      this.reqId = reqId;
      this.user_object_id = user_object_id;
      this.portfolio_id = portfolio_id;
      setPortfolio_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePortfolioByAdviser_args(updatePortfolioByAdviser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetUser_object_id()) {
        this.user_object_id = other.user_object_id;
      }
      this.portfolio_id = other.portfolio_id;
    }

    public updatePortfolioByAdviser_args deepCopy() {
      return new updatePortfolioByAdviser_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.user_object_id = null;
      setPortfolio_idIsSet(false);
      this.portfolio_id = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public updatePortfolioByAdviser_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public String getUser_object_id() {
      return this.user_object_id;
    }

    public updatePortfolioByAdviser_args setUser_object_id(String user_object_id) {
      this.user_object_id = user_object_id;
      return this;
    }

    public void unsetUser_object_id() {
      this.user_object_id = null;
    }

    /** Returns true if field user_object_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_object_id() {
      return this.user_object_id != null;
    }

    public void setUser_object_idIsSet(boolean value) {
      if (!value) {
        this.user_object_id = null;
      }
    }

    public int getPortfolio_id() {
      return this.portfolio_id;
    }

    public updatePortfolioByAdviser_args setPortfolio_id(int portfolio_id) {
      this.portfolio_id = portfolio_id;
      setPortfolio_idIsSet(true);
      return this;
    }

    public void unsetPortfolio_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORTFOLIO_ID_ISSET_ID);
    }

    /** Returns true if field portfolio_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPortfolio_id() {
      return EncodingUtils.testBit(__isset_bitfield, __PORTFOLIO_ID_ISSET_ID);
    }

    public void setPortfolio_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORTFOLIO_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case USER_OBJECT_ID:
        if (value == null) {
          unsetUser_object_id();
        } else {
          setUser_object_id((String)value);
        }
        break;

      case PORTFOLIO_ID:
        if (value == null) {
          unsetPortfolio_id();
        } else {
          setPortfolio_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case USER_OBJECT_ID:
        return getUser_object_id();

      case PORTFOLIO_ID:
        return Integer.valueOf(getPortfolio_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case USER_OBJECT_ID:
        return isSetUser_object_id();
      case PORTFOLIO_ID:
        return isSetPortfolio_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePortfolioByAdviser_args)
        return this.equals((updatePortfolioByAdviser_args)that);
      return false;
    }

    public boolean equals(updatePortfolioByAdviser_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_user_object_id = true && this.isSetUser_object_id();
      boolean that_present_user_object_id = true && that.isSetUser_object_id();
      if (this_present_user_object_id || that_present_user_object_id) {
        if (!(this_present_user_object_id && that_present_user_object_id))
          return false;
        if (!this.user_object_id.equals(that.user_object_id))
          return false;
      }

      boolean this_present_portfolio_id = true;
      boolean that_present_portfolio_id = true;
      if (this_present_portfolio_id || that_present_portfolio_id) {
        if (!(this_present_portfolio_id && that_present_portfolio_id))
          return false;
        if (this.portfolio_id != that.portfolio_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePortfolioByAdviser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePortfolioByAdviser_args typedOther = (updatePortfolioByAdviser_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_object_id()).compareTo(typedOther.isSetUser_object_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_object_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_object_id, typedOther.user_object_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPortfolio_id()).compareTo(typedOther.isSetPortfolio_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortfolio_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portfolio_id, typedOther.portfolio_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePortfolioByAdviser_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_object_id:");
      if (this.user_object_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_object_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("portfolio_id:");
      sb.append(this.portfolio_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePortfolioByAdviser_argsStandardSchemeFactory implements SchemeFactory {
      public updatePortfolioByAdviser_argsStandardScheme getScheme() {
        return new updatePortfolioByAdviser_argsStandardScheme();
      }
    }

    private static class updatePortfolioByAdviser_argsStandardScheme extends StandardScheme<updatePortfolioByAdviser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePortfolioByAdviser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_OBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_object_id = iprot.readString();
                struct.setUser_object_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PORTFOLIO_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.portfolio_id = iprot.readI32();
                struct.setPortfolio_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePortfolioByAdviser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.user_object_id != null) {
          oprot.writeFieldBegin(USER_OBJECT_ID_FIELD_DESC);
          oprot.writeString(struct.user_object_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORTFOLIO_ID_FIELD_DESC);
        oprot.writeI32(struct.portfolio_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePortfolioByAdviser_argsTupleSchemeFactory implements SchemeFactory {
      public updatePortfolioByAdviser_argsTupleScheme getScheme() {
        return new updatePortfolioByAdviser_argsTupleScheme();
      }
    }

    private static class updatePortfolioByAdviser_argsTupleScheme extends TupleScheme<updatePortfolioByAdviser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePortfolioByAdviser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetUser_object_id()) {
          optionals.set(1);
        }
        if (struct.isSetPortfolio_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetUser_object_id()) {
          oprot.writeString(struct.user_object_id);
        }
        if (struct.isSetPortfolio_id()) {
          oprot.writeI32(struct.portfolio_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePortfolioByAdviser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.user_object_id = iprot.readString();
          struct.setUser_object_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.portfolio_id = iprot.readI32();
          struct.setPortfolio_idIsSet(true);
        }
      }
    }

  }

  public static class updatePortfolioByAdviser_result implements org.apache.thrift.TBase<updatePortfolioByAdviser_result, updatePortfolioByAdviser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePortfolioByAdviser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePortfolioByAdviser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePortfolioByAdviser_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePortfolioByAdviser_result.class, metaDataMap);
    }

    public updatePortfolioByAdviser_result() {
    }

    public updatePortfolioByAdviser_result(
      boolean success,
      BusinessException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePortfolioByAdviser_result(updatePortfolioByAdviser_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public updatePortfolioByAdviser_result deepCopy() {
      return new updatePortfolioByAdviser_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updatePortfolioByAdviser_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public updatePortfolioByAdviser_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePortfolioByAdviser_result)
        return this.equals((updatePortfolioByAdviser_result)that);
      return false;
    }

    public boolean equals(updatePortfolioByAdviser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updatePortfolioByAdviser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updatePortfolioByAdviser_result typedOther = (updatePortfolioByAdviser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePortfolioByAdviser_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePortfolioByAdviser_resultStandardSchemeFactory implements SchemeFactory {
      public updatePortfolioByAdviser_resultStandardScheme getScheme() {
        return new updatePortfolioByAdviser_resultStandardScheme();
      }
    }

    private static class updatePortfolioByAdviser_resultStandardScheme extends StandardScheme<updatePortfolioByAdviser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePortfolioByAdviser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePortfolioByAdviser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePortfolioByAdviser_resultTupleSchemeFactory implements SchemeFactory {
      public updatePortfolioByAdviser_resultTupleScheme getScheme() {
        return new updatePortfolioByAdviser_resultTupleScheme();
      }
    }

    private static class updatePortfolioByAdviser_resultTupleScheme extends TupleScheme<updatePortfolioByAdviser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePortfolioByAdviser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePortfolioByAdviser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findAppPagerSimple_args implements org.apache.thrift.TBase<findAppPagerSimple_args, findAppPagerSimple_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAppPagerSimple_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("isFree", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NOW_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNow", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAppPagerSimple_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAppPagerSimple_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public String isFree; // required
    public int pageNow; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      IS_FREE((short)2, "isFree"),
      PAGE_NOW((short)3, "pageNow"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // IS_FREE
            return IS_FREE;
          case 3: // PAGE_NOW
            return PAGE_NOW;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENOW_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_FREE, new org.apache.thrift.meta_data.FieldMetaData("isFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NOW, new org.apache.thrift.meta_data.FieldMetaData("pageNow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAppPagerSimple_args.class, metaDataMap);
    }

    public findAppPagerSimple_args() {
    }

    public findAppPagerSimple_args(
      String reqId,
      String isFree,
      int pageNow,
      int pageSize)
    {
      this();
      this.reqId = reqId;
      this.isFree = isFree;
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAppPagerSimple_args(findAppPagerSimple_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetIsFree()) {
        this.isFree = other.isFree;
      }
      this.pageNow = other.pageNow;
      this.pageSize = other.pageSize;
    }

    public findAppPagerSimple_args deepCopy() {
      return new findAppPagerSimple_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.isFree = null;
      setPageNowIsSet(false);
      this.pageNow = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findAppPagerSimple_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public String getIsFree() {
      return this.isFree;
    }

    public findAppPagerSimple_args setIsFree(String isFree) {
      this.isFree = isFree;
      return this;
    }

    public void unsetIsFree() {
      this.isFree = null;
    }

    /** Returns true if field isFree is set (has been assigned a value) and false otherwise */
    public boolean isSetIsFree() {
      return this.isFree != null;
    }

    public void setIsFreeIsSet(boolean value) {
      if (!value) {
        this.isFree = null;
      }
    }

    public int getPageNow() {
      return this.pageNow;
    }

    public findAppPagerSimple_args setPageNow(int pageNow) {
      this.pageNow = pageNow;
      setPageNowIsSet(true);
      return this;
    }

    public void unsetPageNow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    /** Returns true if field pageNow is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNow() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENOW_ISSET_ID);
    }

    public void setPageNowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENOW_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public findAppPagerSimple_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case IS_FREE:
        if (value == null) {
          unsetIsFree();
        } else {
          setIsFree((String)value);
        }
        break;

      case PAGE_NOW:
        if (value == null) {
          unsetPageNow();
        } else {
          setPageNow((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case IS_FREE:
        return getIsFree();

      case PAGE_NOW:
        return Integer.valueOf(getPageNow());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case IS_FREE:
        return isSetIsFree();
      case PAGE_NOW:
        return isSetPageNow();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAppPagerSimple_args)
        return this.equals((findAppPagerSimple_args)that);
      return false;
    }

    public boolean equals(findAppPagerSimple_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_isFree = true && this.isSetIsFree();
      boolean that_present_isFree = true && that.isSetIsFree();
      if (this_present_isFree || that_present_isFree) {
        if (!(this_present_isFree && that_present_isFree))
          return false;
        if (!this.isFree.equals(that.isFree))
          return false;
      }

      boolean this_present_pageNow = true;
      boolean that_present_pageNow = true;
      if (this_present_pageNow || that_present_pageNow) {
        if (!(this_present_pageNow && that_present_pageNow))
          return false;
        if (this.pageNow != that.pageNow)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAppPagerSimple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAppPagerSimple_args typedOther = (findAppPagerSimple_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsFree()).compareTo(typedOther.isSetIsFree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsFree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFree, typedOther.isFree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNow()).compareTo(typedOther.isSetPageNow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNow, typedOther.pageNow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAppPagerSimple_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isFree:");
      if (this.isFree == null) {
        sb.append("null");
      } else {
        sb.append(this.isFree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNow:");
      sb.append(this.pageNow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAppPagerSimple_argsStandardSchemeFactory implements SchemeFactory {
      public findAppPagerSimple_argsStandardScheme getScheme() {
        return new findAppPagerSimple_argsStandardScheme();
      }
    }

    private static class findAppPagerSimple_argsStandardScheme extends StandardScheme<findAppPagerSimple_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAppPagerSimple_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_FREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.isFree = iprot.readString();
                struct.setIsFreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNow = iprot.readI32();
                struct.setPageNowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAppPagerSimple_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.isFree != null) {
          oprot.writeFieldBegin(IS_FREE_FIELD_DESC);
          oprot.writeString(struct.isFree);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NOW_FIELD_DESC);
        oprot.writeI32(struct.pageNow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAppPagerSimple_argsTupleSchemeFactory implements SchemeFactory {
      public findAppPagerSimple_argsTupleScheme getScheme() {
        return new findAppPagerSimple_argsTupleScheme();
      }
    }

    private static class findAppPagerSimple_argsTupleScheme extends TupleScheme<findAppPagerSimple_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAppPagerSimple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetIsFree()) {
          optionals.set(1);
        }
        if (struct.isSetPageNow()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetIsFree()) {
          oprot.writeString(struct.isFree);
        }
        if (struct.isSetPageNow()) {
          oprot.writeI32(struct.pageNow);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAppPagerSimple_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isFree = iprot.readString();
          struct.setIsFreeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNow = iprot.readI32();
          struct.setPageNowIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class findAppPagerSimple_result implements org.apache.thrift.TBase<findAppPagerSimple_result, findAppPagerSimple_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAppPagerSimple_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAppPagerSimple_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAppPagerSimple_resultTupleSchemeFactory());
    }

    public AppPager success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AppPager.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAppPagerSimple_result.class, metaDataMap);
    }

    public findAppPagerSimple_result() {
    }

    public findAppPagerSimple_result(
      AppPager success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAppPagerSimple_result(findAppPagerSimple_result other) {
      if (other.isSetSuccess()) {
        this.success = new AppPager(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findAppPagerSimple_result deepCopy() {
      return new findAppPagerSimple_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public AppPager getSuccess() {
      return this.success;
    }

    public findAppPagerSimple_result setSuccess(AppPager success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findAppPagerSimple_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AppPager)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAppPagerSimple_result)
        return this.equals((findAppPagerSimple_result)that);
      return false;
    }

    public boolean equals(findAppPagerSimple_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAppPagerSimple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAppPagerSimple_result typedOther = (findAppPagerSimple_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAppPagerSimple_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAppPagerSimple_resultStandardSchemeFactory implements SchemeFactory {
      public findAppPagerSimple_resultStandardScheme getScheme() {
        return new findAppPagerSimple_resultStandardScheme();
      }
    }

    private static class findAppPagerSimple_resultStandardScheme extends StandardScheme<findAppPagerSimple_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAppPagerSimple_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AppPager();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAppPagerSimple_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAppPagerSimple_resultTupleSchemeFactory implements SchemeFactory {
      public findAppPagerSimple_resultTupleScheme getScheme() {
        return new findAppPagerSimple_resultTupleScheme();
      }
    }

    private static class findAppPagerSimple_resultTupleScheme extends TupleScheme<findAppPagerSimple_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAppPagerSimple_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAppPagerSimple_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AppPager();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findAppPagerSpec_args implements org.apache.thrift.TBase<findAppPagerSpec_args, findAppPagerSpec_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAppPagerSpec_args");

    private static final org.apache.thrift.protocol.TField REQ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reqId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("isFree", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PORTFOLIO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("portfolio_id", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAppPagerSpec_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAppPagerSpec_argsTupleSchemeFactory());
    }

    public String reqId; // required
    public String isFree; // required
    public int portfolio_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_ID((short)1, "reqId"),
      IS_FREE((short)2, "isFree"),
      PORTFOLIO_ID((short)3, "portfolio_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_ID
            return REQ_ID;
          case 2: // IS_FREE
            return IS_FREE;
          case 3: // PORTFOLIO_ID
            return PORTFOLIO_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORTFOLIO_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_ID, new org.apache.thrift.meta_data.FieldMetaData("reqId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_FREE, new org.apache.thrift.meta_data.FieldMetaData("isFree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORTFOLIO_ID, new org.apache.thrift.meta_data.FieldMetaData("portfolio_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAppPagerSpec_args.class, metaDataMap);
    }

    public findAppPagerSpec_args() {
    }

    public findAppPagerSpec_args(
      String reqId,
      String isFree,
      int portfolio_id)
    {
      this();
      this.reqId = reqId;
      this.isFree = isFree;
      this.portfolio_id = portfolio_id;
      setPortfolio_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAppPagerSpec_args(findAppPagerSpec_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReqId()) {
        this.reqId = other.reqId;
      }
      if (other.isSetIsFree()) {
        this.isFree = other.isFree;
      }
      this.portfolio_id = other.portfolio_id;
    }

    public findAppPagerSpec_args deepCopy() {
      return new findAppPagerSpec_args(this);
    }

    @Override
    public void clear() {
      this.reqId = null;
      this.isFree = null;
      setPortfolio_idIsSet(false);
      this.portfolio_id = 0;
    }

    public String getReqId() {
      return this.reqId;
    }

    public findAppPagerSpec_args setReqId(String reqId) {
      this.reqId = reqId;
      return this;
    }

    public void unsetReqId() {
      this.reqId = null;
    }

    /** Returns true if field reqId is set (has been assigned a value) and false otherwise */
    public boolean isSetReqId() {
      return this.reqId != null;
    }

    public void setReqIdIsSet(boolean value) {
      if (!value) {
        this.reqId = null;
      }
    }

    public String getIsFree() {
      return this.isFree;
    }

    public findAppPagerSpec_args setIsFree(String isFree) {
      this.isFree = isFree;
      return this;
    }

    public void unsetIsFree() {
      this.isFree = null;
    }

    /** Returns true if field isFree is set (has been assigned a value) and false otherwise */
    public boolean isSetIsFree() {
      return this.isFree != null;
    }

    public void setIsFreeIsSet(boolean value) {
      if (!value) {
        this.isFree = null;
      }
    }

    public int getPortfolio_id() {
      return this.portfolio_id;
    }

    public findAppPagerSpec_args setPortfolio_id(int portfolio_id) {
      this.portfolio_id = portfolio_id;
      setPortfolio_idIsSet(true);
      return this;
    }

    public void unsetPortfolio_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORTFOLIO_ID_ISSET_ID);
    }

    /** Returns true if field portfolio_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPortfolio_id() {
      return EncodingUtils.testBit(__isset_bitfield, __PORTFOLIO_ID_ISSET_ID);
    }

    public void setPortfolio_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORTFOLIO_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_ID:
        if (value == null) {
          unsetReqId();
        } else {
          setReqId((String)value);
        }
        break;

      case IS_FREE:
        if (value == null) {
          unsetIsFree();
        } else {
          setIsFree((String)value);
        }
        break;

      case PORTFOLIO_ID:
        if (value == null) {
          unsetPortfolio_id();
        } else {
          setPortfolio_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_ID:
        return getReqId();

      case IS_FREE:
        return getIsFree();

      case PORTFOLIO_ID:
        return Integer.valueOf(getPortfolio_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_ID:
        return isSetReqId();
      case IS_FREE:
        return isSetIsFree();
      case PORTFOLIO_ID:
        return isSetPortfolio_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAppPagerSpec_args)
        return this.equals((findAppPagerSpec_args)that);
      return false;
    }

    public boolean equals(findAppPagerSpec_args that) {
      if (that == null)
        return false;

      boolean this_present_reqId = true && this.isSetReqId();
      boolean that_present_reqId = true && that.isSetReqId();
      if (this_present_reqId || that_present_reqId) {
        if (!(this_present_reqId && that_present_reqId))
          return false;
        if (!this.reqId.equals(that.reqId))
          return false;
      }

      boolean this_present_isFree = true && this.isSetIsFree();
      boolean that_present_isFree = true && that.isSetIsFree();
      if (this_present_isFree || that_present_isFree) {
        if (!(this_present_isFree && that_present_isFree))
          return false;
        if (!this.isFree.equals(that.isFree))
          return false;
      }

      boolean this_present_portfolio_id = true;
      boolean that_present_portfolio_id = true;
      if (this_present_portfolio_id || that_present_portfolio_id) {
        if (!(this_present_portfolio_id && that_present_portfolio_id))
          return false;
        if (this.portfolio_id != that.portfolio_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAppPagerSpec_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAppPagerSpec_args typedOther = (findAppPagerSpec_args)other;

      lastComparison = Boolean.valueOf(isSetReqId()).compareTo(typedOther.isSetReqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqId, typedOther.reqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsFree()).compareTo(typedOther.isSetIsFree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsFree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFree, typedOther.isFree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPortfolio_id()).compareTo(typedOther.isSetPortfolio_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortfolio_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portfolio_id, typedOther.portfolio_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAppPagerSpec_args(");
      boolean first = true;

      sb.append("reqId:");
      if (this.reqId == null) {
        sb.append("null");
      } else {
        sb.append(this.reqId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isFree:");
      if (this.isFree == null) {
        sb.append("null");
      } else {
        sb.append(this.isFree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("portfolio_id:");
      sb.append(this.portfolio_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAppPagerSpec_argsStandardSchemeFactory implements SchemeFactory {
      public findAppPagerSpec_argsStandardScheme getScheme() {
        return new findAppPagerSpec_argsStandardScheme();
      }
    }

    private static class findAppPagerSpec_argsStandardScheme extends StandardScheme<findAppPagerSpec_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAppPagerSpec_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reqId = iprot.readString();
                struct.setReqIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_FREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.isFree = iprot.readString();
                struct.setIsFreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PORTFOLIO_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.portfolio_id = iprot.readI32();
                struct.setPortfolio_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAppPagerSpec_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqId != null) {
          oprot.writeFieldBegin(REQ_ID_FIELD_DESC);
          oprot.writeString(struct.reqId);
          oprot.writeFieldEnd();
        }
        if (struct.isFree != null) {
          oprot.writeFieldBegin(IS_FREE_FIELD_DESC);
          oprot.writeString(struct.isFree);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORTFOLIO_ID_FIELD_DESC);
        oprot.writeI32(struct.portfolio_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAppPagerSpec_argsTupleSchemeFactory implements SchemeFactory {
      public findAppPagerSpec_argsTupleScheme getScheme() {
        return new findAppPagerSpec_argsTupleScheme();
      }
    }

    private static class findAppPagerSpec_argsTupleScheme extends TupleScheme<findAppPagerSpec_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAppPagerSpec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqId()) {
          optionals.set(0);
        }
        if (struct.isSetIsFree()) {
          optionals.set(1);
        }
        if (struct.isSetPortfolio_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetReqId()) {
          oprot.writeString(struct.reqId);
        }
        if (struct.isSetIsFree()) {
          oprot.writeString(struct.isFree);
        }
        if (struct.isSetPortfolio_id()) {
          oprot.writeI32(struct.portfolio_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAppPagerSpec_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.reqId = iprot.readString();
          struct.setReqIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isFree = iprot.readString();
          struct.setIsFreeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.portfolio_id = iprot.readI32();
          struct.setPortfolio_idIsSet(true);
        }
      }
    }

  }

  public static class findAppPagerSpec_result implements org.apache.thrift.TBase<findAppPagerSpec_result, findAppPagerSpec_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAppPagerSpec_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAppPagerSpec_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAppPagerSpec_resultTupleSchemeFactory());
    }

    public String success; // required
    public BusinessException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAppPagerSpec_result.class, metaDataMap);
    }

    public findAppPagerSpec_result() {
    }

    public findAppPagerSpec_result(
      String success,
      BusinessException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAppPagerSpec_result(findAppPagerSpec_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new BusinessException(other.ex);
      }
    }

    public findAppPagerSpec_result deepCopy() {
      return new findAppPagerSpec_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public findAppPagerSpec_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BusinessException getEx() {
      return this.ex;
    }

    public findAppPagerSpec_result setEx(BusinessException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((BusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAppPagerSpec_result)
        return this.equals((findAppPagerSpec_result)that);
      return false;
    }

    public boolean equals(findAppPagerSpec_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(findAppPagerSpec_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      findAppPagerSpec_result typedOther = (findAppPagerSpec_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAppPagerSpec_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAppPagerSpec_resultStandardSchemeFactory implements SchemeFactory {
      public findAppPagerSpec_resultStandardScheme getScheme() {
        return new findAppPagerSpec_resultStandardScheme();
      }
    }

    private static class findAppPagerSpec_resultStandardScheme extends StandardScheme<findAppPagerSpec_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAppPagerSpec_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new BusinessException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAppPagerSpec_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAppPagerSpec_resultTupleSchemeFactory implements SchemeFactory {
      public findAppPagerSpec_resultTupleScheme getScheme() {
        return new findAppPagerSpec_resultTupleScheme();
      }
    }

    private static class findAppPagerSpec_resultTupleScheme extends TupleScheme<findAppPagerSpec_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAppPagerSpec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAppPagerSpec_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new BusinessException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
