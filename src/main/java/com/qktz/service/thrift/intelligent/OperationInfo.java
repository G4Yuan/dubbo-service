/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qktz.service.thrift.intelligent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OperationInfo implements org.apache.thrift.TBase<OperationInfo, OperationInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OperationInfo");

  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operator_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPERATOR_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operator_time", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OperationInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OperationInfoTupleSchemeFactory());
  }

  public long operator; // required
  public String operator_name; // required
  public String operation; // required
  public String operator_time; // required
  public String remark; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERATOR((short)1, "operator"),
    OPERATOR_NAME((short)2, "operator_name"),
    OPERATION((short)3, "operation"),
    OPERATOR_TIME((short)4, "operator_time"),
    REMARK((short)5, "remark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERATOR
          return OPERATOR;
        case 2: // OPERATOR_NAME
          return OPERATOR_NAME;
        case 3: // OPERATION
          return OPERATION;
        case 4: // OPERATOR_TIME
          return OPERATOR_TIME;
        case 5: // REMARK
          return REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATOR_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.OPERATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("operator_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR_TIME, new org.apache.thrift.meta_data.FieldMetaData("operator_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OperationInfo.class, metaDataMap);
  }

  public OperationInfo() {
  }

  public OperationInfo(
    long operator,
    String operator_name,
    String operation,
    String operator_time,
    String remark)
  {
    this();
    this.operator = operator;
    setOperatorIsSet(true);
    this.operator_name = operator_name;
    this.operation = operation;
    this.operator_time = operator_time;
    this.remark = remark;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OperationInfo(OperationInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operator = other.operator;
    if (other.isSetOperator_name()) {
      this.operator_name = other.operator_name;
    }
    if (other.isSetOperation()) {
      this.operation = other.operation;
    }
    if (other.isSetOperator_time()) {
      this.operator_time = other.operator_time;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
  }

  public OperationInfo deepCopy() {
    return new OperationInfo(this);
  }

  @Override
  public void clear() {
    setOperatorIsSet(false);
    this.operator = 0;
    this.operator_name = null;
    this.operation = null;
    this.operator_time = null;
    this.remark = null;
  }

  public long getOperator() {
    return this.operator;
  }

  public OperationInfo setOperator(long operator) {
    this.operator = operator;
    setOperatorIsSet(true);
    return this;
  }

  public void unsetOperator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATOR_ISSET_ID);
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATOR_ISSET_ID);
  }

  public void setOperatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATOR_ISSET_ID, value);
  }

  public String getOperator_name() {
    return this.operator_name;
  }

  public OperationInfo setOperator_name(String operator_name) {
    this.operator_name = operator_name;
    return this;
  }

  public void unsetOperator_name() {
    this.operator_name = null;
  }

  /** Returns true if field operator_name is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator_name() {
    return this.operator_name != null;
  }

  public void setOperator_nameIsSet(boolean value) {
    if (!value) {
      this.operator_name = null;
    }
  }

  public String getOperation() {
    return this.operation;
  }

  public OperationInfo setOperation(String operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  public String getOperator_time() {
    return this.operator_time;
  }

  public OperationInfo setOperator_time(String operator_time) {
    this.operator_time = operator_time;
    return this;
  }

  public void unsetOperator_time() {
    this.operator_time = null;
  }

  /** Returns true if field operator_time is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator_time() {
    return this.operator_time != null;
  }

  public void setOperator_timeIsSet(boolean value) {
    if (!value) {
      this.operator_time = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public OperationInfo setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((Long)value);
      }
      break;

    case OPERATOR_NAME:
      if (value == null) {
        unsetOperator_name();
      } else {
        setOperator_name((String)value);
      }
      break;

    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((String)value);
      }
      break;

    case OPERATOR_TIME:
      if (value == null) {
        unsetOperator_time();
      } else {
        setOperator_time((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERATOR:
      return Long.valueOf(getOperator());

    case OPERATOR_NAME:
      return getOperator_name();

    case OPERATION:
      return getOperation();

    case OPERATOR_TIME:
      return getOperator_time();

    case REMARK:
      return getRemark();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPERATOR:
      return isSetOperator();
    case OPERATOR_NAME:
      return isSetOperator_name();
    case OPERATION:
      return isSetOperation();
    case OPERATOR_TIME:
      return isSetOperator_time();
    case REMARK:
      return isSetRemark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OperationInfo)
      return this.equals((OperationInfo)that);
    return false;
  }

  public boolean equals(OperationInfo that) {
    if (that == null)
      return false;

    boolean this_present_operator = true;
    boolean that_present_operator = true;
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (this.operator != that.operator)
        return false;
    }

    boolean this_present_operator_name = true && this.isSetOperator_name();
    boolean that_present_operator_name = true && that.isSetOperator_name();
    if (this_present_operator_name || that_present_operator_name) {
      if (!(this_present_operator_name && that_present_operator_name))
        return false;
      if (!this.operator_name.equals(that.operator_name))
        return false;
    }

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_operator_time = true && this.isSetOperator_time();
    boolean that_present_operator_time = true && that.isSetOperator_time();
    if (this_present_operator_time || that_present_operator_time) {
      if (!(this_present_operator_time && that_present_operator_time))
        return false;
      if (!this.operator_time.equals(that.operator_time))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(OperationInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OperationInfo typedOther = (OperationInfo)other;

    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(typedOther.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, typedOther.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator_name()).compareTo(typedOther.isSetOperator_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator_name, typedOther.operator_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperation()).compareTo(typedOther.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, typedOther.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator_time()).compareTo(typedOther.isSetOperator_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator_time, typedOther.operator_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, typedOther.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OperationInfo(");
    boolean first = true;

    sb.append("operator:");
    sb.append(this.operator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator_name:");
    if (this.operator_name == null) {
      sb.append("null");
    } else {
      sb.append(this.operator_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operation:");
    if (this.operation == null) {
      sb.append("null");
    } else {
      sb.append(this.operation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator_time:");
    if (this.operator_time == null) {
      sb.append("null");
    } else {
      sb.append(this.operator_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OperationInfoStandardSchemeFactory implements SchemeFactory {
    public OperationInfoStandardScheme getScheme() {
      return new OperationInfoStandardScheme();
    }
  }

  private static class OperationInfoStandardScheme extends StandardScheme<OperationInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OperationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.operator = iprot.readI64();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator_name = iprot.readString();
              struct.setOperator_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operation = iprot.readString();
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPERATOR_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator_time = iprot.readString();
              struct.setOperator_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OperationInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
      oprot.writeI64(struct.operator);
      oprot.writeFieldEnd();
      if (struct.operator_name != null) {
        oprot.writeFieldBegin(OPERATOR_NAME_FIELD_DESC);
        oprot.writeString(struct.operator_name);
        oprot.writeFieldEnd();
      }
      if (struct.operation != null) {
        oprot.writeFieldBegin(OPERATION_FIELD_DESC);
        oprot.writeString(struct.operation);
        oprot.writeFieldEnd();
      }
      if (struct.operator_time != null) {
        oprot.writeFieldBegin(OPERATOR_TIME_FIELD_DESC);
        oprot.writeString(struct.operator_time);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OperationInfoTupleSchemeFactory implements SchemeFactory {
    public OperationInfoTupleScheme getScheme() {
      return new OperationInfoTupleScheme();
    }
  }

  private static class OperationInfoTupleScheme extends TupleScheme<OperationInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OperationInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOperator()) {
        optionals.set(0);
      }
      if (struct.isSetOperator_name()) {
        optionals.set(1);
      }
      if (struct.isSetOperation()) {
        optionals.set(2);
      }
      if (struct.isSetOperator_time()) {
        optionals.set(3);
      }
      if (struct.isSetRemark()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOperator()) {
        oprot.writeI64(struct.operator);
      }
      if (struct.isSetOperator_name()) {
        oprot.writeString(struct.operator_name);
      }
      if (struct.isSetOperation()) {
        oprot.writeString(struct.operation);
      }
      if (struct.isSetOperator_time()) {
        oprot.writeString(struct.operator_time);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OperationInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.operator = iprot.readI64();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operator_name = iprot.readString();
        struct.setOperator_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operation = iprot.readString();
        struct.setOperationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.operator_time = iprot.readString();
        struct.setOperator_timeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
    }
  }

}

