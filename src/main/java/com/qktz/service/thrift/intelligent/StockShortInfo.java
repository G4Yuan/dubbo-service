/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qktz.service.thrift.intelligent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StockShortInfo implements org.apache.thrift.TBase<StockShortInfo, StockShortInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StockShortInfo");

  private static final org.apache.thrift.protocol.TField STOCK_POOL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_pool_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STOCK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_code", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_YIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("total_yield", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField STRATEGY_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("strategy_remark", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LEAST_MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("least_modify_time", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LABELS_FIELD_DESC = new org.apache.thrift.protocol.TField("labels", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField OPER_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("oper_timestamp", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StockShortInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StockShortInfoTupleSchemeFactory());
  }

  public String stock_pool_name; // required
  public String strategy; // required
  public String stock_name; // required
  public String stock_code; // required
  public double total_yield; // required
  public long count; // required
  public String strategy_remark; // required
  public String least_modify_time; // required
  public List<String> labels; // required
  public long id; // required
  public long oper_timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STOCK_POOL_NAME((short)1, "stock_pool_name"),
    STRATEGY((short)2, "strategy"),
    STOCK_NAME((short)3, "stock_name"),
    STOCK_CODE((short)4, "stock_code"),
    TOTAL_YIELD((short)5, "total_yield"),
    COUNT((short)6, "count"),
    STRATEGY_REMARK((short)7, "strategy_remark"),
    LEAST_MODIFY_TIME((short)8, "least_modify_time"),
    LABELS((short)9, "labels"),
    ID((short)10, "id"),
    OPER_TIMESTAMP((short)11, "oper_timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STOCK_POOL_NAME
          return STOCK_POOL_NAME;
        case 2: // STRATEGY
          return STRATEGY;
        case 3: // STOCK_NAME
          return STOCK_NAME;
        case 4: // STOCK_CODE
          return STOCK_CODE;
        case 5: // TOTAL_YIELD
          return TOTAL_YIELD;
        case 6: // COUNT
          return COUNT;
        case 7: // STRATEGY_REMARK
          return STRATEGY_REMARK;
        case 8: // LEAST_MODIFY_TIME
          return LEAST_MODIFY_TIME;
        case 9: // LABELS
          return LABELS;
        case 10: // ID
          return ID;
        case 11: // OPER_TIMESTAMP
          return OPER_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_YIELD_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __OPER_TIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STOCK_POOL_NAME, new org.apache.thrift.meta_data.FieldMetaData("stock_pool_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("strategy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCK_NAME, new org.apache.thrift.meta_data.FieldMetaData("stock_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stock_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_YIELD, new org.apache.thrift.meta_data.FieldMetaData("total_yield", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.STRATEGY_REMARK, new org.apache.thrift.meta_data.FieldMetaData("strategy_remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEAST_MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("least_modify_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABELS, new org.apache.thrift.meta_data.FieldMetaData("labels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.OPER_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("oper_timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StockShortInfo.class, metaDataMap);
  }

  public StockShortInfo() {
  }

  public StockShortInfo(
    String stock_pool_name,
    String strategy,
    String stock_name,
    String stock_code,
    double total_yield,
    long count,
    String strategy_remark,
    String least_modify_time,
    List<String> labels,
    long id,
    long oper_timestamp)
  {
    this();
    this.stock_pool_name = stock_pool_name;
    this.strategy = strategy;
    this.stock_name = stock_name;
    this.stock_code = stock_code;
    this.total_yield = total_yield;
    setTotal_yieldIsSet(true);
    this.count = count;
    setCountIsSet(true);
    this.strategy_remark = strategy_remark;
    this.least_modify_time = least_modify_time;
    this.labels = labels;
    this.id = id;
    setIdIsSet(true);
    this.oper_timestamp = oper_timestamp;
    setOper_timestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StockShortInfo(StockShortInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStock_pool_name()) {
      this.stock_pool_name = other.stock_pool_name;
    }
    if (other.isSetStrategy()) {
      this.strategy = other.strategy;
    }
    if (other.isSetStock_name()) {
      this.stock_name = other.stock_name;
    }
    if (other.isSetStock_code()) {
      this.stock_code = other.stock_code;
    }
    this.total_yield = other.total_yield;
    this.count = other.count;
    if (other.isSetStrategy_remark()) {
      this.strategy_remark = other.strategy_remark;
    }
    if (other.isSetLeast_modify_time()) {
      this.least_modify_time = other.least_modify_time;
    }
    if (other.isSetLabels()) {
      List<String> __this__labels = new ArrayList<String>();
      for (String other_element : other.labels) {
        __this__labels.add(other_element);
      }
      this.labels = __this__labels;
    }
    this.id = other.id;
    this.oper_timestamp = other.oper_timestamp;
  }

  public StockShortInfo deepCopy() {
    return new StockShortInfo(this);
  }

  @Override
  public void clear() {
    this.stock_pool_name = null;
    this.strategy = null;
    this.stock_name = null;
    this.stock_code = null;
    setTotal_yieldIsSet(false);
    this.total_yield = 0.0;
    setCountIsSet(false);
    this.count = 0;
    this.strategy_remark = null;
    this.least_modify_time = null;
    this.labels = null;
    setIdIsSet(false);
    this.id = 0;
    setOper_timestampIsSet(false);
    this.oper_timestamp = 0;
  }

  public String getStock_pool_name() {
    return this.stock_pool_name;
  }

  public StockShortInfo setStock_pool_name(String stock_pool_name) {
    this.stock_pool_name = stock_pool_name;
    return this;
  }

  public void unsetStock_pool_name() {
    this.stock_pool_name = null;
  }

  /** Returns true if field stock_pool_name is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_pool_name() {
    return this.stock_pool_name != null;
  }

  public void setStock_pool_nameIsSet(boolean value) {
    if (!value) {
      this.stock_pool_name = null;
    }
  }

  public String getStrategy() {
    return this.strategy;
  }

  public StockShortInfo setStrategy(String strategy) {
    this.strategy = strategy;
    return this;
  }

  public void unsetStrategy() {
    this.strategy = null;
  }

  /** Returns true if field strategy is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy() {
    return this.strategy != null;
  }

  public void setStrategyIsSet(boolean value) {
    if (!value) {
      this.strategy = null;
    }
  }

  public String getStock_name() {
    return this.stock_name;
  }

  public StockShortInfo setStock_name(String stock_name) {
    this.stock_name = stock_name;
    return this;
  }

  public void unsetStock_name() {
    this.stock_name = null;
  }

  /** Returns true if field stock_name is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_name() {
    return this.stock_name != null;
  }

  public void setStock_nameIsSet(boolean value) {
    if (!value) {
      this.stock_name = null;
    }
  }

  public String getStock_code() {
    return this.stock_code;
  }

  public StockShortInfo setStock_code(String stock_code) {
    this.stock_code = stock_code;
    return this;
  }

  public void unsetStock_code() {
    this.stock_code = null;
  }

  /** Returns true if field stock_code is set (has been assigned a value) and false otherwise */
  public boolean isSetStock_code() {
    return this.stock_code != null;
  }

  public void setStock_codeIsSet(boolean value) {
    if (!value) {
      this.stock_code = null;
    }
  }

  public double getTotal_yield() {
    return this.total_yield;
  }

  public StockShortInfo setTotal_yield(double total_yield) {
    this.total_yield = total_yield;
    setTotal_yieldIsSet(true);
    return this;
  }

  public void unsetTotal_yield() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_YIELD_ISSET_ID);
  }

  /** Returns true if field total_yield is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_yield() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_YIELD_ISSET_ID);
  }

  public void setTotal_yieldIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_YIELD_ISSET_ID, value);
  }

  public long getCount() {
    return this.count;
  }

  public StockShortInfo setCount(long count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public String getStrategy_remark() {
    return this.strategy_remark;
  }

  public StockShortInfo setStrategy_remark(String strategy_remark) {
    this.strategy_remark = strategy_remark;
    return this;
  }

  public void unsetStrategy_remark() {
    this.strategy_remark = null;
  }

  /** Returns true if field strategy_remark is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategy_remark() {
    return this.strategy_remark != null;
  }

  public void setStrategy_remarkIsSet(boolean value) {
    if (!value) {
      this.strategy_remark = null;
    }
  }

  public String getLeast_modify_time() {
    return this.least_modify_time;
  }

  public StockShortInfo setLeast_modify_time(String least_modify_time) {
    this.least_modify_time = least_modify_time;
    return this;
  }

  public void unsetLeast_modify_time() {
    this.least_modify_time = null;
  }

  /** Returns true if field least_modify_time is set (has been assigned a value) and false otherwise */
  public boolean isSetLeast_modify_time() {
    return this.least_modify_time != null;
  }

  public void setLeast_modify_timeIsSet(boolean value) {
    if (!value) {
      this.least_modify_time = null;
    }
  }

  public int getLabelsSize() {
    return (this.labels == null) ? 0 : this.labels.size();
  }

  public java.util.Iterator<String> getLabelsIterator() {
    return (this.labels == null) ? null : this.labels.iterator();
  }

  public void addToLabels(String elem) {
    if (this.labels == null) {
      this.labels = new ArrayList<String>();
    }
    this.labels.add(elem);
  }

  public List<String> getLabels() {
    return this.labels;
  }

  public StockShortInfo setLabels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public void unsetLabels() {
    this.labels = null;
  }

  /** Returns true if field labels is set (has been assigned a value) and false otherwise */
  public boolean isSetLabels() {
    return this.labels != null;
  }

  public void setLabelsIsSet(boolean value) {
    if (!value) {
      this.labels = null;
    }
  }

  public long getId() {
    return this.id;
  }

  public StockShortInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getOper_timestamp() {
    return this.oper_timestamp;
  }

  public StockShortInfo setOper_timestamp(long oper_timestamp) {
    this.oper_timestamp = oper_timestamp;
    setOper_timestampIsSet(true);
    return this;
  }

  public void unsetOper_timestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPER_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field oper_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetOper_timestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __OPER_TIMESTAMP_ISSET_ID);
  }

  public void setOper_timestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPER_TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STOCK_POOL_NAME:
      if (value == null) {
        unsetStock_pool_name();
      } else {
        setStock_pool_name((String)value);
      }
      break;

    case STRATEGY:
      if (value == null) {
        unsetStrategy();
      } else {
        setStrategy((String)value);
      }
      break;

    case STOCK_NAME:
      if (value == null) {
        unsetStock_name();
      } else {
        setStock_name((String)value);
      }
      break;

    case STOCK_CODE:
      if (value == null) {
        unsetStock_code();
      } else {
        setStock_code((String)value);
      }
      break;

    case TOTAL_YIELD:
      if (value == null) {
        unsetTotal_yield();
      } else {
        setTotal_yield((Double)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Long)value);
      }
      break;

    case STRATEGY_REMARK:
      if (value == null) {
        unsetStrategy_remark();
      } else {
        setStrategy_remark((String)value);
      }
      break;

    case LEAST_MODIFY_TIME:
      if (value == null) {
        unsetLeast_modify_time();
      } else {
        setLeast_modify_time((String)value);
      }
      break;

    case LABELS:
      if (value == null) {
        unsetLabels();
      } else {
        setLabels((List<String>)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case OPER_TIMESTAMP:
      if (value == null) {
        unsetOper_timestamp();
      } else {
        setOper_timestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STOCK_POOL_NAME:
      return getStock_pool_name();

    case STRATEGY:
      return getStrategy();

    case STOCK_NAME:
      return getStock_name();

    case STOCK_CODE:
      return getStock_code();

    case TOTAL_YIELD:
      return Double.valueOf(getTotal_yield());

    case COUNT:
      return Long.valueOf(getCount());

    case STRATEGY_REMARK:
      return getStrategy_remark();

    case LEAST_MODIFY_TIME:
      return getLeast_modify_time();

    case LABELS:
      return getLabels();

    case ID:
      return Long.valueOf(getId());

    case OPER_TIMESTAMP:
      return Long.valueOf(getOper_timestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STOCK_POOL_NAME:
      return isSetStock_pool_name();
    case STRATEGY:
      return isSetStrategy();
    case STOCK_NAME:
      return isSetStock_name();
    case STOCK_CODE:
      return isSetStock_code();
    case TOTAL_YIELD:
      return isSetTotal_yield();
    case COUNT:
      return isSetCount();
    case STRATEGY_REMARK:
      return isSetStrategy_remark();
    case LEAST_MODIFY_TIME:
      return isSetLeast_modify_time();
    case LABELS:
      return isSetLabels();
    case ID:
      return isSetId();
    case OPER_TIMESTAMP:
      return isSetOper_timestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StockShortInfo)
      return this.equals((StockShortInfo)that);
    return false;
  }

  public boolean equals(StockShortInfo that) {
    if (that == null)
      return false;

    boolean this_present_stock_pool_name = true && this.isSetStock_pool_name();
    boolean that_present_stock_pool_name = true && that.isSetStock_pool_name();
    if (this_present_stock_pool_name || that_present_stock_pool_name) {
      if (!(this_present_stock_pool_name && that_present_stock_pool_name))
        return false;
      if (!this.stock_pool_name.equals(that.stock_pool_name))
        return false;
    }

    boolean this_present_strategy = true && this.isSetStrategy();
    boolean that_present_strategy = true && that.isSetStrategy();
    if (this_present_strategy || that_present_strategy) {
      if (!(this_present_strategy && that_present_strategy))
        return false;
      if (!this.strategy.equals(that.strategy))
        return false;
    }

    boolean this_present_stock_name = true && this.isSetStock_name();
    boolean that_present_stock_name = true && that.isSetStock_name();
    if (this_present_stock_name || that_present_stock_name) {
      if (!(this_present_stock_name && that_present_stock_name))
        return false;
      if (!this.stock_name.equals(that.stock_name))
        return false;
    }

    boolean this_present_stock_code = true && this.isSetStock_code();
    boolean that_present_stock_code = true && that.isSetStock_code();
    if (this_present_stock_code || that_present_stock_code) {
      if (!(this_present_stock_code && that_present_stock_code))
        return false;
      if (!this.stock_code.equals(that.stock_code))
        return false;
    }

    boolean this_present_total_yield = true;
    boolean that_present_total_yield = true;
    if (this_present_total_yield || that_present_total_yield) {
      if (!(this_present_total_yield && that_present_total_yield))
        return false;
      if (this.total_yield != that.total_yield)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_strategy_remark = true && this.isSetStrategy_remark();
    boolean that_present_strategy_remark = true && that.isSetStrategy_remark();
    if (this_present_strategy_remark || that_present_strategy_remark) {
      if (!(this_present_strategy_remark && that_present_strategy_remark))
        return false;
      if (!this.strategy_remark.equals(that.strategy_remark))
        return false;
    }

    boolean this_present_least_modify_time = true && this.isSetLeast_modify_time();
    boolean that_present_least_modify_time = true && that.isSetLeast_modify_time();
    if (this_present_least_modify_time || that_present_least_modify_time) {
      if (!(this_present_least_modify_time && that_present_least_modify_time))
        return false;
      if (!this.least_modify_time.equals(that.least_modify_time))
        return false;
    }

    boolean this_present_labels = true && this.isSetLabels();
    boolean that_present_labels = true && that.isSetLabels();
    if (this_present_labels || that_present_labels) {
      if (!(this_present_labels && that_present_labels))
        return false;
      if (!this.labels.equals(that.labels))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_oper_timestamp = true;
    boolean that_present_oper_timestamp = true;
    if (this_present_oper_timestamp || that_present_oper_timestamp) {
      if (!(this_present_oper_timestamp && that_present_oper_timestamp))
        return false;
      if (this.oper_timestamp != that.oper_timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StockShortInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StockShortInfo typedOther = (StockShortInfo)other;

    lastComparison = Boolean.valueOf(isSetStock_pool_name()).compareTo(typedOther.isSetStock_pool_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_pool_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_pool_name, typedOther.stock_pool_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategy()).compareTo(typedOther.isSetStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy, typedOther.strategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStock_name()).compareTo(typedOther.isSetStock_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_name, typedOther.stock_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStock_code()).compareTo(typedOther.isSetStock_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStock_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_code, typedOther.stock_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_yield()).compareTo(typedOther.isSetTotal_yield());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_yield()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_yield, typedOther.total_yield);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategy_remark()).compareTo(typedOther.isSetStrategy_remark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategy_remark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategy_remark, typedOther.strategy_remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeast_modify_time()).compareTo(typedOther.isSetLeast_modify_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeast_modify_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.least_modify_time, typedOther.least_modify_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabels()).compareTo(typedOther.isSetLabels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labels, typedOther.labels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOper_timestamp()).compareTo(typedOther.isSetOper_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOper_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oper_timestamp, typedOther.oper_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StockShortInfo(");
    boolean first = true;

    sb.append("stock_pool_name:");
    if (this.stock_pool_name == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_pool_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strategy:");
    if (this.strategy == null) {
      sb.append("null");
    } else {
      sb.append(this.strategy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stock_name:");
    if (this.stock_name == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stock_code:");
    if (this.stock_code == null) {
      sb.append("null");
    } else {
      sb.append(this.stock_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_yield:");
    sb.append(this.total_yield);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("strategy_remark:");
    if (this.strategy_remark == null) {
      sb.append("null");
    } else {
      sb.append(this.strategy_remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("least_modify_time:");
    if (this.least_modify_time == null) {
      sb.append("null");
    } else {
      sb.append(this.least_modify_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("labels:");
    if (this.labels == null) {
      sb.append("null");
    } else {
      sb.append(this.labels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oper_timestamp:");
    sb.append(this.oper_timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StockShortInfoStandardSchemeFactory implements SchemeFactory {
    public StockShortInfoStandardScheme getScheme() {
      return new StockShortInfoStandardScheme();
    }
  }

  private static class StockShortInfoStandardScheme extends StandardScheme<StockShortInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StockShortInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STOCK_POOL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_pool_name = iprot.readString();
              struct.setStock_pool_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategy = iprot.readString();
              struct.setStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STOCK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_name = iprot.readString();
              struct.setStock_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STOCK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stock_code = iprot.readString();
              struct.setStock_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_YIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total_yield = iprot.readDouble();
              struct.setTotal_yieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count = iprot.readI64();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRATEGY_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strategy_remark = iprot.readString();
              struct.setStrategy_remarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LEAST_MODIFY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.least_modify_time = iprot.readString();
              struct.setLeast_modify_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LABELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.labels = new ArrayList<String>(_list72.size);
                for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                {
                  String _elem74; // required
                  _elem74 = iprot.readString();
                  struct.labels.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setLabelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPER_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.oper_timestamp = iprot.readI64();
              struct.setOper_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StockShortInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stock_pool_name != null) {
        oprot.writeFieldBegin(STOCK_POOL_NAME_FIELD_DESC);
        oprot.writeString(struct.stock_pool_name);
        oprot.writeFieldEnd();
      }
      if (struct.strategy != null) {
        oprot.writeFieldBegin(STRATEGY_FIELD_DESC);
        oprot.writeString(struct.strategy);
        oprot.writeFieldEnd();
      }
      if (struct.stock_name != null) {
        oprot.writeFieldBegin(STOCK_NAME_FIELD_DESC);
        oprot.writeString(struct.stock_name);
        oprot.writeFieldEnd();
      }
      if (struct.stock_code != null) {
        oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
        oprot.writeString(struct.stock_code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_YIELD_FIELD_DESC);
      oprot.writeDouble(struct.total_yield);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI64(struct.count);
      oprot.writeFieldEnd();
      if (struct.strategy_remark != null) {
        oprot.writeFieldBegin(STRATEGY_REMARK_FIELD_DESC);
        oprot.writeString(struct.strategy_remark);
        oprot.writeFieldEnd();
      }
      if (struct.least_modify_time != null) {
        oprot.writeFieldBegin(LEAST_MODIFY_TIME_FIELD_DESC);
        oprot.writeString(struct.least_modify_time);
        oprot.writeFieldEnd();
      }
      if (struct.labels != null) {
        oprot.writeFieldBegin(LABELS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.labels.size()));
          for (String _iter75 : struct.labels)
          {
            oprot.writeString(_iter75);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPER_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.oper_timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StockShortInfoTupleSchemeFactory implements SchemeFactory {
    public StockShortInfoTupleScheme getScheme() {
      return new StockShortInfoTupleScheme();
    }
  }

  private static class StockShortInfoTupleScheme extends TupleScheme<StockShortInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StockShortInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStock_pool_name()) {
        optionals.set(0);
      }
      if (struct.isSetStrategy()) {
        optionals.set(1);
      }
      if (struct.isSetStock_name()) {
        optionals.set(2);
      }
      if (struct.isSetStock_code()) {
        optionals.set(3);
      }
      if (struct.isSetTotal_yield()) {
        optionals.set(4);
      }
      if (struct.isSetCount()) {
        optionals.set(5);
      }
      if (struct.isSetStrategy_remark()) {
        optionals.set(6);
      }
      if (struct.isSetLeast_modify_time()) {
        optionals.set(7);
      }
      if (struct.isSetLabels()) {
        optionals.set(8);
      }
      if (struct.isSetId()) {
        optionals.set(9);
      }
      if (struct.isSetOper_timestamp()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetStock_pool_name()) {
        oprot.writeString(struct.stock_pool_name);
      }
      if (struct.isSetStrategy()) {
        oprot.writeString(struct.strategy);
      }
      if (struct.isSetStock_name()) {
        oprot.writeString(struct.stock_name);
      }
      if (struct.isSetStock_code()) {
        oprot.writeString(struct.stock_code);
      }
      if (struct.isSetTotal_yield()) {
        oprot.writeDouble(struct.total_yield);
      }
      if (struct.isSetCount()) {
        oprot.writeI64(struct.count);
      }
      if (struct.isSetStrategy_remark()) {
        oprot.writeString(struct.strategy_remark);
      }
      if (struct.isSetLeast_modify_time()) {
        oprot.writeString(struct.least_modify_time);
      }
      if (struct.isSetLabels()) {
        {
          oprot.writeI32(struct.labels.size());
          for (String _iter76 : struct.labels)
          {
            oprot.writeString(_iter76);
          }
        }
      }
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetOper_timestamp()) {
        oprot.writeI64(struct.oper_timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StockShortInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.stock_pool_name = iprot.readString();
        struct.setStock_pool_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.strategy = iprot.readString();
        struct.setStrategyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stock_name = iprot.readString();
        struct.setStock_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stock_code = iprot.readString();
        struct.setStock_codeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.total_yield = iprot.readDouble();
        struct.setTotal_yieldIsSet(true);
      }
      if (incoming.get(5)) {
        struct.count = iprot.readI64();
        struct.setCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.strategy_remark = iprot.readString();
        struct.setStrategy_remarkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.least_modify_time = iprot.readString();
        struct.setLeast_modify_timeIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.labels = new ArrayList<String>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            String _elem79; // required
            _elem79 = iprot.readString();
            struct.labels.add(_elem79);
          }
        }
        struct.setLabelsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.oper_timestamp = iprot.readI64();
        struct.setOper_timestampIsSet(true);
      }
    }
  }

}

